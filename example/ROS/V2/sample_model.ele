
/*  -------------------------  The Structure Definition  -------------------------  */

one sig negation_topic, sensor_data extends Topic{} 
-- Abstract Node
/* Each node subscribes and advertises some set of Topics */
/* Each node has an inbox and outbox,  respectively representing the messages that will be processed,
    and the ones that already had been. */
abstract sig Node {	
	subscribes: set Topic,
	advertises: set Topic,
	var inbox : set Message,
	var outbox : set Message
}

/*
	In this model, there are 3 distinct type of Nodes.
	The Node_Not, is a simple node, whose behaviour will mimic the logical negation operation
	The Sensor Node will not subscribe any topic, and will behave like a robotic sensor.
	The Actuator  will act as a robotic actuator. Its behaviour is limited to the message consumption.
*/
one sig Node_Not extends Node{}{
	advertises = negation_topic
	subscribes = sensor_data
}									
one sig Sensor extends Node{}{						
	advertises = sensor_data
	subscribes = none
}
one sig Actuator extends Node{}{					
	advertises = none
	subscribes = negation_topic
}

sig Topic {}										-- In this model, the distinct Topics and distinct message types are not considered 

sig Message {										-- Each Message is associated to a given topic, and has some given value
	topic : one Topic,	
	value : one  Value
}

abstract sig Value {}								-- The Value is one of those: 'One or Zero'
one sig One, Zero extends Value{}


/* ------------------------- The Behaviour Definition -------------------------- */

/* 
	These set of facts were stated to describe the constraints concerning the message flow between nodes.
*/
fact Messages {
	all n : Node | always {			
		n.inbox.topic in n.subscribes
		n.outbox.topic in n.advertises
	}
	all m : Message | always {
		m in Node.outbox implies (all n : subscribes.(m.topic) | eventually m in n.inbox)
	}
	always {					
		all m : Node.outbox | eventually m not in Node.outbox
	}
	all m : Message | always{	
		m in Node.inbox implies (some n : advertises.(m.topic) | previous once m in n.outbox) 
	}	
}

/*
	On the initial states, there are no messages, both in inbox as outbox.
*/
fact init {
	no (outbox + inbox)
}

fact Sensor_Behaviour{									
	always {
		eventually some Sensor.outbox
	}
}


fact Node_Not_Behaviour{									-- The Node_Not will always have the same 'Safety' behaviour (logical NOT function).
	always {
		all n: Node_Not {
			(some m1: n.outbox | m1.value in Zero)
				implies previous once (some m0: n.inbox | m0.value in One)
		}
		
	}
	always {
		all n: Node_Not {
			(some m1: n.outbox | m1.value in One)
				implies previous once (some m0: n.inbox | m0.value in Zero)
		}	
	}
}

check safety_property{
	always{
		(some m1: Actuator.inbox | m1.value in Zero)
			implies previous once (some m0: Sensor.outbox | m0.value in One)
	}
} for 4 but 10 Time
