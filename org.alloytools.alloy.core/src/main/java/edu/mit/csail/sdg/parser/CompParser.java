
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 04 21:59:25 WEST 2019
//----------------------------------------------------

package edu.mit.csail.sdg.parser;

import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import java_cup.runtime.*;
import org.alloytools.alloy.core.AlloyCore;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorFatal;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Pair;
import edu.mit.csail.sdg.alloy4.Util;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.ast.Attr.AttrType;
import edu.mit.csail.sdg.ast.FeatureScope;
import edu.mit.csail.sdg.ast.CommandScope;
import edu.mit.csail.sdg.ast.Decl;
import edu.mit.csail.sdg.ast.Expr;
import edu.mit.csail.sdg.ast.ExprBadJoin;
import edu.mit.csail.sdg.ast.ExprITE;
import edu.mit.csail.sdg.ast.ExprLet;
import edu.mit.csail.sdg.ast.ExprBinary;
import edu.mit.csail.sdg.ast.ExprList;
import edu.mit.csail.sdg.ast.ExprConstant;
import edu.mit.csail.sdg.ast.ExprQt;
import edu.mit.csail.sdg.ast.ExprUnary;
import edu.mit.csail.sdg.ast.ExprVar;
import edu.mit.csail.sdg.ast.Sig;
import edu.mit.csail.sdg.ast.Sig.PrimSig;
import edu.mit.csail.sdg.ast.Func;
import edu.mit.csail.sdg.alloy4.ErrorColor;

/** CUP v0.11a beta 20060608 generated parser.
 * @version Thu Apr 04 21:59:25 WEST 2019
 */
public class CompParser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public CompParser() {super();}

    /** Constructor which sets the default scanner. */
    public CompParser(java_cup.runtime.Scanner s) {super(s);}

    /** Constructor which sets the default scanner. */
    public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[] {
                    "\000\u0206\000\002\110\003\000\002\002\004\000\002\111" +
                            "\005\000\002\111\010\000\002\111\006\000\002\111\010" +
                            "\000\002\111\011\000\002\111\013\000\002\111\011\000" +
                            "\002\111\010\000\002\111\004\000\002\111\004\000\002" +
                            "\111\004\000\002\111\004\000\002\111\004\000\002\111" +
                            "\002\000\002\111\004\000\002\004\004\000\002\004\005" +
                            "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
                            "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
                            "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
                            "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
                            "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
                            "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
                            "\111\004\000\002\076\004\000\002\076\005\000\002\076" +
                            "\005\000\002\076\005\000\002\076\005\000\002\076\005" +
                            "\000\002\076\005\000\002\076\005\000\002\076\005\000" +
                            "\002\076\005\000\002\076\005\000\002\076\005\000\002" +
                            "\076\005\000\002\076\005\000\002\076\005\000\002\076" +
                            "\005\000\002\076\005\000\002\076\005\000\002\076\005" +
                            "\000\002\076\005\000\002\076\005\000\002\014\003\000" +
                            "\002\014\003\000\002\013\010\000\002\013\007\000\002" +
                            "\013\012\000\002\013\011\000\002\013\010\000\002\013" +
                            "\007\000\002\013\012\000\002\013\011\000\002\030\002" +
                            "\000\002\030\004\000\002\116\005\000\002\116\005\000" +
                            "\002\116\004\000\002\116\002\000\002\077\004\000\002" +
                            "\077\006\000\002\077\004\000\002\077\002\000\002\115" +
                            "\003\000\002\115\003\000\002\115\003\000\002\115\003" +
                            "\000\002\115\003\000\002\115\003\000\002\115\003\000" +
                            "\002\115\003\000\002\115\003\000\002\115\003\000\002" +
                            "\115\003\000\002\115\003\000\002\115\003\000\002\115" +
                            "\003\000\002\115\003\000\002\115\003\000\002\115\003" +
                            "\000\002\115\003\000\002\115\005\000\002\115\005\000" +
                            "\002\115\005\000\002\115\005\000\002\115\005\000\002" +
                            "\115\005\000\002\115\005\000\002\115\005\000\002\115" +
                            "\005\000\002\115\005\000\002\115\005\000\002\115\005" +
                            "\000\002\115\005\000\002\115\005\000\002\115\005\000" +
                            "\002\115\005\000\002\115\005\000\002\115\005\000\002" +
                            "\114\003\000\002\114\005\000\002\113\004\000\002\113" +
                            "\004\000\002\113\004\000\002\113\004\000\002\113\004" +
                            "\000\002\113\004\000\002\113\004\000\002\112\004\000" +
                            "\002\112\007\000\002\112\011\000\002\112\006\000\002" +
                            "\112\003\000\002\112\006\000\002\112\010\000\002\112" +
                            "\005\000\002\052\011\000\002\052\010\000\002\052\011" +
                            "\000\002\052\010\000\002\052\006\000\002\053\003\000" +
                            "\002\053\004\000\002\040\005\000\002\040\005\000\002" +
                            "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
                            "\005\000\002\040\005\000\002\040\005\000\002\040\005" +
                            "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
                            "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
                            "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
                            "\013\000\002\040\013\000\002\040\010\000\002\040\015" +
                            "\000\002\040\015\000\002\040\012\000\002\070\005\000" +
                            "\002\070\005\000\002\070\005\000\002\070\005\000\002" +
                            "\070\005\000\002\070\005\000\002\070\005\000\002\070" +
                            "\005\000\002\070\005\000\002\070\005\000\002\070\005" +
                            "\000\002\070\005\000\002\070\005\000\002\070\005\000" +
                            "\002\070\005\000\002\070\005\000\002\070\005\000\002" +
                            "\070\005\000\002\070\011\000\002\070\011\000\002\070" +
                            "\006\000\002\070\013\000\002\070\013\000\002\070\010" +
                            "\000\002\127\002\000\002\127\003\000\002\100\005\000" +
                            "\002\100\005\000\002\100\005\000\002\100\005\000\002" +
                            "\100\005\000\002\100\005\000\002\100\005\000\002\100" +
                            "\005\000\002\100\005\000\002\100\005\000\002\100\005" +
                            "\000\002\100\005\000\002\100\005\000\002\100\005\000" +
                            "\002\100\005\000\002\100\005\000\002\100\005\000\002" +
                            "\100\005\000\002\100\011\000\002\102\003\000\002\102" +
                            "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
                            "\000\002\103\003\000\002\103\004\000\002\101\004\000" +
                            "\002\101\004\000\002\101\004\000\002\101\002\000\002" +
                            "\104\003\000\002\104\003\000\002\104\003\000\002\104" +
                            "\003\000\002\104\005\000\002\104\003\000\002\106\002" +
                            "\000\002\106\003\000\002\105\003\000\002\105\005\000" +
                            "\002\107\003\000\002\107\005\000\002\054\003\000\002" +
                            "\054\005\000\002\054\005\000\002\055\003\000\002\055" +
                            "\005\000\002\056\003\000\002\056\005\000\002\057\003" +
                            "\000\002\057\004\000\002\057\005\000\002\057\006\000" +
                            "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
                            "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
                            "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
                            "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
                            "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
                            "\015\005\000\002\015\005\000\002\015\006\000\002\015" +
                            "\006\000\002\015\006\000\002\015\007\000\002\015\006" +
                            "\000\002\015\005\000\002\015\007\000\002\015\007\000" +
                            "\002\015\007\000\002\015\010\000\002\015\007\000\002" +
                            "\015\006\000\002\016\003\000\002\016\006\000\002\016" +
                            "\006\000\002\016\006\000\002\016\007\000\002\016\006" +
                            "\000\002\016\005\000\002\016\007\000\002\016\007\000" +
                            "\002\016\007\000\002\016\010\000\002\016\007\000\002" +
                            "\016\006\000\002\021\005\000\002\021\003\000\002\017" +
                            "\005\000\002\017\003\000\002\020\002\000\002\020\003" +
                            "\000\002\020\005\000\002\020\004\000\002\051\006\000" +
                            "\002\051\007\000\002\033\002\000\002\033\003\000\002" +
                            "\032\005\000\002\032\004\000\002\034\003\000\002\034" +
                            "\004\000\002\035\004\000\002\035\003\000\002\036\002" +
                            "\000\002\036\003\000\002\037\003\000\002\037\005\000" +
                            "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
                            "\006\004\000\002\006\005\000\002\006\005\000\002\006" +
                            "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
                            "\000\002\064\003\000\002\064\005\000\002\065\003\000" +
                            "\002\065\005\000\002\026\003\000\002\026\005\000\002" +
                            "\027\003\000\002\027\005\000\002\041\003\000\002\041" +
                            "\003\000\002\043\003\000\002\043\007\000\002\045\007" +
                            "\000\002\045\005\000\002\043\007\000\002\045\005\000" +
                            "\002\042\003\000\002\042\003\000\002\044\003\000\002" +
                            "\044\007\000\002\046\007\000\002\046\005\000\002\002" +
                            "\003\000\002\002\005\000\002\003\003\000\002\003\005" +
                            "\000\002\060\003\000\002\060\004\000\002\060\004\000" +
                            "\002\061\003\000\002\061\004\000\002\011\005\000\002" +
                            "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
                            "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
                            "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
                            "\002\011\005\000\002\011\004\000\002\011\004\000\002" +
                            "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
                            "\004\000\002\011\004\000\002\011\003\000\002\012\005" +
                            "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
                            "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
                            "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
                            "\005\000\002\012\005\000\002\012\004\000\002\012\004" +
                            "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
                            "\002\012\004\000\002\012\004\000\002\012\003\000\002" +
                            "\117\003\000\002\117\005\000\002\117\005\000\002\117" +
                            "\005\000\002\120\003\000\002\120\005\000\002\120\005" +
                            "\000\002\120\005\000\002\123\003\000\002\123\005\000" +
                            "\002\123\005\000\002\123\005\000\002\123\005\000\002" +
                            "\124\003\000\002\124\005\000\002\124\005\000\002\124" +
                            "\005\000\002\124\005\000\002\121\003\000\002\121\005" +
                            "\000\002\121\005\000\002\121\005\000\002\122\003\000" +
                            "\002\122\005\000\002\122\005\000\002\122\005\000\002" +
                            "\062\003\000\002\062\004\000\002\062\004\000\002\062" +
                            "\004\000\002\062\004\000\002\062\004\000\002\062\004" +
                            "\000\002\063\003\000\002\063\004\000\002\063\004\000" +
                            "\002\063\004\000\002\066\003\000\002\066\005\000\002" +
                            "\067\003\000\002\067\005\000\002\047\003\000\002\047" +
                            "\005\000\002\050\003\000\002\050\005\000\002\073\003" +
                            "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
                            "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
                            "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
                            "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
                            "\000\002\073\003\000\002\073\003\000\002\074\003\000" +
                            "\002\074\005\000\002\075\003\000\002\075\005\000\002" +
                            "\022\003\000\002\022\005\000\002\023\003\000\002\023" +
                            "\005\000\002\071\003\000\002\071\005\000\002\072\003" +
                            "\000\002\072\005\000\002\007\003\000\002\010\003\000" +
                            "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
                            "\010\006\000\002\010\006\000\002\024\003\000\002\024" +
                            "\005\000\002\025\003\000\002\025\005\000\002\025\005" +
                            "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
                            "\002\125\004\000\002\125\004\000\002\125\004\000\002" +
                            "\125\004\000\002\125\004\000\002\125\004\000\002\126" +
                            "\003\000\002\126\004\000\002\126\004\000\002\126\004" +
                            "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
                            "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
                            "\005\003\000\002\005\005\000\002\005\005\000\002\005" +
                            "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
                            "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
                            "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
                            "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
                            "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
                            "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
                            "\002\005\006\000\002\005\005" });

    /** Access to production table. */
    @Override
    public short[][] production_table() {return _production_table;}

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[] {
                    "\000\u042d\000\002\001\ufff2\000\004\002\u042f\001\002\000" +
                            "\076\002\001\035\021\043\016\050\024\065\020\104\031" +
                            "\111\027\125\026\134\014\141\042\147\030\153\010\164" +
                            "\006\165\055\166\054\167\051\170\047\171\045\172\043" +
                            "\173\040\174\036\175\052\176\050\177\046\200\044\201" +
                            "\041\202\037\203\034\204\033\205\032\001\uff45\000\066" +
                            "\035\021\043\016\065\020\104\031\125\026\134\014\147" +
                            "\030\153\010\164\006\165\055\166\054\167\051\170\047" +
                            "\171\045\172\043\173\040\174\036\175\052\176\050\177" +
                            "\046\200\044\201\041\202\037\203\034\204\033\205\032" +
                            "\001\uff45\000\002\001\ufff7\000\002\001\uff2d\000\010\142" +
                            "\102\160\075\207\073\001\002\000\016\035\021\104\031" +
                            "\125\026\134\u0414\147\030\153\010\001\002\000\002\001" +
                            "\ufff1\000\014\057\uff44\067\uff44\102\uff44\126\uff44\133\uff44" +
                            "\001\uff2c\000\004\075\u0401\001\ufff3\000\014\100\334\142" +
                            "\102\160\075\207\073\211\u03fd\001\002\000\012\100\334" +
                            "\142\102\160\075\207\073\001\002\000\014\100\334\142" +
                            "\102\160\075\207\073\211\u039b\001\002\000\002\001\uff30" +
                            "\000\002\001\ufff6\000\014\057\u0375\067\065\102\u0376\126" +
                            "\u0377\133\064\001\002\000\002\001\uffc5\000\002\001\ufff5" +
                            "\000\002\001\uff2e\000\010\142\102\160\075\207\073\001" +
                            "\002\000\002\001\uff2b\000\002\001\uff2f\000\066\035\021" +
                            "\043\016\065\020\104\031\125\026\134\014\147\030\153" +
                            "\010\164\006\165\055\166\054\167\051\170\047\171\045" +
                            "\172\043\173\040\174\036\175\052\176\050\177\046\200" +
                            "\044\201\041\202\037\203\034\204\033\205\032\001\uff45" +
                            "\000\066\035\021\043\016\065\020\104\031\125\026\134" +
                            "\014\147\030\153\010\164\006\165\055\166\054\167\051" +
                            "\170\047\171\045\172\043\173\040\174\036\175\052\176" +
                            "\050\177\046\200\044\201\041\202\037\203\034\204\033" +
                            "\205\032\001\uff45\000\066\035\021\043\016\065\020\104" +
                            "\031\125\026\134\014\147\030\153\010\164\006\165\055" +
                            "\166\054\167\051\170\047\171\045\172\043\173\040\174" +
                            "\036\175\052\176\050\177\046\200\044\201\041\202\037" +
                            "\203\034\204\033\205\032\001\uff45\000\002\001\ufff4\000" +
                            "\066\035\021\043\016\065\020\104\031\125\026\134\014" +
                            "\147\030\153\010\164\006\165\055\166\054\167\051\170" +
                            "\047\171\045\172\043\173\040\174\036\175\052\176\050" +
                            "\177\046\200\044\201\041\202\037\203\034\204\033\205" +
                            "\032\001\uff45\000\066\035\021\043\016\065\020\104\031" +
                            "\125\026\134\014\147\030\153\010\164\006\165\055\166" +
                            "\054\167\051\170\047\171\045\172\043\173\040\174\036" +
                            "\175\052\176\050\177\046\200\044\201\041\202\037\203" +
                            "\034\204\033\205\032\001\uff45\000\066\035\021\043\016" +
                            "\065\020\104\031\125\026\134\014\147\030\153\010\164" +
                            "\006\165\055\166\054\167\051\170\047\171\045\172\043" +
                            "\173\040\174\036\175\052\176\050\177\046\200\044\201" +
                            "\041\202\037\203\034\204\033\205\032\001\uff45\000\066" +
                            "\035\021\043\016\065\020\104\031\125\026\134\014\147" +
                            "\030\153\010\164\006\165\055\166\054\167\051\170\047" +
                            "\171\045\172\043\173\040\174\036\175\052\176\050\177" +
                            "\046\200\044\201\041\202\037\203\034\204\033\205\032" +
                            "\001\uff45\000\002\001\uffc4\000\066\035\021\043\016\065" +
                            "\020\104\031\125\026\134\014\147\030\153\010\164\006" +
                            "\165\055\166\054\167\051\170\047\171\045\172\043\173" +
                            "\040\174\036\175\052\176\050\177\046\200\044\201\041" +
                            "\202\037\203\034\204\033\205\032\001\uff45\000\066\035" +
                            "\021\043\016\065\020\104\031\125\026\134\014\147\030" +
                            "\153\010\164\006\165\055\166\054\167\051\170\047\171" +
                            "\045\172\043\173\040\174\036\175\052\176\050\177\046" +
                            "\200\044\201\041\202\037\203\034\204\033\205\032\001" +
                            "\uff45\000\066\035\021\043\016\065\020\104\031\125\026" +
                            "\134\014\147\030\153\010\164\006\165\055\166\054\167" +
                            "\051\170\047\171\045\172\043\173\040\174\036\175\052" +
                            "\176\050\177\046\200\044\201\041\202\037\203\034\204" +
                            "\033\205\032\001\uff45\000\066\035\021\043\016\065\020" +
                            "\104\031\125\026\134\014\147\030\153\010\164\006\165" +
                            "\055\166\054\167\051\170\047\171\045\172\043\173\040" +
                            "\174\036\175\052\176\050\177\046\200\044\201\041\202" +
                            "\037\203\034\204\033\205\032\001\uff45\000\066\035\021" +
                            "\043\016\065\020\104\031\125\026\134\014\147\030\153" +
                            "\010\164\006\165\055\166\054\167\051\170\047\171\045" +
                            "\172\043\173\040\174\036\175\052\176\050\177\046\200" +
                            "\044\201\041\202\037\203\034\204\033\205\032\001\uff45" +
                            "\000\066\035\021\043\016\065\020\104\031\125\026\134" +
                            "\014\147\030\153\010\164\006\165\055\166\054\167\051" +
                            "\170\047\171\045\172\043\173\040\174\036\175\052\176" +
                            "\050\177\046\200\044\201\041\202\037\203\034\204\033" +
                            "\205\032\001\uff45\000\066\035\021\043\016\065\020\104" +
                            "\031\125\026\134\014\147\030\153\010\164\006\165\055" +
                            "\166\054\167\051\170\047\171\045\172\043\173\040\174" +
                            "\036\175\052\176\050\177\046\200\044\201\041\202\037" +
                            "\203\034\204\033\205\032\001\uff45\000\066\035\021\043" +
                            "\016\065\020\104\031\125\026\134\014\147\030\153\010" +
                            "\164\006\165\055\166\054\167\051\170\047\171\045\172" +
                            "\043\173\040\174\036\175\052\176\050\177\046\200\044" +
                            "\201\041\202\037\203\034\204\033\205\032\001\uff45\000" +
                            "\002\001\uffdb\000\066\035\021\043\016\065\020\104\031" +
                            "\125\026\134\014\147\030\153\010\164\006\165\055\166" +
                            "\054\167\051\170\047\171\045\172\043\173\040\174\036" +
                            "\175\052\176\050\177\046\200\044\201\041\202\037\203" +
                            "\034\204\033\205\032\001\uff45\000\066\035\021\043\016" +
                            "\065\020\104\031\125\026\134\014\147\030\153\010\164" +
                            "\006\165\055\166\054\167\051\170\047\171\045\172\043" +
                            "\173\040\174\036\175\052\176\050\177\046\200\044\201" +
                            "\041\202\037\203\034\204\033\205\032\001\uff45\000\004" +
                            "\165\u02c9\001\002\000\004\165\u02c8\001\002\000\004\165" +
                            "\u02c7\001\002\000\004\165\u02c6\001\002\000\004\165\u02c5" +
                            "\001\002\000\006\067\065\133\064\001\002\000\020\114" +
                            "\074\142\070\150\076\155\067\160\075\162\072\207\073" +
                            "\001\002\000\020\114\074\142\070\150\076\155\067\160" +
                            "\075\162\072\207\073\001\002\000\010\051\u02a0\101\u02a2" +
                            "\105\u02a1\001\uff25\000\002\001\uff23\000\004\151\u0160\001" +
                            "\002\000\004\151\105\001\uff19\000\002\001\uff24\000\002" +
                            "\001\uff16\000\002\001\uff20\000\004\151\u016a\001\002\000" +
                            "\002\001\uff22\000\004\055\100\001\002\000\010\142\102" +
                            "\160\075\207\073\001\002\000\010\051\107\101\111\105" +
                            "\110\001\002\000\004\151\103\001\002\000\004\207\073" +
                            "\001\002\000\004\151\105\001\uff17\000\004\207\106\001" +
                            "\002\000\002\001\uff15\000\162\031\201\032\225\033\231" +
                            "\034\233\036\205\037\255\044\152\047\302\053\316\072" +
                            "\312\073\200\077\246\100\206\102\307\103\277\104\234" +
                            "\105\210\112\232\113\304\114\074\115\215\124\174\125" +
                            "\235\142\261\143\260\150\076\152\242\153\276\154\243" +
                            "\155\067\156\257\157\202\160\252\161\216\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\066\052\135\053\114\062\140\130" +
                            "\145\134\113\142\102\160\075\164\143\165\142\166\141" +
                            "\167\137\170\136\171\134\172\133\173\132\174\130\175" +
                            "\126\176\125\177\124\200\123\201\122\202\121\203\120" +
                            "\204\117\205\115\207\073\001\ufedf\000\066\052\135\053" +
                            "\114\062\140\130\145\134\113\142\102\160\075\164\143" +
                            "\165\142\166\141\167\137\170\136\171\134\172\133\173" +
                            "\132\174\130\175\126\176\125\177\124\200\123\201\122" +
                            "\202\121\203\120\204\117\205\115\207\073\001\ufedf\000" +
                            "\004\137\u0295\001\002\000\012\053\u028a\142\102\160\075" +
                            "\207\073\001\002\000\010\142\102\160\075\207\073\001" +
                            "\002\000\064\053\u022e\062\u01f7\130\u01f8\134\u0207\142\102" +
                            "\160\075\164\143\165\142\166\141\167\137\170\136\171" +
                            "\134\172\133\173\132\174\130\175\126\176\125\177\124" +
                            "\200\123\201\122\202\121\203\120\204\117\205\115\207" +
                            "\073\001\002\000\002\001\uff14\000\064\053\u022e\062\u01f7" +
                            "\130\u01f8\134\u0207\142\102\160\075\164\143\165\142\166" +
                            "\141\167\137\170\136\171\134\172\133\173\132\174\130" +
                            "\175\126\176\125\177\124\200\123\201\122\202\121\203" +
                            "\120\204\117\205\115\207\073\001\002\000\064\053\u022e" +
                            "\062\u01f7\130\u01f8\134\u0207\142\102\160\075\164\143\165" +
                            "\142\166\141\167\137\170\136\171\134\172\133\173\132" +
                            "\174\130\175\126\176\125\177\124\200\123\201\122\202" +
                            "\121\203\120\204\117\205\115\207\073\001\002\000\064" +
                            "\053\u022e\062\u01f7\130\u01f8\134\u0207\142\102\160\075\164" +
                            "\143\165\142\166\141\167\137\170\136\171\134\172\133" +
                            "\173\132\174\130\175\126\176\125\177\124\200\123\201" +
                            "\122\202\121\203\120\204\117\205\115\207\073\001\002" +
                            "\000\064\053\u022e\062\u01f7\130\u01f8\134\u0207\142\102\160" +
                            "\075\164\143\165\142\166\141\167\137\170\136\171\134" +
                            "\172\133\173\132\174\130\175\126\176\125\177\124\200" +
                            "\123\201\122\202\121\203\120\204\117\205\115\207\073" +
                            "\001\002\000\064\053\u022e\062\u01f7\130\u01f8\134\u0207\142" +
                            "\102\160\075\164\143\165\142\166\141\167\137\170\136" +
                            "\171\134\172\133\173\132\174\130\175\126\176\125\177" +
                            "\124\200\123\201\122\202\121\203\120\204\117\205\115" +
                            "\207\073\001\002\000\064\053\u022e\062\u01f7\130\u01f8\134" +
                            "\u0207\142\102\160\075\164\143\165\142\166\141\167\137" +
                            "\170\136\171\134\172\133\173\132\174\130\175\126\176" +
                            "\125\177\124\200\123\201\122\202\121\203\120\204\117" +
                            "\205\115\207\073\001\002\000\064\053\u022e\062\u01f7\130" +
                            "\u01f8\134\u0207\142\102\160\075\164\143\165\142\166\141" +
                            "\167\137\170\136\171\134\172\133\173\132\174\130\175" +
                            "\126\176\125\177\124\200\123\201\122\202\121\203\120" +
                            "\204\117\205\115\207\073\001\002\000\064\053\u022e\062" +
                            "\u01f7\130\u01f8\134\u0207\142\102\160\075\164\143\165\142" +
                            "\166\141\167\137\170\136\171\134\172\133\173\132\174" +
                            "\130\175\126\176\125\177\124\200\123\201\122\202\121" +
                            "\203\120\204\117\205\115\207\073\001\002\000\004\052" +
                            "\u0283\001\ufede\000\064\053\u022e\062\u01f7\130\u01f8\134\u0207" +
                            "\142\102\160\075\164\143\165\142\166\141\167\137\170" +
                            "\136\171\134\172\133\173\132\174\130\175\126\176\125" +
                            "\177\124\200\123\201\122\202\121\203\120\204\117\205" +
                            "\115\207\073\001\002\000\002\001\ufef0\000\064\053\u022e" +
                            "\062\u01f7\130\u01f8\134\u0207\142\102\160\075\164\143\165" +
                            "\142\166\141\167\137\170\136\171\134\172\133\173\132" +
                            "\174\130\175\126\176\125\177\124\200\123\201\122\202" +
                            "\121\203\120\204\117\205\115\207\073\001\002\000\064" +
                            "\053\u022e\062\u01f7\130\u01f8\134\u0207\142\102\160\075\164" +
                            "\143\165\142\166\141\167\137\170\136\171\134\172\133" +
                            "\173\132\174\130\175\126\176\125\177\124\200\123\201" +
                            "\122\202\121\203\120\204\117\205\115\207\073\001\002" +
                            "\000\064\053\u022e\062\u01f7\130\u01f8\134\u0207\142\102\160" +
                            "\075\164\143\165\142\166\141\167\137\170\136\171\134" +
                            "\172\133\173\132\174\130\175\126\176\125\177\124\200" +
                            "\123\201\122\202\121\203\120\204\117\205\115\207\073" +
                            "\001\002\000\066\052\135\053\114\062\140\130\145\134" +
                            "\113\142\102\160\075\164\143\165\142\166\141\167\137" +
                            "\170\136\171\134\172\133\173\132\174\130\175\126\176" +
                            "\125\177\124\200\123\201\122\202\121\203\120\204\117" +
                            "\205\115\207\073\001\ufedf\000\064\053\u022e\062\u01f7\130" +
                            "\u01f8\134\u0207\142\102\160\075\164\143\165\142\166\141" +
                            "\167\137\170\136\171\134\172\133\173\132\174\130\175" +
                            "\126\176\125\177\124\200\123\201\122\202\121\203\120" +
                            "\204\117\205\115\207\073\001\002\000\064\053\u022e\062" +
                            "\u01f7\130\u01f8\134\u0207\142\102\160\075\164\143\165\142" +
                            "\166\141\167\137\170\136\171\134\172\133\173\132\174" +
                            "\130\175\126\176\125\177\124\200\123\201\122\202\121" +
                            "\203\120\204\117\205\115\207\073\001\002\000\010\142" +
                            "\102\160\075\207\073\001\002\000\064\053\u022e\062\u01f7" +
                            "\130\u01f8\134\u0207\142\102\160\075\164\143\165\142\166" +
                            "\141\167\137\170\136\171\134\172\133\173\132\174\130" +
                            "\175\126\176\125\177\124\200\123\201\122\202\121\203" +
                            "\120\204\117\205\115\207\073\001\002\000\064\053\u022e" +
                            "\062\u01f7\130\u01f8\134\u0207\142\102\160\075\164\143\165" +
                            "\142\166\141\167\137\170\136\171\134\172\133\173\132" +
                            "\174\130\175\126\176\125\177\124\200\123\201\122\202" +
                            "\121\203\120\204\117\205\115\207\073\001\002\000\064" +
                            "\053\u022e\062\u01f7\130\u01f8\134\u0207\142\102\160\075\164" +
                            "\143\165\142\166\141\167\137\170\136\171\134\172\133" +
                            "\173\132\174\130\175\126\176\125\177\124\200\123\201" +
                            "\122\202\121\203\120\204\117\205\115\207\073\001\002" +
                            "\000\010\051\u0230\052\147\060\u0279\001\002\000\010\142" +
                            "\102\160\075\207\073\001\002\000\010\051\151\052\147" +
                            "\060\150\001\002\000\010\142\102\160\075\207\073\001" +
                            "\002\000\162\031\201\032\225\033\231\034\233\036\205" +
                            "\037\255\044\152\047\302\053\u0276\072\312\073\200\077" +
                            "\246\100\206\102\307\103\277\104\234\105\210\112\232" +
                            "\113\304\114\074\115\215\124\174\125\235\142\261\143" +
                            "\260\150\076\152\242\153\276\154\243\155\067\156\257" +
                            "\157\202\160\252\161\216\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\162\031\201\032\225\033\231\034\233\036\205\037" +
                            "\255\044\152\047\302\053\250\072\312\073\200\077\246" +
                            "\100\206\102\307\103\277\104\234\105\210\112\232\113" +
                            "\304\114\074\115\215\124\174\125\235\142\261\143\260" +
                            "\150\076\152\242\153\276\154\243\155\067\156\257\157" +
                            "\202\160\252\161\216\162\072\164\170\165\167\166\166" +
                            "\167\165\170\164\171\163\172\162\173\160\174\156\175" +
                            "\275\176\274\177\271\200\270\201\267\202\266\203\265" +
                            "\204\264\205\263\207\073\210\230\211\220\001\002\000" +
                            "\010\142\102\160\075\207\073\001\002\000\002\001\ufebd" +
                            "\000\002\001\ufebf\000\002\001\ufecb\000\162\031\201\032" +
                            "\225\033\231\034\233\036\205\037\255\044\152\047\302" +
                            "\053\316\072\312\073\200\077\246\100\206\102\307\103" +
                            "\277\104\234\105\210\112\232\113\304\114\074\115\215" +
                            "\124\174\125\235\142\261\143\260\150\076\152\242\153" +
                            "\276\154\243\155\067\156\257\157\202\160\252\161\216" +
                            "\162\072\164\170\165\167\166\166\167\165\170\164\171" +
                            "\163\172\162\173\160\174\156\175\275\176\274\177\271" +
                            "\200\270\201\267\202\266\203\265\204\264\205\263\207" +
                            "\073\210\230\211\220\001\002\000\006\041\u026b\075\u026a" +
                            "\001\ufeb1\000\162\031\201\032\225\033\231\034\233\036" +
                            "\205\037\255\044\152\047\302\053\316\072\312\073\200" +
                            "\077\246\100\206\102\307\103\277\104\234\105\210\112" +
                            "\232\113\304\114\074\115\215\124\174\125\235\142\261" +
                            "\143\260\150\076\152\242\153\276\154\243\155\067\156" +
                            "\257\157\202\160\252\161\216\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\002\001\ufeb9\000\162\031\201\032\225\033\231" +
                            "\034\233\036\205\037\255\044\152\047\302\053\316\072" +
                            "\312\073\200\077\246\100\206\102\307\103\277\104\234" +
                            "\105\210\112\232\113\304\114\074\115\215\124\174\125" +
                            "\235\142\261\143\260\150\076\152\242\153\276\154\243" +
                            "\155\067\156\257\157\202\160\252\161\216\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\162\031\201\032\225\033\231\034" +
                            "\233\036\205\037\255\044\152\047\302\053\316\072\312" +
                            "\073\200\077\246\100\206\102\307\103\277\104\234\105" +
                            "\210\112\232\113\304\114\074\115\215\124\174\125\235" +
                            "\142\261\143\260\150\076\152\242\153\276\154\243\155" +
                            "\067\156\257\157\202\160\252\161\216\162\072\164\170" +
                            "\165\167\166\166\167\165\170\164\171\163\172\162\173" +
                            "\160\174\156\175\275\176\274\177\271\200\270\201\267" +
                            "\202\266\203\265\204\264\205\263\207\073\210\230\211" +
                            "\220\001\002\000\162\031\201\032\225\033\231\034\233" +
                            "\036\205\037\255\044\152\047\302\053\316\072\312\073" +
                            "\200\077\246\100\206\102\307\103\277\104\234\105\210" +
                            "\112\232\113\304\114\074\115\215\124\174\125\235\142" +
                            "\261\143\260\150\076\152\242\153\276\154\243\155\067" +
                            "\156\257\157\202\160\252\161\216\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\162\031\201\032\225\033\231\034\233\036" +
                            "\205\037\255\044\152\047\302\053\316\072\312\073\200" +
                            "\077\246\100\206\102\307\103\277\104\234\105\210\112" +
                            "\232\113\304\114\074\115\215\124\174\125\235\142\261" +
                            "\143\260\150\076\152\242\153\276\154\243\155\067\156" +
                            "\257\157\202\160\252\161\216\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\162\031\201\032\225\033\231\034\233\036\205" +
                            "\037\255\044\152\047\302\053\316\072\312\073\200\077" +
                            "\246\100\206\102\307\103\277\104\234\105\210\112\232" +
                            "\113\304\114\074\115\215\124\174\125\235\142\261\143" +
                            "\260\150\076\152\242\153\276\154\243\155\067\156\257" +
                            "\157\202\160\252\161\216\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\162\031\201\032\225\033\231\034\233\036\205\037" +
                            "\255\044\152\047\302\053\316\072\312\073\200\077\246" +
                            "\100\206\102\307\103\277\104\234\105\210\112\232\113" +
                            "\304\114\074\115\215\124\174\125\235\142\261\143\260" +
                            "\150\076\152\242\153\276\154\243\155\067\156\257\157" +
                            "\202\160\252\161\216\162\072\164\170\165\167\166\166" +
                            "\167\165\170\164\171\163\172\162\173\160\174\156\175" +
                            "\275\176\274\177\271\200\270\201\267\202\266\203\265" +
                            "\204\264\205\263\207\073\210\230\211\220\001\002\000" +
                            "\162\031\201\032\225\033\231\034\233\036\205\037\255" +
                            "\044\152\047\302\053\316\072\312\073\200\077\246\100" +
                            "\206\102\307\103\277\104\234\105\210\112\232\113\304" +
                            "\114\074\115\215\124\174\125\235\142\261\143\260\150" +
                            "\076\152\242\153\276\154\243\155\067\156\257\157\202" +
                            "\160\252\161\216\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\044" +
                            "\004\u0122\005\u0117\006\u0123\007\u011d\010\u011e\011\u0125\012" +
                            "\u0120\013\u011a\014\u0126\015\u011c\016\u0119\017\u011f\020\u0118" +
                            "\021\u0121\022\u011b\023\u0127\054\u0266\001\ufe3d\000\002\001" +
                            "\ufe3f\000\002\001\ufe66\000\064\053\114\062\140\130\145" +
                            "\134\113\142\102\160\075\164\143\165\142\166\141\167" +
                            "\137\170\136\171\134\172\133\173\132\174\130\175\126" +
                            "\176\125\177\124\200\123\201\122\202\121\203\120\204" +
                            "\117\205\115\207\073\001\002\000\002\001\ufe6a\000\004" +
                            "\132\u0262\001\ufe5b\000\002\001\ufe62\000\002\001\ufe18\000" +
                            "\002\001\ufe16\000\146\031\201\032\225\033\231\034\233" +
                            "\037\255\044\152\047\302\053\316\072\312\073\200\077" +
                            "\246\100\206\101\373\102\307\103\277\105\210\112\232" +
                            "\114\074\124\174\142\070\150\076\152\242\154\243\155" +
                            "\067\156\257\157\202\160\252\161\216\162\072\164\170" +
                            "\165\167\166\166\167\165\170\164\171\163\172\162\173" +
                            "\160\174\156\175\275\176\274\177\271\200\270\201\267" +
                            "\202\266\203\265\204\264\205\263\207\073\210\230\211" +
                            "\220\001\002\000\002\001\ufeab\000\002\001\ufead\000\126" +
                            "\031\201\032\225\033\231\034\233\044\152\047\302\053" +
                            "\316\072\312\073\200\077\246\100\206\105\210\114\074" +
                            "\142\070\150\076\154\243\155\067\157\202\160\252\161" +
                            "\216\162\072\164\170\165\167\166\166\167\165\170\164" +
                            "\171\163\172\162\173\160\174\156\175\275\176\274\177" +
                            "\271\200\270\201\267\202\266\203\265\204\264\205\263" +
                            "\207\073\210\230\211\220\001\002\000\172\031\201\032" +
                            "\225\033\231\034\233\036\205\037\255\044\152\047\302" +
                            "\053\u01fb\062\u01f7\072\312\073\200\077\246\100\206\102" +
                            "\307\103\277\104\234\105\210\112\232\113\304\114\074" +
                            "\115\215\124\174\125\235\130\u01f8\134\u0207\136\340\142" +
                            "\261\143\260\150\076\152\242\153\276\154\243\155\067" +
                            "\156\257\157\202\160\252\161\216\162\072\164\u01f6\165" +
                            "\u01f5\166\u01f4\167\u01f3\170\u01f2\171\u01f1\172\u01f0\173\u01ef" +
                            "\174\u01ee\175\u0206\176\u0205\177\u0204\200\u0203\201\u0202\202" +
                            "\u0201\203\u0200\204\u01ff\205\u01fd\207\073\210\230\211\220" +
                            "\001\002\000\002\001\ufefc\000\162\031\201\032\225\033" +
                            "\231\034\233\036\205\037\255\044\152\047\302\053\316" +
                            "\072\312\073\200\077\246\100\206\102\307\103\277\104" +
                            "\234\105\210\112\232\113\304\114\074\115\215\124\174" +
                            "\125\235\142\261\143\260\150\076\152\242\153\276\154" +
                            "\243\155\067\156\257\157\202\160\252\161\216\162\072" +
                            "\164\170\165\167\166\166\167\165\170\164\171\163\172" +
                            "\162\173\160\174\156\175\275\176\274\177\271\200\270" +
                            "\201\267\202\266\203\265\204\264\205\263\207\073\210" +
                            "\230\211\220\001\002\000\004\135\u01ea\001\ufe39\000\002" +
                            "\001\ufe3b\000\006\055\u01e8\101\376\001\ufe35\000\002\001" +
                            "\ufe37\000\162\031\201\032\225\033\231\034\233\036\205" +
                            "\037\255\044\152\047\302\053\316\072\312\073\200\077" +
                            "\246\100\206\102\307\103\277\104\234\105\210\112\232" +
                            "\113\304\114\074\115\215\124\174\125\235\142\261\143" +
                            "\260\150\076\152\242\153\276\154\243\155\067\156\257" +
                            "\157\202\160\252\161\216\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\132\031\201\032\225\033\231\037\255\044\152\047" +
                            "\302\073\200\100\206\102\307\103\277\105\210\112\232" +
                            "\114\074\124\174\142\070\150\076\152\242\154\243\155" +
                            "\067\156\257\160\252\161\216\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\002\001\ufe00\000\002\001\ufe19\000\010\144\u0137" +
                            "\145\u0135\146\u0136\001\ufe7d\000\002\001\ufe91\000\032\060" +
                            "\u01ca\070\u01c8\071\u01c3\076\u01c2\106\u01cb\107\u01c4\116\u01c1" +
                            "\117\u01c6\120\u01c5\121\u01c0\122\u01c9\123\u01c7\001\ufea6\000" +
                            "\002\001\ufea9\000\002\001\ufe15\000\004\127\u01bc\001\ufecc" +
                            "\000\002\001\ufecd\000\002\001\ufe1a\000\002\001\ufe14\000" +
                            "\064\053\114\062\140\130\145\134\113\142\102\160\075" +
                            "\164\143\165\142\166\141\167\137\170\136\171\134\172" +
                            "\133\173\132\174\130\175\126\176\125\177\124\200\123" +
                            "\201\122\202\121\203\120\204\117\205\115\207\073\001" +
                            "\002\000\004\101\u01b7\001\002\000\126\031\201\032\225" +
                            "\033\231\034\233\044\152\047\302\053\316\072\312\073" +
                            "\200\077\246\100\206\105\210\114\074\142\070\150\076" +
                            "\154\243\155\067\157\202\160\252\161\216\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\126\031\201\032\225\033\231\034" +
                            "\233\044\152\047\302\053\316\072\312\073\200\077\246" +
                            "\100\206\105\210\114\074\142\070\150\076\154\243\155" +
                            "\067\157\202\160\252\161\216\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\004\074\u0179\001\ufec1\000\002\001\ufec3\000\002" +
                            "\001\ufe51\000\002\001\ufe53\000\064\053\114\062\140\130" +
                            "\145\134\113\142\102\160\075\164\143\165\142\166\141" +
                            "\167\137\170\136\171\134\172\133\173\132\174\130\175" +
                            "\126\176\125\177\124\200\123\201\122\202\121\203\120" +
                            "\204\117\205\115\207\073\001\002\000\132\031\201\032" +
                            "\225\033\231\037\255\044\152\047\302\073\200\100\206" +
                            "\102\307\103\277\105\210\112\232\114\074\124\174\142" +
                            "\070\150\076\152\242\154\243\155\067\156\257\160\252" +
                            "\161\216\162\072\164\170\165\167\166\166\167\165\170" +
                            "\164\171\163\172\162\173\160\174\156\175\275\176\274" +
                            "\177\271\200\270\201\267\202\266\203\265\204\264\205" +
                            "\263\207\073\210\230\211\220\001\002\000\002\001\ufe2a" +
                            "\000\002\001\ufe2c\000\146\031\201\032\225\033\231\034" +
                            "\233\037\255\044\152\047\302\053\316\072\312\073\200" +
                            "\077\246\100\206\101\u0107\102\307\103\277\105\210\112" +
                            "\232\114\074\124\174\142\070\150\076\152\242\154\243" +
                            "\155\067\156\257\157\202\160\252\161\216\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\002\001\ufe1e\000\164\031\201\032" +
                            "\225\033\231\034\233\036\205\037\255\044\152\047\302" +
                            "\053\316\072\312\073\200\077\246\100\206\101\317\102" +
                            "\307\103\277\104\234\105\210\112\232\113\304\114\074" +
                            "\115\215\124\174\125\235\142\261\143\260\150\076\152" +
                            "\242\153\276\154\243\155\067\156\257\157\202\160\252" +
                            "\161\216\162\072\164\170\165\167\166\166\167\165\170" +
                            "\164\171\163\172\162\173\160\174\156\175\275\176\274" +
                            "\177\271\200\270\201\267\202\266\203\265\204\264\205" +
                            "\263\207\073\210\230\211\220\001\002\000\010\026\u016c" +
                            "\027\u016e\030\u016d\001\ufe6f\000\004\151\u016a\001\ufe17\000" +
                            "\002\001\ufe74\000\004\040\u0168\001\ufe55\000\064\053\114" +
                            "\062\140\130\145\134\113\142\102\160\075\164\143\165" +
                            "\142\166\141\167\137\170\136\171\134\172\133\173\132" +
                            "\174\130\175\126\176\125\177\124\200\123\201\122\202" +
                            "\121\203\120\204\117\205\115\207\073\001\002\000\002" +
                            "\001\ufe57\000\064\053\114\062\140\130\145\134\113\142" +
                            "\102\160\075\164\143\165\142\166\141\167\137\170\136" +
                            "\171\134\172\133\173\132\174\130\175\126\176\125\177" +
                            "\124\200\123\201\122\202\121\203\120\204\117\205\115" +
                            "\207\073\001\002\000\126\031\201\032\225\033\231\034" +
                            "\233\044\152\047\302\053\316\072\312\073\200\077\246" +
                            "\100\206\105\210\114\074\142\070\150\076\154\243\155" +
                            "\067\157\202\160\252\161\216\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\130\031\201\032\225\033\231\034\233\044\152" +
                            "\047\302\053\316\072\312\073\200\077\246\100\206\105" +
                            "\210\114\074\142\070\150\076\151\u0160\154\243\155\067" +
                            "\157\202\160\252\161\216\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\002\001\uff25\000\162\031\201\032\225\033\231\034" +
                            "\233\036\205\037\255\044\152\047\302\053\316\072\312" +
                            "\073\200\077\246\100\206\102\307\103\277\104\234\105" +
                            "\210\112\232\113\304\114\074\115\215\124\174\125\235" +
                            "\142\261\143\260\150\076\152\242\153\276\154\243\155" +
                            "\067\156\257\157\202\160\252\161\216\162\072\164\170" +
                            "\165\167\166\166\167\165\170\164\171\163\172\162\173" +
                            "\160\174\156\175\275\176\274\177\271\200\270\201\267" +
                            "\202\266\203\265\204\264\205\263\207\073\210\230\211" +
                            "\220\001\002\000\162\031\201\032\225\033\231\034\233" +
                            "\036\205\037\255\044\152\047\302\053\316\072\312\073" +
                            "\200\077\246\100\206\102\307\103\277\104\234\105\210" +
                            "\112\232\113\304\114\074\115\215\124\174\125\235\142" +
                            "\261\143\260\150\076\152\242\153\276\154\243\155\067" +
                            "\156\257\157\202\160\252\161\216\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\162\031\201\032\225\033\231\034\233\036" +
                            "\205\037\255\044\152\047\302\053\316\072\312\073\200" +
                            "\077\246\100\206\102\307\103\277\104\234\105\210\112" +
                            "\232\113\304\114\074\115\215\124\174\125\235\142\261" +
                            "\143\260\150\076\152\242\153\276\154\243\155\067\156" +
                            "\257\157\202\160\252\161\216\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\162\031\201\032\225\033\231\034\233\036\205" +
                            "\037\255\044\152\047\302\053\316\072\312\073\200\077" +
                            "\246\100\206\102\307\103\277\104\234\105\210\112\232" +
                            "\113\304\114\074\115\215\124\174\125\235\142\261\143" +
                            "\260\150\076\152\242\153\276\154\243\155\067\156\257" +
                            "\157\202\160\252\161\216\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\162\031\201\032\225\033\231\034\233\036\205\037" +
                            "\255\044\152\047\302\053\316\072\312\073\200\077\246" +
                            "\100\206\102\307\103\277\104\234\105\210\112\232\113" +
                            "\304\114\074\115\215\124\174\125\235\142\261\143\260" +
                            "\150\076\152\242\153\276\154\243\155\067\156\257\157" +
                            "\202\160\252\161\216\162\072\164\170\165\167\166\166" +
                            "\167\165\170\164\171\163\172\162\173\160\174\156\175" +
                            "\275\176\274\177\271\200\270\201\267\202\266\203\265" +
                            "\204\264\205\263\207\073\210\230\211\220\001\002\000" +
                            "\162\031\201\032\225\033\231\034\233\036\205\037\255" +
                            "\044\152\047\302\053\316\072\312\073\200\077\246\100" +
                            "\206\102\307\103\277\104\234\105\210\112\232\113\304" +
                            "\114\074\115\215\124\174\125\235\142\261\143\260\150" +
                            "\076\152\242\153\276\154\243\155\067\156\257\157\202" +
                            "\160\252\161\216\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\162" +
                            "\031\201\032\225\033\231\034\233\036\205\037\255\044" +
                            "\152\047\302\053\316\072\312\073\200\077\246\100\206" +
                            "\102\307\103\277\104\234\105\210\112\232\113\304\114" +
                            "\074\115\215\124\174\125\235\142\261\143\260\150\076" +
                            "\152\242\153\276\154\243\155\067\156\257\157\202\160" +
                            "\252\161\216\162\072\164\170\165\167\166\166\167\165" +
                            "\170\164\171\163\172\162\173\160\174\156\175\275\176" +
                            "\274\177\271\200\270\201\267\202\266\203\265\204\264" +
                            "\205\263\207\073\210\230\211\220\001\002\000\002\001" +
                            "\ufe32\000\002\001\ufe33\000\162\031\201\032\225\033\231" +
                            "\034\233\036\205\037\255\044\152\047\302\053\316\072" +
                            "\312\073\200\077\246\100\206\102\307\103\277\104\234" +
                            "\105\210\112\232\113\304\114\074\115\215\124\174\125" +
                            "\235\142\261\143\260\150\076\152\242\153\276\154\243" +
                            "\155\067\156\257\157\202\160\252\161\216\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\162\031\201\032\225\033\231\034" +
                            "\233\036\205\037\255\044\152\047\302\053\316\072\312" +
                            "\073\200\077\246\100\206\102\307\103\277\104\234\105" +
                            "\210\112\232\113\304\114\074\115\215\124\174\125\235" +
                            "\142\261\143\260\150\076\152\242\153\276\154\243\155" +
                            "\067\156\257\157\202\160\252\161\216\162\072\164\170" +
                            "\165\167\166\166\167\165\170\164\171\163\172\162\173" +
                            "\160\174\156\175\275\176\274\177\271\200\270\201\267" +
                            "\202\266\203\265\204\264\205\263\207\073\210\230\211" +
                            "\220\001\002\000\126\031\201\032\225\033\231\034\233" +
                            "\044\152\047\302\053\316\072\312\073\200\077\246\100" +
                            "\206\105\210\114\074\142\070\150\076\154\243\155\067" +
                            "\157\202\160\252\161\216\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\064\053\114\062\140\130\145\134\113\142\102\160" +
                            "\075\164\143\165\142\166\141\167\137\170\136\171\134" +
                            "\172\133\173\132\174\130\175\126\176\125\177\124\200" +
                            "\123\201\122\202\121\203\120\204\117\205\115\207\073" +
                            "\001\002\000\002\001\ufeb3\000\002\001\ufebb\000\132\031" +
                            "\201\032\225\033\231\037\255\044\152\047\302\073\200" +
                            "\100\206\102\307\103\277\105\210\112\232\114\074\124" +
                            "\174\142\070\150\076\152\242\154\243\155\067\156\257" +
                            "\160\252\161\216\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\002" +
                            "\001\ufdfe\000\126\031\201\032\225\033\231\034\233\044" +
                            "\152\047\302\053\316\072\312\073\200\077\246\100\206" +
                            "\105\210\114\074\142\070\150\076\154\243\155\067\157" +
                            "\202\160\252\161\216\162\072\164\170\165\167\166\166" +
                            "\167\165\170\164\171\163\172\162\173\160\174\156\175" +
                            "\275\176\274\177\271\200\270\201\267\202\266\203\265" +
                            "\204\264\205\263\207\073\210\230\211\220\001\002\000" +
                            "\012\024\351\025\347\110\350\131\346\001\ufe78\000\002" +
                            "\001\ufe7c\000\010\142\102\160\075\207\073\001\002\000" +
                            "\002\001\ufeb2\000\002\001\ufeba\000\144\031\201\032\225" +
                            "\033\231\034\233\037\255\044\152\047\302\053\316\072" +
                            "\312\073\200\077\246\100\206\102\307\103\277\105\210" +
                            "\112\232\114\074\124\174\142\070\150\076\152\242\154" +
                            "\243\155\067\156\257\157\202\160\252\161\216\162\072" +
                            "\164\170\165\167\166\166\167\165\170\164\171\163\172" +
                            "\162\173\160\174\156\175\275\176\274\177\271\200\270" +
                            "\201\267\202\266\203\265\204\264\205\263\207\073\210" +
                            "\230\211\220\001\002\000\002\001\ufe61\000\002\001\ufe5a" +
                            "\000\002\001\ufe5e\000\004\101\317\001\002\000\162\031" +
                            "\201\032\225\033\231\034\233\036\205\037\255\044\152" +
                            "\047\302\053\316\072\312\073\200\077\246\100\206\102" +
                            "\307\103\277\104\234\105\210\112\232\113\304\114\074" +
                            "\115\215\124\174\125\235\142\261\143\260\150\076\152" +
                            "\242\153\276\154\243\155\067\156\257\157\202\160\252" +
                            "\161\216\162\072\164\170\165\167\166\166\167\165\170" +
                            "\164\171\163\172\162\173\160\174\156\175\275\176\274" +
                            "\177\271\200\270\201\267\202\266\203\265\204\264\205" +
                            "\263\207\073\210\230\211\220\001\ufed1\000\002\001\ufecf" +
                            "\000\004\137\325\001\002\000\004\052\323\001\ufed0\000" +
                            "\162\031\201\032\225\033\231\034\233\036\205\037\255" +
                            "\044\152\047\302\053\316\072\312\073\200\077\246\100" +
                            "\206\102\307\103\277\104\234\105\210\112\232\113\304" +
                            "\114\074\115\215\124\174\125\235\142\261\143\260\150" +
                            "\076\152\242\153\276\154\243\155\067\156\257\157\202" +
                            "\160\252\161\216\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\002" +
                            "\001\ufece\000\002\001\ufe30\000\004\060\330\001\002\000" +
                            "\002\001\ufeca\000\162\031\201\032\225\033\231\034\233" +
                            "\036\205\037\255\044\152\047\302\053\316\072\312\073" +
                            "\200\077\246\100\206\102\307\103\277\104\234\105\210" +
                            "\112\232\113\304\114\074\115\215\124\174\125\235\142" +
                            "\261\143\260\150\076\152\242\153\276\154\243\155\067" +
                            "\156\257\157\202\160\252\161\216\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\010\045\335\052\332\100\334\001\002\000" +
                            "\010\142\102\160\075\207\073\001\002\000\002\001\ufedb" +
                            "\000\164\031\201\032\225\033\231\034\233\036\205\037" +
                            "\255\044\152\047\302\053\316\072\312\073\200\077\246" +
                            "\100\206\102\307\103\277\104\234\105\210\112\232\113" +
                            "\304\114\074\115\215\124\174\125\235\136\340\142\261" +
                            "\143\260\150\076\152\242\153\276\154\243\155\067\156" +
                            "\257\157\202\160\252\161\216\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\162\031\201\032\225\033\231\034\233\036\205" +
                            "\037\255\044\152\047\302\053\316\072\312\073\200\077" +
                            "\246\100\206\102\307\103\277\104\234\105\210\112\232" +
                            "\113\304\114\074\115\215\124\174\125\235\142\261\143" +
                            "\260\150\076\152\242\153\276\154\243\155\067\156\257" +
                            "\157\202\160\252\161\216\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\002\001\ufed2\000\002\001\ufed3\000\002\001\ufed6\000" +
                            "\002\001\ufed5\000\164\031\201\032\225\033\231\034\233" +
                            "\036\205\037\255\044\152\047\302\053\316\072\312\073" +
                            "\200\077\246\100\206\102\307\103\277\104\234\105\210" +
                            "\112\232\113\304\114\074\115\215\124\174\125\235\136" +
                            "\343\142\261\143\260\150\076\152\242\153\276\154\243" +
                            "\155\067\156\257\157\202\160\252\161\216\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\002\001\ufed7\000\002\001\ufed4\000" +
                            "\002\001\ufeda\000\144\031\201\032\225\033\231\034\233" +
                            "\037\255\044\152\047\361\053\316\072\353\073\200\077" +
                            "\354\100\206\102\307\103\277\105\210\112\232\114\074" +
                            "\124\174\142\070\150\076\152\242\154\356\155\067\156" +
                            "\257\157\364\160\252\161\355\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\144\031\201\032\225\033\231\034\233\037\255" +
                            "\044\152\047\361\053\316\072\353\073\200\077\354\100" +
                            "\206\102\307\103\277\105\210\112\232\114\074\124\174" +
                            "\142\070\150\076\152\242\154\356\155\067\156\257\157" +
                            "\364\160\252\161\355\162\072\164\170\165\167\166\166" +
                            "\167\165\170\164\171\163\172\162\173\160\174\156\175" +
                            "\275\176\274\177\271\200\270\201\267\202\266\203\265" +
                            "\204\264\205\263\207\073\210\230\211\220\001\002\000" +
                            "\144\031\201\032\225\033\231\034\233\037\255\044\152" +
                            "\047\361\053\316\072\353\073\200\077\354\100\206\102" +
                            "\307\103\277\105\210\112\232\114\074\124\174\142\070" +
                            "\150\076\152\242\154\356\155\067\156\257\157\364\160" +
                            "\252\161\355\162\072\164\170\165\167\166\166\167\165" +
                            "\170\164\171\163\172\162\173\160\174\156\175\275\176" +
                            "\274\177\271\200\270\201\267\202\266\203\265\204\264" +
                            "\205\263\207\073\210\230\211\220\001\002\000\144\031" +
                            "\201\032\225\033\231\034\233\037\255\044\152\047\361" +
                            "\053\316\072\353\073\200\077\354\100\206\102\307\103" +
                            "\277\105\210\112\232\114\074\124\174\142\070\150\076" +
                            "\152\242\154\356\155\067\156\257\157\364\160\252\161" +
                            "\355\162\072\164\170\165\167\166\166\167\165\170\164" +
                            "\171\163\172\162\173\160\174\156\175\275\176\274\177" +
                            "\271\200\270\201\267\202\266\203\265\204\264\205\263" +
                            "\207\073\210\230\211\220\001\002\000\004\040\u0114\001" +
                            "\ufe55\000\126\031\201\032\225\033\231\034\233\044\152" +
                            "\047\361\053\316\072\353\073\200\077\354\100\206\105" +
                            "\210\114\074\142\070\150\076\154\356\155\067\157\364" +
                            "\160\252\161\355\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\130" +
                            "\031\201\032\225\033\231\034\233\044\152\047\361\053" +
                            "\316\072\353\073\200\077\354\100\206\101\u0107\105\210" +
                            "\114\074\142\070\150\076\154\356\155\067\157\364\160" +
                            "\252\161\355\162\072\164\170\165\167\166\166\167\165" +
                            "\170\164\171\163\172\162\173\160\174\156\175\275\176" +
                            "\274\177\271\200\270\201\267\202\266\203\265\204\264" +
                            "\205\263\207\073\210\230\211\220\001\002\000\114\031" +
                            "\201\032\225\033\231\044\152\047\361\073\200\100\206" +
                            "\105\210\114\074\142\070\150\076\154\356\155\067\160" +
                            "\252\161\355\162\072\164\170\165\167\166\166\167\165" +
                            "\170\164\171\163\172\162\173\160\174\156\175\275\176" +
                            "\274\177\271\200\270\201\267\202\266\203\265\204\264" +
                            "\205\263\207\073\210\230\211\220\001\002\000\114\031" +
                            "\201\032\225\033\231\044\152\047\361\073\200\100\206" +
                            "\105\210\114\074\142\070\150\076\154\356\155\067\160" +
                            "\252\161\355\162\072\164\170\165\167\166\166\167\165" +
                            "\170\164\171\163\172\162\173\160\174\156\175\275\176" +
                            "\274\177\271\200\270\201\267\202\266\203\265\204\264" +
                            "\205\263\207\073\210\230\211\220\001\002\000\044\004" +
                            "\u0122\005\u0117\006\u0123\007\u011d\010\u011e\011\u0125\012\u0120" +
                            "\013\u011a\014\u0126\015\u011c\016\u0119\017\u011f\020\u0118\021" +
                            "\u0121\022\u011b\023\u0127\054\u0116\001\ufe3d\000\004\132\u0112" +
                            "\001\ufe5b\000\114\031\201\032\225\033\231\044\152\047" +
                            "\361\073\200\100\206\105\210\114\074\142\070\150\076" +
                            "\154\356\155\067\160\252\161\355\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\010\026\u010b\027\u010c\030\u010d\001\ufe6c\000" +
                            "\006\055\377\101\376\001\ufe35\000\130\031\201\032\225" +
                            "\033\231\034\233\044\152\047\361\053\316\072\353\073" +
                            "\200\077\354\100\206\101\373\105\210\114\074\142\070" +
                            "\150\076\154\356\155\067\157\364\160\252\161\355\162" +
                            "\072\164\170\165\167\166\166\167\165\170\164\171\163" +
                            "\172\162\173\160\174\156\175\275\176\274\177\271\200" +
                            "\270\201\267\202\266\203\265\204\264\205\263\207\073" +
                            "\210\230\211\220\001\002\000\004\135\367\001\ufe39\000" +
                            "\002\001\ufe71\000\124\031\201\032\225\033\231\034\233" +
                            "\044\152\047\361\053\316\073\200\077\370\100\206\105" +
                            "\210\114\074\142\070\150\076\154\356\155\067\157\372" +
                            "\160\252\161\355\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\004" +
                            "\101\u0107\001\002\000\006\055\377\101\376\001\ufe34\000" +
                            "\004\101\373\001\002\000\162\031\201\032\225\033\231" +
                            "\034\233\036\205\037\255\044\152\047\302\053\316\072" +
                            "\312\073\200\077\246\100\206\102\307\103\277\104\234" +
                            "\105\210\112\232\113\304\114\074\115\215\124\174\125" +
                            "\235\142\261\143\260\150\076\152\242\153\276\154\243" +
                            "\155\067\156\257\157\202\160\252\161\216\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\ufed1\000\004\137\375\001\002\000\002\001" +
                            "\ufe2d\000\162\031\201\032\225\033\231\034\233\036\205" +
                            "\037\255\044\152\047\302\053\316\072\312\073\200\077" +
                            "\246\100\206\102\307\103\277\104\234\105\210\112\232" +
                            "\113\304\114\074\115\215\124\174\125\235\142\261\143" +
                            "\260\150\076\152\242\153\276\154\243\155\067\156\257" +
                            "\157\202\160\252\161\216\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\ufed1" +
                            "\000\124\031\201\032\225\033\231\034\u0103\044\152\047" +
                            "\361\053\u0102\073\200\077\u0100\100\206\105\210\114\074" +
                            "\142\070\150\076\154\356\155\067\157\u0104\160\252\161" +
                            "\355\162\072\164\170\165\167\166\166\167\165\170\164" +
                            "\171\163\172\162\173\160\174\156\175\275\176\274\177" +
                            "\271\200\270\201\267\202\266\203\265\204\264\205\263" +
                            "\207\073\210\230\211\220\001\002\000\002\001\ufe26\000" +
                            "\002\001\ufe29\000\002\001\ufe28\000\002\001\ufe27\000\002" +
                            "\001\ufe25\000\004\137\u0106\001\002\000\002\001\ufe31\000" +
                            "\162\031\201\032\225\033\231\034\233\036\205\037\255" +
                            "\044\152\047\302\053\316\072\312\073\200\077\246\100" +
                            "\206\102\307\103\277\104\234\105\210\112\232\113\304" +
                            "\114\074\115\215\124\174\125\235\142\261\143\260\150" +
                            "\076\152\242\153\276\154\243\155\067\156\257\157\202" +
                            "\160\252\161\216\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\ufed1\000\004" +
                            "\137\u0109\001\002\000\002\001\ufe2e\000\002\001\ufe59\000" +
                            "\126\031\201\032\225\033\231\034\233\044\152\047\361" +
                            "\053\316\072\353\073\200\077\354\100\206\105\210\114" +
                            "\074\142\070\150\076\154\356\155\067\157\364\160\252" +
                            "\161\355\162\072\164\170\165\167\166\166\167\165\170" +
                            "\164\171\163\172\162\173\160\174\156\175\275\176\274" +
                            "\177\271\200\270\201\267\202\266\203\265\204\264\205" +
                            "\263\207\073\210\230\211\220\001\002\000\126\031\201" +
                            "\032\225\033\231\034\233\044\152\047\361\053\316\072" +
                            "\353\073\200\077\354\100\206\105\210\114\074\142\070" +
                            "\150\076\154\356\155\067\157\364\160\252\161\355\162" +
                            "\072\164\170\165\167\166\166\167\165\170\164\171\163" +
                            "\172\162\173\160\174\156\175\275\176\274\177\271\200" +
                            "\270\201\267\202\266\203\265\204\264\205\263\207\073" +
                            "\210\230\211\220\001\002\000\126\031\201\032\225\033" +
                            "\231\034\233\044\152\047\361\053\316\072\353\073\200" +
                            "\077\354\100\206\105\210\114\074\142\070\150\076\154" +
                            "\356\155\067\157\364\160\252\161\355\162\072\164\170" +
                            "\165\167\166\166\167\165\170\164\171\163\172\162\173" +
                            "\160\174\156\175\275\176\274\177\271\200\270\201\267" +
                            "\202\266\203\265\204\264\205\263\207\073\210\230\211" +
                            "\220\001\002\000\002\001\ufe63\000\002\001\ufe64\000\002" +
                            "\001\ufe65\000\002\001\ufe1b\000\124\031\201\032\225\033" +
                            "\231\034\233\044\152\047\361\053\316\073\200\077\370" +
                            "\100\206\105\210\114\074\142\070\150\076\154\356\155" +
                            "\067\157\372\160\252\161\355\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\004\040\u0114\001\ufe54\000\124\031\201\032\225" +
                            "\033\231\034\233\044\152\047\361\053\316\073\200\077" +
                            "\370\100\206\105\210\114\074\142\070\150\076\154\356" +
                            "\155\067\157\372\160\252\161\355\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\002\001\ufe50\000\124\031\201\032\225\033" +
                            "\231\034\233\044\152\047\361\053\316\073\200\077\370" +
                            "\100\206\105\210\114\074\142\070\150\076\154\356\155" +
                            "\067\157\372\160\252\161\355\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\002\001\ufe4e\000\002\001\ufe43\000\002\001\ufe45" +
                            "\000\002\001\ufe48\000\002\001\ufe41\000\002\001\ufe46\000" +
                            "\002\001\ufe4c\000\002\001\ufe4b\000\002\001\ufe44\000\002" +
                            "\001\ufe49\000\002\001\ufe42\000\002\001\ufe4f\000\002\001" +
                            "\ufe4d\000\124\031\201\032\225\033\231\034\233\044\152" +
                            "\047\361\053\316\073\200\077\370\100\206\105\210\114" +
                            "\074\142\070\150\076\154\356\155\067\157\372\160\252" +
                            "\161\355\162\072\164\170\165\167\166\166\167\165\170" +
                            "\164\171\163\172\162\173\160\174\156\175\275\176\274" +
                            "\177\271\200\270\201\267\202\266\203\265\204\264\205" +
                            "\263\207\073\210\230\211\220\001\002\000\002\001\ufe4a" +
                            "\000\002\001\ufe47\000\002\001\ufe40\000\002\001\ufe3c\000" +
                            "\004\135\367\001\ufe38\000\002\001\ufe1c\000\002\001\ufe1d" +
                            "\000\002\001\ufe58\000\010\026\u010b\027\u010c\030\u010d\001" +
                            "\ufe6d\000\002\001\ufe72\000\010\026\u010b\027\u010c\030\u010d" +
                            "\001\ufe6b\000\002\001\ufe70\000\010\026\u010b\027\u010c\030" +
                            "\u010d\001\ufe6e\000\002\001\ufe73\000\010\144\u0137\145\u0135" +
                            "\146\u0136\001\ufe83\000\002\001\ufe97\000\144\031\201\032" +
                            "\225\033\231\034\233\037\255\044\152\047\361\053\316" +
                            "\072\353\073\200\077\354\100\206\102\307\103\277\105" +
                            "\210\112\232\114\074\124\174\142\070\150\076\152\242" +
                            "\154\356\155\067\156\257\157\364\160\252\161\355\162" +
                            "\072\164\170\165\167\166\166\167\165\170\164\171\163" +
                            "\172\162\173\160\174\156\175\275\176\274\177\271\200" +
                            "\270\201\267\202\266\203\265\204\264\205\263\207\073" +
                            "\210\230\211\220\001\002\000\144\031\201\032\225\033" +
                            "\231\034\233\037\255\044\152\047\361\053\316\072\353" +
                            "\073\200\077\354\100\206\102\307\103\277\105\210\112" +
                            "\232\114\074\124\174\142\070\150\076\152\242\154\356" +
                            "\155\067\156\257\157\364\160\252\161\355\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\144\031\201\032\225\033\231\034" +
                            "\233\037\255\044\152\047\361\053\316\072\353\073\200" +
                            "\077\354\100\206\102\307\103\277\105\210\112\232\114" +
                            "\074\124\174\142\070\150\076\152\242\154\356\155\067" +
                            "\156\257\157\364\160\252\161\355\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\010\026\u010b\027\u010c\030\u010d\001\ufe6f\000" +
                            "\012\024\u013e\025\u013c\110\u013d\131\u013b\001\ufe77\000\002" +
                            "\001\ufe7b\000\126\031\201\032\225\033\231\034\233\044" +
                            "\152\047\361\053\316\072\353\073\200\077\354\100\206" +
                            "\105\210\114\074\142\070\150\076\154\356\155\067\157" +
                            "\364\160\252\161\355\162\072\164\170\165\167\166\166" +
                            "\167\165\170\164\171\163\172\162\173\160\174\156\175" +
                            "\275\176\274\177\271\200\270\201\267\202\266\203\265" +
                            "\204\264\205\263\207\073\210\230\211\220\001\002\000" +
                            "\126\031\201\032\225\033\231\034\233\044\152\047\361" +
                            "\053\316\072\353\073\200\077\354\100\206\105\210\114" +
                            "\074\142\070\150\076\154\356\155\067\157\364\160\252" +
                            "\161\355\162\072\164\170\165\167\166\166\167\165\170" +
                            "\164\171\163\172\162\173\160\174\156\175\275\176\274" +
                            "\177\271\200\270\201\267\202\266\203\265\204\264\205" +
                            "\263\207\073\210\230\211\220\001\002\000\126\031\201" +
                            "\032\225\033\231\034\233\044\152\047\361\053\316\072" +
                            "\353\073\200\077\354\100\206\105\210\114\074\142\070" +
                            "\150\076\154\356\155\067\157\364\160\252\161\355\162" +
                            "\072\164\170\165\167\166\166\167\165\170\164\171\163" +
                            "\172\162\173\160\174\156\175\275\176\274\177\271\200" +
                            "\270\201\267\202\266\203\265\204\264\205\263\207\073" +
                            "\210\230\211\220\001\002\000\126\031\201\032\225\033" +
                            "\231\034\233\044\152\047\361\053\316\072\353\073\200" +
                            "\077\354\100\206\105\210\114\074\142\070\150\076\154" +
                            "\356\155\067\157\364\160\252\161\355\162\072\164\170" +
                            "\165\167\166\166\167\165\170\164\171\163\172\162\173" +
                            "\160\174\156\175\275\176\274\177\271\200\270\201\267" +
                            "\202\266\203\265\204\264\205\263\207\073\210\230\211" +
                            "\220\001\002\000\012\024\u013e\025\u013c\110\u013d\131\u013b" +
                            "\001\ufe75\000\002\001\ufe79\000\012\024\u013e\025\u013c\110" +
                            "\u013d\131\u013b\001\ufe76\000\002\001\ufe7a\000\002\001\ufe1f" +
                            "\000\002\001\ufe22\000\010\045\335\052\u0147\100\334\001" +
                            "\002\000\002\001\ufee0\000\064\053\114\062\140\130\145" +
                            "\134\113\142\102\160\075\164\143\165\142\166\141\167" +
                            "\137\170\136\171\134\172\133\173\132\174\130\175\126" +
                            "\176\125\177\124\200\123\201\122\202\121\203\120\204" +
                            "\117\205\115\207\073\001\002\000\002\001\ufec6\000\002" +
                            "\001\ufee1\000\010\144\u0137\145\u0135\146\u0136\001\ufe82\000" +
                            "\002\001\ufe96\000\004\175\u014d\001\002\000\002\001\ufe09" +
                            "\000\004\176\u014f\001\002\000\002\001\ufe08\000\004\177" +
                            "\u0151\001\002\000\002\001\ufe07\000\004\200\u0153\001\002" +
                            "\000\002\001\ufe06\000\004\201\u0155\001\002\000\002\001" +
                            "\ufe05\000\004\202\u0157\001\002\000\002\001\ufe04\000\004" +
                            "\203\u0159\001\002\000\002\001\ufe03\000\004\204\u015b\001" +
                            "\002\000\002\001\ufe02\000\004\205\u015d\001\002\000\002" +
                            "\001\ufe01\000\010\144\u0137\145\u0135\146\u0136\001\ufe7e\000" +
                            "\002\001\ufe92\000\006\150\u0161\207\073\001\002\000\002" +
                            "\001\uff21\000\010\144\u0137\145\u0135\146\u0136\001\ufe7f\000" +
                            "\002\001\ufe93\000\010\045\335\052\u0147\100\334\001\002" +
                            "\000\002\001\ufec4\000\010\045\335\052\u0147\100\334\001" +
                            "\002\000\002\001\ufec9\000\142\031\201\032\225\033\231" +
                            "\034\233\037\255\044\152\047\361\053\316\073\200\077" +
                            "\370\100\206\102\307\103\277\105\210\112\232\114\074" +
                            "\124\174\142\070\150\076\152\242\154\356\155\067\156" +
                            "\257\157\372\160\252\161\355\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\002\001\ufe52\000\004\207\073\001\002\000\004" +
                            "\151\105\001\uff18\000\144\031\201\032\225\033\231\034" +
                            "\233\037\255\044\152\047\361\053\316\072\353\073\200" +
                            "\077\354\100\206\102\307\103\277\105\210\112\232\114" +
                            "\074\124\174\142\070\150\076\152\242\154\356\155\067" +
                            "\156\257\157\364\160\252\161\355\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\144\031\201\032\225\033\231\034\233\037" +
                            "\255\044\152\047\361\053\316\072\353\073\200\077\354" +
                            "\100\206\102\307\103\277\105\210\112\232\114\074\124" +
                            "\174\142\070\150\076\152\242\154\356\155\067\156\257" +
                            "\157\364\160\252\161\355\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\144\031\201\032\225\033\231\034\233\037\255\044" +
                            "\152\047\361\053\316\072\353\073\200\077\354\100\206" +
                            "\102\307\103\277\105\210\112\232\114\074\124\174\142" +
                            "\070\150\076\152\242\154\356\155\067\156\257\157\364" +
                            "\160\252\161\355\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\002" +
                            "\001\ufe68\000\002\001\ufe67\000\002\001\ufe69\000\002\001" +
                            "\ufef6\000\002\001\ufe5f\000\002\001\ufe5c\000\002\001\ufe20" +
                            "\000\002\001\ufe23\000\010\045\335\052\u0147\100\334\001" +
                            "\002\000\002\001\ufec7\000\162\031\201\032\225\033\231" +
                            "\034\233\036\u017d\037\255\044\152\047\361\053\316\072" +
                            "\353\073\200\077\354\100\206\102\307\103\277\104\u0181" +
                            "\105\210\112\232\113\u0186\114\074\115\u017e\124\174\125" +
                            "\u0182\142\u0184\143\u0183\150\076\152\242\153\u0185\154\356" +
                            "\155\067\156\257\157\364\160\252\161\355\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\002\001\ufebc\000\002\001\ufebe\000" +
                            "\006\041\u01ac\075\u01ab\001\ufeb1\000\126\031\201\032\225" +
                            "\033\231\034\233\044\152\047\361\053\316\072\353\073" +
                            "\200\077\354\100\206\105\210\114\074\142\070\150\076" +
                            "\154\356\155\067\157\364\160\252\161\355\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\144\031\201\032\225\033\231\034" +
                            "\233\036\u017d\044\152\047\361\053\316\072\353\073\200" +
                            "\077\354\100\206\104\u0181\105\210\113\u0186\114\074\115" +
                            "\u017e\125\u0182\142\u0184\143\u0183\150\076\153\u0185\154\356" +
                            "\155\067\157\364\160\252\161\355\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\010\144\u018b\145\u0189\146\u018a\001\ufe7d\000" +
                            "\032\060\u019b\070\u0199\071\u0192\076\u0194\106\u019c\107\u0195" +
                            "\116\u0193\117\u0197\120\u0196\121\u0191\122\u019a\123\u0198\001" +
                            "\ufea6\000\126\031\201\032\225\033\231\034\233\044\152" +
                            "\047\361\053\316\072\353\073\200\077\354\100\206\105" +
                            "\210\114\074\142\070\150\076\154\356\155\067\157\364" +
                            "\160\252\161\355\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\126" +
                            "\031\201\032\225\033\231\034\233\044\152\047\361\053" +
                            "\316\072\353\073\200\077\354\100\206\105\210\114\074" +
                            "\142\070\150\076\154\356\155\067\157\364\160\252\161" +
                            "\355\162\072\164\170\165\167\166\166\167\165\170\164" +
                            "\171\163\172\162\173\160\174\156\175\275\176\274\177" +
                            "\271\200\270\201\267\202\266\203\265\204\264\205\263" +
                            "\207\073\210\230\211\220\001\002\000\126\031\201\032" +
                            "\225\033\231\034\233\044\152\047\361\053\316\072\353" +
                            "\073\200\077\354\100\206\105\210\114\074\142\070\150" +
                            "\076\154\356\155\067\157\364\160\252\161\355\162\072" +
                            "\164\170\165\167\166\166\167\165\170\164\171\163\172" +
                            "\162\173\160\174\156\175\275\176\274\177\271\200\270" +
                            "\201\267\202\266\203\265\204\264\205\263\207\073\210" +
                            "\230\211\220\001\002\000\130\031\201\032\225\033\231" +
                            "\034\233\044\152\047\361\053\316\072\353\073\200\077" +
                            "\354\100\206\105\210\114\074\142\070\150\076\151\u0160" +
                            "\154\356\155\067\157\364\160\252\161\355\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\126\031\201\032\225\033\231\034" +
                            "\233\044\152\047\361\053\316\072\353\073\200\077\354" +
                            "\100\206\105\210\114\074\142\070\150\076\154\356\155" +
                            "\067\157\364\160\252\161\355\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\126\031\201\032\225\033\231\034\233\044\152" +
                            "\047\361\053\316\072\353\073\200\077\354\100\206\105" +
                            "\210\114\074\142\070\150\076\154\356\155\067\157\364" +
                            "\160\252\161\355\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\012" +
                            "\024\u013e\025\u013c\110\u013d\131\u013b\001\ufe78\000\010\144" +
                            "\u018b\145\u0189\146\u018a\001\ufe83\000\126\031\201\032\225" +
                            "\033\231\034\233\044\152\047\361\053\316\072\353\073" +
                            "\200\077\354\100\206\105\210\114\074\142\070\150\076" +
                            "\154\356\155\067\157\364\160\252\161\355\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\126\031\201\032\225\033\231\034" +
                            "\233\044\152\047\361\053\316\072\353\073\200\077\354" +
                            "\100\206\105\210\114\074\142\070\150\076\154\356\155" +
                            "\067\157\364\160\252\161\355\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\126\031\201\032\225\033\231\034\233\044\152" +
                            "\047\361\053\316\072\353\073\200\077\354\100\206\105" +
                            "\210\114\074\142\070\150\076\154\356\155\067\157\364" +
                            "\160\252\161\355\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\010" +
                            "\144\u018b\145\u0189\146\u018a\001\ufe82\000\010\144\u018b\145" +
                            "\u0189\146\u018a\001\ufe7e\000\010\144\u018b\145\u0189\146\u018a" +
                            "\001\ufe7f\000\010\144\u018b\145\u0189\146\u018a\001\ufe80\000" +
                            "\010\144\u018b\145\u0189\146\u018a\001\ufe81\000\126\031\201" +
                            "\032\225\033\231\034\233\044\152\047\361\053\316\072" +
                            "\353\073\200\077\354\100\206\105\210\114\074\142\070" +
                            "\150\076\154\356\155\067\157\364\160\252\161\355\162" +
                            "\072\164\170\165\167\166\166\167\165\170\164\171\163" +
                            "\172\162\173\160\174\156\175\275\176\274\177\271\200" +
                            "\270\201\267\202\266\203\265\204\264\205\263\207\073" +
                            "\210\230\211\220\001\002\000\126\031\201\032\225\033" +
                            "\231\034\233\044\152\047\361\053\316\072\353\073\200" +
                            "\077\354\100\206\105\210\114\074\142\070\150\076\154" +
                            "\356\155\067\157\364\160\252\161\355\162\072\164\170" +
                            "\165\167\166\166\167\165\170\164\171\163\172\162\173" +
                            "\160\174\156\175\275\176\274\177\271\200\270\201\267" +
                            "\202\266\203\265\204\264\205\263\207\073\210\230\211" +
                            "\220\001\002\000\126\031\201\032\225\033\231\034\233" +
                            "\044\152\047\361\053\316\072\353\073\200\077\354\100" +
                            "\206\105\210\114\074\142\070\150\076\154\356\155\067" +
                            "\157\364\160\252\161\355\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\126\031\201\032\225\033\231\034\233\044\152\047" +
                            "\361\053\316\072\353\073\200\077\354\100\206\105\210" +
                            "\114\074\142\070\150\076\154\356\155\067\157\364\160" +
                            "\252\161\355\162\072\164\170\165\167\166\166\167\165" +
                            "\170\164\171\163\172\162\173\160\174\156\175\275\176" +
                            "\274\177\271\200\270\201\267\202\266\203\265\204\264" +
                            "\205\263\207\073\210\230\211\220\001\002\000\126\031" +
                            "\201\032\225\033\231\034\233\044\152\047\361\053\316" +
                            "\072\353\073\200\077\354\100\206\105\210\114\074\142" +
                            "\070\150\076\154\356\155\067\157\364\160\252\161\355" +
                            "\162\072\164\170\165\167\166\166\167\165\170\164\171" +
                            "\163\172\162\173\160\174\156\175\275\176\274\177\271" +
                            "\200\270\201\267\202\266\203\265\204\264\205\263\207" +
                            "\073\210\230\211\220\001\002\000\126\031\201\032\225" +
                            "\033\231\034\233\044\152\047\361\053\316\072\353\073" +
                            "\200\077\354\100\206\105\210\114\074\142\070\150\076" +
                            "\154\356\155\067\157\364\160\252\161\355\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\126\031\201\032\225\033\231\034" +
                            "\233\044\152\047\361\053\316\072\353\073\200\077\354" +
                            "\100\206\105\210\114\074\142\070\150\076\154\356\155" +
                            "\067\157\364\160\252\161\355\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\126\031\201\032\225\033\231\034\233\044\152" +
                            "\047\361\053\316\072\353\073\200\077\354\100\206\105" +
                            "\210\114\074\142\070\150\076\154\356\155\067\157\364" +
                            "\160\252\161\355\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\126" +
                            "\031\201\032\225\033\231\034\233\044\152\047\361\053" +
                            "\316\072\353\073\200\077\354\100\206\105\210\114\074" +
                            "\142\070\150\076\154\356\155\067\157\364\160\252\161" +
                            "\355\162\072\164\170\165\167\166\166\167\165\170\164" +
                            "\171\163\172\162\173\160\174\156\175\275\176\274\177" +
                            "\271\200\270\201\267\202\266\203\265\204\264\205\263" +
                            "\207\073\210\230\211\220\001\002\000\126\031\201\032" +
                            "\225\033\231\034\233\044\152\047\361\053\316\072\353" +
                            "\073\200\077\354\100\206\105\210\114\074\142\070\150" +
                            "\076\154\356\155\067\157\364\160\252\161\355\162\072" +
                            "\164\170\165\167\166\166\167\165\170\164\171\163\172" +
                            "\162\173\160\174\156\175\275\176\274\177\271\200\270" +
                            "\201\267\202\266\203\265\204\264\205\263\207\073\210" +
                            "\230\211\220\001\002\000\126\031\201\032\225\033\231" +
                            "\034\233\044\152\047\361\053\316\072\353\073\200\077" +
                            "\354\100\206\105\210\114\074\142\070\150\076\154\356" +
                            "\155\067\157\364\160\252\161\355\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\126\031\201\032\225\033\231\034\233\044" +
                            "\152\047\361\053\316\072\353\073\200\077\354\100\206" +
                            "\105\210\114\074\142\070\150\076\154\356\155\067\157" +
                            "\364\160\252\161\355\162\072\164\170\165\167\166\166" +
                            "\167\165\170\164\171\163\172\162\173\160\174\156\175" +
                            "\275\176\274\177\271\200\270\201\267\202\266\203\265" +
                            "\204\264\205\263\207\073\210\230\211\220\001\002\000" +
                            "\010\144\u018b\145\u0189\146\u018a\001\ufe8e\000\010\144\u018b" +
                            "\145\u0189\146\u018a\001\ufe8f\000\010\144\u018b\145\u0189\146" +
                            "\u018a\001\ufe88\000\010\144\u018b\145\u0189\146\u018a\001\ufe8d" +
                            "\000\010\144\u018b\145\u0189\146\u018a\001\ufe86\000\010\144" +
                            "\u018b\145\u0189\146\u018a\001\ufe87\000\010\144\u018b\145\u0189" +
                            "\146\u018a\001\ufe85\000\010\144\u018b\145\u0189\146\u018a\001" +
                            "\ufe8c\000\010\144\u018b\145\u0189\146\u018a\001\ufe90\000\010" +
                            "\144\u018b\145\u0189\146\u018a\001\ufe89\000\010\144\u018b\145" +
                            "\u0189\146\u018a\001\ufe8b\000\010\144\u018b\145\u0189\146\u018a" +
                            "\001\ufe8a\000\002\001\ufea5\000\010\144\u018b\145\u0189\146" +
                            "\u018a\001\ufe84\000\144\031\201\032\225\033\231\034\233" +
                            "\036\u017d\044\152\047\361\053\316\072\353\073\200\077" +
                            "\354\100\206\104\u0181\105\210\113\u0186\114\074\115\u017e" +
                            "\125\u0182\142\u0184\143\u0183\150\076\153\u0185\154\356\155" +
                            "\067\157\364\160\252\161\355\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\144\031\201\032\225\033\231\034\233\036\u017d" +
                            "\044\152\047\361\053\316\072\353\073\200\077\354\100" +
                            "\206\104\u0181\105\210\113\u0186\114\074\115\u017e\125\u0182" +
                            "\142\u0184\143\u0183\150\076\153\u0185\154\356\155\067\157" +
                            "\364\160\252\161\355\162\072\164\170\165\167\166\166" +
                            "\167\165\170\164\171\163\172\162\173\160\174\156\175" +
                            "\275\176\274\177\271\200\270\201\267\202\266\203\265" +
                            "\204\264\205\263\207\073\210\230\211\220\001\002\000" +
                            "\002\001\ufeaa\000\002\001\ufeae\000\004\056\u01b0\001\ufeb3" +
                            "\000\144\031\201\032\225\033\231\034\233\036\u017d\044" +
                            "\152\047\361\053\316\072\353\073\200\077\354\100\206" +
                            "\104\u0181\105\210\113\u0186\114\074\115\u017e\125\u0182\142" +
                            "\u0184\143\u0183\150\076\153\u0185\154\356\155\067\157\364" +
                            "\160\252\161\355\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\002" +
                            "\001\ufeaf\000\002\001\ufeb0\000\010\144\u0137\145\u0135\146" +
                            "\u0136\001\ufe80\000\002\001\ufe94\000\010\144\u0137\145\u0135" +
                            "\146\u0136\001\ufe81\000\002\001\ufe95\000\162\031\201\032" +
                            "\225\033\231\034\233\036\205\037\255\044\152\047\302" +
                            "\053\316\072\312\073\200\077\246\100\206\102\307\103" +
                            "\277\104\234\105\210\112\232\113\304\114\074\115\215" +
                            "\124\174\125\235\142\261\143\260\150\076\152\242\153" +
                            "\276\154\243\155\067\156\257\157\202\160\252\161\216" +
                            "\162\072\164\170\165\167\166\166\167\165\170\164\171" +
                            "\163\172\162\173\160\174\156\175\275\176\274\177\271" +
                            "\200\270\201\267\202\266\203\265\204\264\205\263\207" +
                            "\073\210\230\211\220\001\ufed1\000\004\137\u01b9\001\002" +
                            "\000\002\001\ufe2f\000\010\045\335\052\u0147\100\334\001" +
                            "\002\000\002\001\ufec8\000\162\031\201\032\225\033\231" +
                            "\034\233\036\u017d\037\255\044\152\047\361\053\316\072" +
                            "\353\073\200\077\354\100\206\102\307\103\277\104\u0181" +
                            "\105\210\112\232\113\u0186\114\074\115\u017e\124\174\125" +
                            "\u0182\142\u0184\143\u0183\150\076\152\242\153\u0185\154\356" +
                            "\155\067\156\257\157\364\160\252\161\355\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\002\001\ufec2\000\004\074\u01bf\001" +
                            "\ufec0\000\144\031\201\032\225\033\231\034\233\036\u017d" +
                            "\044\152\047\361\053\316\072\353\073\200\077\354\100" +
                            "\206\104\u0181\105\210\113\u0186\114\074\115\u017e\125\u0182" +
                            "\142\u0184\143\u0183\150\076\153\u0185\154\356\155\067\157" +
                            "\364\160\252\161\355\162\072\164\170\165\167\166\166" +
                            "\167\165\170\164\171\163\172\162\173\160\174\156\175" +
                            "\275\176\274\177\271\200\270\201\267\202\266\203\265" +
                            "\204\264\205\263\207\073\210\230\211\220\001\002\000" +
                            "\126\031\201\032\225\033\231\034\233\044\152\047\302" +
                            "\053\316\072\312\073\200\077\246\100\206\105\210\114" +
                            "\074\142\070\150\076\154\243\155\067\157\202\160\252" +
                            "\161\216\162\072\164\170\165\167\166\166\167\165\170" +
                            "\164\171\163\172\162\173\160\174\156\175\275\176\274" +
                            "\177\271\200\270\201\267\202\266\203\265\204\264\205" +
                            "\263\207\073\210\230\211\220\001\002\000\126\031\201" +
                            "\032\225\033\231\034\233\044\152\047\302\053\316\072" +
                            "\312\073\200\077\246\100\206\105\210\114\074\142\070" +
                            "\150\076\154\243\155\067\157\202\160\252\161\216\162" +
                            "\072\164\170\165\167\166\166\167\165\170\164\171\163" +
                            "\172\162\173\160\174\156\175\275\176\274\177\271\200" +
                            "\270\201\267\202\266\203\265\204\264\205\263\207\073" +
                            "\210\230\211\220\001\002\000\126\031\201\032\225\033" +
                            "\231\034\233\044\152\047\302\053\316\072\312\073\200" +
                            "\077\246\100\206\105\210\114\074\142\070\150\076\154" +
                            "\243\155\067\157\202\160\252\161\216\162\072\164\170" +
                            "\165\167\166\166\167\165\170\164\171\163\172\162\173" +
                            "\160\174\156\175\275\176\274\177\271\200\270\201\267" +
                            "\202\266\203\265\204\264\205\263\207\073\210\230\211" +
                            "\220\001\002\000\126\031\201\032\225\033\231\034\233" +
                            "\044\152\047\302\053\316\072\312\073\200\077\246\100" +
                            "\206\105\210\114\074\142\070\150\076\154\243\155\067" +
                            "\157\202\160\252\161\216\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\126\031\201\032\225\033\231\034\233\044\152\047" +
                            "\302\053\316\072\312\073\200\077\246\100\206\105\210" +
                            "\114\074\142\070\150\076\154\243\155\067\157\202\160" +
                            "\252\161\216\162\072\164\170\165\167\166\166\167\165" +
                            "\170\164\171\163\172\162\173\160\174\156\175\275\176" +
                            "\274\177\271\200\270\201\267\202\266\203\265\204\264" +
                            "\205\263\207\073\210\230\211\220\001\002\000\126\031" +
                            "\201\032\225\033\231\034\233\044\152\047\302\053\316" +
                            "\072\312\073\200\077\246\100\206\105\210\114\074\142" +
                            "\070\150\076\154\243\155\067\157\202\160\252\161\216" +
                            "\162\072\164\170\165\167\166\166\167\165\170\164\171" +
                            "\163\172\162\173\160\174\156\175\275\176\274\177\271" +
                            "\200\270\201\267\202\266\203\265\204\264\205\263\207" +
                            "\073\210\230\211\220\001\002\000\126\031\201\032\225" +
                            "\033\231\034\233\044\152\047\302\053\316\072\312\073" +
                            "\200\077\246\100\206\105\210\114\074\142\070\150\076" +
                            "\154\243\155\067\157\202\160\252\161\216\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\126\031\201\032\225\033\231\034" +
                            "\233\044\152\047\302\053\316\072\312\073\200\077\246" +
                            "\100\206\105\210\114\074\142\070\150\076\154\243\155" +
                            "\067\157\202\160\252\161\216\162\072\164\170\165\167" +
                            "\166\166\167\165\170\164\171\163\172\162\173\160\174" +
                            "\156\175\275\176\274\177\271\200\270\201\267\202\266" +
                            "\203\265\204\264\205\263\207\073\210\230\211\220\001" +
                            "\002\000\126\031\201\032\225\033\231\034\233\044\152" +
                            "\047\302\053\316\072\312\073\200\077\246\100\206\105" +
                            "\210\114\074\142\070\150\076\154\243\155\067\157\202" +
                            "\160\252\161\216\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\126" +
                            "\031\201\032\225\033\231\034\233\044\152\047\302\053" +
                            "\316\072\312\073\200\077\246\100\206\105\210\114\074" +
                            "\142\070\150\076\154\243\155\067\157\202\160\252\161" +
                            "\216\162\072\164\170\165\167\166\166\167\165\170\164" +
                            "\171\163\172\162\173\160\174\156\175\275\176\274\177" +
                            "\271\200\270\201\267\202\266\203\265\204\264\205\263" +
                            "\207\073\210\230\211\220\001\002\000\126\031\201\032" +
                            "\225\033\231\034\233\044\152\047\302\053\316\072\312" +
                            "\073\200\077\246\100\206\105\210\114\074\142\070\150" +
                            "\076\154\243\155\067\157\202\160\252\161\216\162\072" +
                            "\164\170\165\167\166\166\167\165\170\164\171\163\172" +
                            "\162\173\160\174\156\175\275\176\274\177\271\200\270" +
                            "\201\267\202\266\203\265\204\264\205\263\207\073\210" +
                            "\230\211\220\001\002\000\126\031\201\032\225\033\231" +
                            "\034\233\044\152\047\302\053\316\072\312\073\200\077" +
                            "\246\100\206\105\210\114\074\142\070\150\076\154\243" +
                            "\155\067\157\202\160\252\161\216\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\010\144\u0137\145\u0135\146\u0136\001\ufe8e\000" +
                            "\002\001\ufea2\000\010\144\u0137\145\u0135\146\u0136\001\ufe8f" +
                            "\000\002\001\ufea3\000\010\144\u0137\145\u0135\146\u0136\001" +
                            "\ufe88\000\002\001\ufe9c\000\010\144\u0137\145\u0135\146\u0136" +
                            "\001\ufe8d\000\002\001\ufea1\000\010\144\u0137\145\u0135\146" +
                            "\u0136\001\ufe86\000\002\001\ufe9a\000\010\144\u0137\145\u0135" +
                            "\146\u0136\001\ufe87\000\002\001\ufe9b\000\010\144\u0137\145" +
                            "\u0135\146\u0136\001\ufe85\000\002\001\ufe99\000\010\144\u0137" +
                            "\145\u0135\146\u0136\001\ufe8c\000\002\001\ufea0\000\010\144" +
                            "\u0137\145\u0135\146\u0136\001\ufe8b\000\002\001\ufe9f\000\010" +
                            "\144\u0137\145\u0135\146\u0136\001\ufe90\000\002\001\ufea4\000" +
                            "\010\144\u0137\145\u0135\146\u0136\001\ufe89\000\002\001\ufe9d" +
                            "\000\010\144\u0137\145\u0135\146\u0136\001\ufe8a\000\002\001" +
                            "\ufe9e\000\002\001\ufe21\000\002\001\ufe24\000\002\001\ufea8" +
                            "\000\002\001\ufea7\000\142\031\201\032\225\033\231\034" +
                            "\u0103\037\255\044\152\047\361\053\u0102\073\200\077\u0100" +
                            "\100\206\102\307\103\277\105\210\112\232\114\074\124" +
                            "\174\142\070\150\076\152\242\154\356\155\067\156\257" +
                            "\157\u0104\160\252\161\355\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\002\001\ufe2b\000\142\031\201\032\225\033\231\034" +
                            "\233\037\255\044\152\047\361\053\316\073\200\077\370" +
                            "\100\206\102\307\103\277\105\210\112\232\114\074\124" +
                            "\174\142\070\150\076\152\242\154\356\155\067\156\257" +
                            "\157\372\160\252\161\355\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\002\001\ufe36\000\004\140\u01ed\001\002\000\002\001" +
                            "\ufe13\000\170\031\201\032\225\033\231\034\233\036\205" +
                            "\037\255\044\152\047\302\053\u01fb\062\u01f7\072\312\073" +
                            "\200\077\246\100\206\102\307\103\277\104\234\105\210" +
                            "\112\232\113\304\114\074\115\215\124\174\125\235\130" +
                            "\u01f8\134\u0207\142\261\143\260\150\076\152\242\153\276" +
                            "\154\243\155\067\156\257\157\202\160\252\161\216\162" +
                            "\072\164\u01f6\165\u01f5\166\u01f4\167\u01f3\170\u01f2\171\u01f1" +
                            "\172\u01f0\173\u01ef\174\u01ee\175\u0206\176\u0205\177\u0204\200" +
                            "\u0203\201\u0202\202\u0201\203\u0200\204\u01ff\205\u01fd\207\073" +
                            "\210\230\211\220\001\002\000\170\031\201\032\225\033" +
                            "\231\034\233\036\205\037\255\044\152\047\302\053\u01fb" +
                            "\062\u01f7\072\312\073\200\077\246\100\206\102\307\103" +
                            "\277\104\234\105\210\112\232\113\304\114\074\115\215" +
                            "\124\174\125\235\130\u01f8\134\u0207\142\261\143\260\150" +
                            "\076\152\242\153\276\154\243\155\067\156\257\157\202" +
                            "\160\252\161\216\162\072\164\u01f6\165\u01f5\166\u01f4\167" +
                            "\u01f3\170\u01f2\171\u01f1\172\u01f0\173\u01ef\174\u01ee\175\u0206" +
                            "\176\u0205\177\u0204\200\u0203\201\u0202\202\u0201\203\u0200\204" +
                            "\u01ff\205\u01fd\207\073\210\230\211\220\001\002\000\170" +
                            "\031\201\032\225\033\231\034\233\036\205\037\255\044" +
                            "\152\047\302\053\u01fb\062\u01f7\072\312\073\200\077\246" +
                            "\100\206\102\307\103\277\104\234\105\210\112\232\113" +
                            "\304\114\074\115\215\124\174\125\235\130\u01f8\134\u0207" +
                            "\142\261\143\260\150\076\152\242\153\276\154\243\155" +
                            "\067\156\257\157\202\160\252\161\216\162\072\164\u01f6" +
                            "\165\u01f5\166\u01f4\167\u01f3\170\u01f2\171\u01f1\172\u01f0\173" +
                            "\u01ef\174\u01ee\175\u0206\176\u0205\177\u0204\200\u0203\201\u0202" +
                            "\202\u0201\203\u0200\204\u01ff\205\u01fd\207\073\210\230\211" +
                            "\220\001\002\000\170\031\201\032\225\033\231\034\233" +
                            "\036\205\037\255\044\152\047\302\053\u01fb\062\u01f7\072" +
                            "\312\073\200\077\246\100\206\102\307\103\277\104\234" +
                            "\105\210\112\232\113\304\114\074\115\215\124\174\125" +
                            "\235\130\u01f8\134\u0207\142\261\143\260\150\076\152\242" +
                            "\153\276\154\243\155\067\156\257\157\202\160\252\161" +
                            "\216\162\072\164\u01f6\165\u01f5\166\u01f4\167\u01f3\170\u01f2" +
                            "\171\u01f1\172\u01f0\173\u01ef\174\u01ee\175\u0206\176\u0205\177" +
                            "\u0204\200\u0203\201\u0202\202\u0201\203\u0200\204\u01ff\205\u01fd" +
                            "\207\073\210\230\211\220\001\002\000\170\031\201\032" +
                            "\225\033\231\034\233\036\205\037\255\044\152\047\302" +
                            "\053\u01fb\062\u01f7\072\312\073\200\077\246\100\206\102" +
                            "\307\103\277\104\234\105\210\112\232\113\304\114\074" +
                            "\115\215\124\174\125\235\130\u01f8\134\u0207\142\261\143" +
                            "\260\150\076\152\242\153\276\154\243\155\067\156\257" +
                            "\157\202\160\252\161\216\162\072\164\u01f6\165\u01f5\166" +
                            "\u01f4\167\u01f3\170\u01f2\171\u01f1\172\u01f0\173\u01ef\174\u01ee" +
                            "\175\u0206\176\u0205\177\u0204\200\u0203\201\u0202\202\u0201\203" +
                            "\u0200\204\u01ff\205\u01fd\207\073\210\230\211\220\001\002" +
                            "\000\170\031\201\032\225\033\231\034\233\036\205\037" +
                            "\255\044\152\047\302\053\u01fb\062\u01f7\072\312\073\200" +
                            "\077\246\100\206\102\307\103\277\104\234\105\210\112" +
                            "\232\113\304\114\074\115\215\124\174\125\235\130\u01f8" +
                            "\134\u0207\142\261\143\260\150\076\152\242\153\276\154" +
                            "\243\155\067\156\257\157\202\160\252\161\216\162\072" +
                            "\164\u01f6\165\u01f5\166\u01f4\167\u01f3\170\u01f2\171\u01f1\172" +
                            "\u01f0\173\u01ef\174\u01ee\175\u0206\176\u0205\177\u0204\200\u0203" +
                            "\201\u0202\202\u0201\203\u0200\204\u01ff\205\u01fd\207\073\210" +
                            "\230\211\220\001\002\000\170\031\201\032\225\033\231" +
                            "\034\233\036\205\037\255\044\152\047\302\053\u01fb\062" +
                            "\u01f7\072\312\073\200\077\246\100\206\102\307\103\277" +
                            "\104\234\105\210\112\232\113\304\114\074\115\215\124" +
                            "\174\125\235\130\u01f8\134\u0207\142\261\143\260\150\076" +
                            "\152\242\153\276\154\243\155\067\156\257\157\202\160" +
                            "\252\161\216\162\072\164\u01f6\165\u01f5\166\u01f4\167\u01f3" +
                            "\170\u01f2\171\u01f1\172\u01f0\173\u01ef\174\u01ee\175\u0206\176" +
                            "\u0205\177\u0204\200\u0203\201\u0202\202\u0201\203\u0200\204\u01ff" +
                            "\205\u01fd\207\073\210\230\211\220\001\002\000\170\031" +
                            "\201\032\225\033\231\034\233\036\205\037\255\044\152" +
                            "\047\302\053\u01fb\062\u01f7\072\312\073\200\077\246\100" +
                            "\206\102\307\103\277\104\234\105\210\112\232\113\304" +
                            "\114\074\115\215\124\174\125\235\130\u01f8\134\u0207\142" +
                            "\261\143\260\150\076\152\242\153\276\154\243\155\067" +
                            "\156\257\157\202\160\252\161\216\162\072\164\u01f6\165" +
                            "\u01f5\166\u01f4\167\u01f3\170\u01f2\171\u01f1\172\u01f0\173\u01ef" +
                            "\174\u01ee\175\u0206\176\u0205\177\u0204\200\u0203\201\u0202\202" +
                            "\u0201\203\u0200\204\u01ff\205\u01fd\207\073\210\230\211\220" +
                            "\001\002\000\170\031\201\032\225\033\231\034\233\036" +
                            "\205\037\255\044\152\047\302\053\u01fb\062\u01f7\072\312" +
                            "\073\200\077\246\100\206\102\307\103\277\104\234\105" +
                            "\210\112\232\113\304\114\074\115\215\124\174\125\235" +
                            "\130\u01f8\134\u0207\142\261\143\260\150\076\152\242\153" +
                            "\276\154\243\155\067\156\257\157\202\160\252\161\216" +
                            "\162\072\164\u01f6\165\u01f5\166\u01f4\167\u01f3\170\u01f2\171" +
                            "\u01f1\172\u01f0\173\u01ef\174\u01ee\175\u0206\176\u0205\177\u0204" +
                            "\200\u0203\201\u0202\202\u0201\203\u0200\204\u01ff\205\u01fd\207" +
                            "\073\210\230\211\220\001\002\000\010\142\102\160\075" +
                            "\207\073\001\002\000\010\142\102\160\075\207\073\001" +
                            "\002\000\006\051\u0230\052\147\001\002\000\012\045\335" +
                            "\052\u022a\100\334\136\u022c\001\002\000\012\101\317\142" +
                            "\102\160\075\207\073\001\002\000\002\001\ufee2\000\170" +
                            "\031\201\032\225\033\231\034\233\036\205\037\255\044" +
                            "\152\047\302\053\u01fb\062\u01f7\072\312\073\200\077\246" +
                            "\100\206\102\307\103\277\104\234\105\210\112\232\113" +
                            "\304\114\074\115\215\124\174\125\235\130\u01f8\134\u0207" +
                            "\142\261\143\260\150\076\152\242\153\276\154\243\155" +
                            "\067\156\257\157\202\160\252\161\216\162\072\164\u01f6" +
                            "\165\u01f5\166\u01f4\167\u01f3\170\u01f2\171\u01f1\172\u01f0\173" +
                            "\u01ef\174\u01ee\175\u0206\176\u0205\177\u0204\200\u0203\201\u0202" +
                            "\202\u0201\203\u0200\204\u01ff\205\u01fd\207\073\210\230\211" +
                            "\220\001\002\000\006\051\uff14\052\uff14\001\uff25\000\170" +
                            "\031\201\032\225\033\231\034\233\036\205\037\255\044" +
                            "\152\047\302\053\u01fb\062\u01f7\072\312\073\200\077\246" +
                            "\100\206\102\307\103\277\104\234\105\210\112\232\113" +
                            "\304\114\074\115\215\124\174\125\235\130\u01f8\134\u0207" +
                            "\142\261\143\260\150\076\152\242\153\276\154\243\155" +
                            "\067\156\257\157\202\160\252\161\216\162\072\164\u01f6" +
                            "\165\u01f5\166\u01f4\167\u01f3\170\u01f2\171\u01f1\172\u01f0\173" +
                            "\u01ef\174\u01ee\175\u0206\176\u0205\177\u0204\200\u0203\201\u0202" +
                            "\202\u0201\203\u0200\204\u01ff\205\u01fd\207\073\210\230\211" +
                            "\220\001\002\000\170\031\201\032\225\033\231\034\233" +
                            "\036\205\037\255\044\152\047\302\053\u01fb\062\u01f7\072" +
                            "\312\073\200\077\246\100\206\102\307\103\277\104\234" +
                            "\105\210\112\232\113\304\114\074\115\215\124\174\125" +
                            "\235\130\u01f8\134\u0207\142\261\143\260\150\076\152\242" +
                            "\153\276\154\243\155\067\156\257\157\202\160\252\161" +
                            "\216\162\072\164\u01f6\165\u01f5\166\u01f4\167\u01f3\170\u01f2" +
                            "\171\u01f1\172\u01f0\173\u01ef\174\u01ee\175\u0206\176\u0205\177" +
                            "\u0204\200\u0203\201\u0202\202\u0201\203\u0200\204\u01ff\205\u01fd" +
                            "\207\073\210\230\211\220\001\002\000\170\031\201\032" +
                            "\225\033\231\034\233\036\205\037\255\044\152\047\302" +
                            "\053\u01fb\062\u01f7\072\312\073\200\077\246\100\206\102" +
                            "\307\103\277\104\234\105\210\112\232\113\304\114\074" +
                            "\115\215\124\174\125\235\130\u01f8\134\u0207\142\261\143" +
                            "\260\150\076\152\242\153\276\154\243\155\067\156\257" +
                            "\157\202\160\252\161\216\162\072\164\u01f6\165\u01f5\166" +
                            "\u01f4\167\u01f3\170\u01f2\171\u01f1\172\u01f0\173\u01ef\174\u01ee" +
                            "\175\u0206\176\u0205\177\u0204\200\u0203\201\u0202\202\u0201\203" +
                            "\u0200\204\u01ff\205\u01fd\207\073\210\230\211\220\001\002" +
                            "\000\170\031\201\032\225\033\231\034\233\036\205\037" +
                            "\255\044\152\047\302\053\u01fb\062\u01f7\072\312\073\200" +
                            "\077\246\100\206\102\307\103\277\104\234\105\210\112" +
                            "\232\113\304\114\074\115\215\124\174\125\235\130\u01f8" +
                            "\134\u0207\142\261\143\260\150\076\152\242\153\276\154" +
                            "\243\155\067\156\257\157\202\160\252\161\216\162\072" +
                            "\164\u01f6\165\u01f5\166\u01f4\167\u01f3\170\u01f2\171\u01f1\172" +
                            "\u01f0\173\u01ef\174\u01ee\175\u0206\176\u0205\177\u0204\200\u0203" +
                            "\201\u0202\202\u0201\203\u0200\204\u01ff\205\u01fd\207\073\210" +
                            "\230\211\220\001\002\000\170\031\201\032\225\033\231" +
                            "\034\233\036\205\037\255\044\152\047\302\053\u01fb\062" +
                            "\u01f7\072\312\073\200\077\246\100\206\102\307\103\277" +
                            "\104\234\105\210\112\232\113\304\114\074\115\215\124" +
                            "\174\125\235\130\u01f8\134\u0207\142\261\143\260\150\076" +
                            "\152\242\153\276\154\243\155\067\156\257\157\202\160" +
                            "\252\161\216\162\072\164\u01f6\165\u01f5\166\u01f4\167\u01f3" +
                            "\170\u01f2\171\u01f1\172\u01f0\173\u01ef\174\u01ee\175\u0206\176" +
                            "\u0205\177\u0204\200\u0203\201\u0202\202\u0201\203\u0200\204\u01ff" +
                            "\205\u01fd\207\073\210\230\211\220\001\002\000\170\031" +
                            "\201\032\225\033\231\034\233\036\205\037\255\044\152" +
                            "\047\302\053\u01fb\062\u01f7\072\312\073\200\077\246\100" +
                            "\206\102\307\103\277\104\234\105\210\112\232\113\304" +
                            "\114\074\115\215\124\174\125\235\130\u01f8\134\u0207\142" +
                            "\261\143\260\150\076\152\242\153\276\154\243\155\067" +
                            "\156\257\157\202\160\252\161\216\162\072\164\u01f6\165" +
                            "\u01f5\166\u01f4\167\u01f3\170\u01f2\171\u01f1\172\u01f0\173\u01ef" +
                            "\174\u01ee\175\u0206\176\u0205\177\u0204\200\u0203\201\u0202\202" +
                            "\u0201\203\u0200\204\u01ff\205\u01fd\207\073\210\230\211\220" +
                            "\001\002\000\170\031\201\032\225\033\231\034\233\036" +
                            "\205\037\255\044\152\047\302\053\u01fb\062\u01f7\072\312" +
                            "\073\200\077\246\100\206\102\307\103\277\104\234\105" +
                            "\210\112\232\113\304\114\074\115\215\124\174\125\235" +
                            "\130\u01f8\134\u0207\142\261\143\260\150\076\152\242\153" +
                            "\276\154\243\155\067\156\257\157\202\160\252\161\216" +
                            "\162\072\164\u01f6\165\u01f5\166\u01f4\167\u01f3\170\u01f2\171" +
                            "\u01f1\172\u01f0\173\u01ef\174\u01ee\175\u0206\176\u0205\177\u0204" +
                            "\200\u0203\201\u0202\202\u0201\203\u0200\204\u01ff\205\u01fd\207" +
                            "\073\210\230\211\220\001\002\000\170\031\201\032\225" +
                            "\033\231\034\233\036\205\037\255\044\152\047\302\053" +
                            "\u01fb\062\u01f7\072\312\073\200\077\246\100\206\102\307" +
                            "\103\277\104\234\105\210\112\232\113\304\114\074\115" +
                            "\215\124\174\125\235\130\u01f8\134\u0207\142\261\143\260" +
                            "\150\076\152\242\153\276\154\243\155\067\156\257\157" +
                            "\202\160\252\161\216\162\072\164\u01f6\165\u01f5\166\u01f4" +
                            "\167\u01f3\170\u01f2\171\u01f1\172\u01f0\173\u01ef\174\u01ee\175" +
                            "\u0206\176\u0205\177\u0204\200\u0203\201\u0202\202\u0201\203\u0200" +
                            "\204\u01ff\205\u01fd\207\073\210\230\211\220\001\002\000" +
                            "\012\053\u0208\142\102\160\075\207\073\001\002\000\010" +
                            "\142\102\160\075\207\073\001\002\000\006\051\u020a\052" +
                            "\147\001\002\000\162\031\201\032\225\033\231\034\233" +
                            "\036\205\037\255\044\152\047\302\053\u020c\072\312\073" +
                            "\200\077\246\100\206\102\307\103\277\104\234\105\210" +
                            "\112\232\113\304\114\074\115\215\124\174\125\235\142" +
                            "\261\143\260\150\076\152\242\153\276\154\243\155\067" +
                            "\156\257\157\202\160\252\161\216\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\002\001\ufef8\000\164\031\201\032\225\033" +
                            "\231\034\233\036\205\037\255\044\152\047\302\053\316" +
                            "\072\312\073\200\077\246\100\206\101\317\102\307\103" +
                            "\277\104\234\105\210\112\232\113\304\114\074\115\215" +
                            "\124\174\125\235\142\261\143\260\150\076\152\242\153" +
                            "\276\154\243\155\067\156\257\157\202\160\252\161\216" +
                            "\162\072\164\170\165\167\166\166\167\165\170\164\171" +
                            "\163\172\162\173\160\174\156\175\275\176\274\177\271" +
                            "\200\270\201\267\202\266\203\265\204\264\205\263\207" +
                            "\073\210\230\211\220\001\002\000\002\001\ufef2\000\006" +
                            "\051\u020f\052\147\001\002\000\162\031\201\032\225\033" +
                            "\231\034\233\036\205\037\255\044\152\047\302\053\u0211" +
                            "\072\312\073\200\077\246\100\206\102\307\103\277\104" +
                            "\234\105\210\112\232\113\304\114\074\115\215\124\174" +
                            "\125\235\142\261\143\260\150\076\152\242\153\276\154" +
                            "\243\155\067\156\257\157\202\160\252\161\216\162\072" +
                            "\164\170\165\167\166\166\167\165\170\164\171\163\172" +
                            "\162\173\160\174\156\175\275\176\274\177\271\200\270" +
                            "\201\267\202\266\203\265\204\264\205\263\207\073\210" +
                            "\230\211\220\001\002\000\002\001\ufef9\000\164\031\201" +
                            "\032\225\033\231\034\233\036\205\037\255\044\152\047" +
                            "\302\053\316\072\312\073\200\077\246\100\206\101\317" +
                            "\102\307\103\277\104\234\105\210\112\232\113\304\114" +
                            "\074\115\215\124\174\125\235\142\261\143\260\150\076" +
                            "\152\242\153\276\154\243\155\067\156\257\157\202\160" +
                            "\252\161\216\162\072\164\170\165\167\166\166\167\165" +
                            "\170\164\171\163\172\162\173\160\174\156\175\275\176" +
                            "\274\177\271\200\270\201\267\202\266\203\265\204\264" +
                            "\205\263\207\073\210\230\211\220\001\002\000\002\001" +
                            "\ufef3\000\004\175\u0214\001\002\000\002\001\uff05\000\004" +
                            "\176\u0216\001\002\000\002\001\uff04\000\004\177\u0218\001" +
                            "\002\000\002\001\uff03\000\004\200\u021a\001\002\000\002" +
                            "\001\uff02\000\004\201\u021c\001\002\000\002\001\uff01\000" +
                            "\004\202\u021e\001\002\000\002\001\uff00\000\004\203\u0220" +
                            "\001\002\000\002\001\ufeff\000\004\204\u0222\001\002\000" +
                            "\002\001\ufefe\000\004\205\u0224\001\002\000\002\001\ufefd" +
                            "\000\006\051\u0226\052\147\001\002\000\162\031\201\032" +
                            "\225\033\231\034\233\036\205\037\255\044\152\047\302" +
                            "\053\u0228\072\312\073\200\077\246\100\206\102\307\103" +
                            "\277\104\234\105\210\112\232\113\304\114\074\115\215" +
                            "\124\174\125\235\142\261\143\260\150\076\152\242\153" +
                            "\276\154\243\155\067\156\257\157\202\160\252\161\216" +
                            "\162\072\164\170\165\167\166\166\167\165\170\164\171" +
                            "\163\172\162\173\160\174\156\175\275\176\274\177\271" +
                            "\200\270\201\267\202\266\203\265\204\264\205\263\207" +
                            "\073\210\230\211\220\001\002\000\002\001\ufefa\000\164" +
                            "\031\201\032\225\033\231\034\233\036\205\037\255\044" +
                            "\152\047\302\053\316\072\312\073\200\077\246\100\206" +
                            "\101\317\102\307\103\277\104\234\105\210\112\232\113" +
                            "\304\114\074\115\215\124\174\125\235\142\261\143\260" +
                            "\150\076\152\242\153\276\154\243\155\067\156\257\157" +
                            "\202\160\252\161\216\162\072\164\170\165\167\166\166" +
                            "\167\165\170\164\171\163\172\162\173\160\174\156\175" +
                            "\275\176\274\177\271\200\270\201\267\202\266\203\265" +
                            "\204\264\205\263\207\073\210\230\211\220\001\002\000" +
                            "\002\001\ufef4\000\064\053\u022e\062\u01f7\130\u01f8\134\u0207" +
                            "\142\102\160\075\164\143\165\142\166\141\167\137\170" +
                            "\136\171\134\172\133\173\132\174\130\175\126\176\125" +
                            "\177\124\200\123\201\122\202\121\203\120\204\117\205" +
                            "\115\207\073\001\002\000\004\136\u022d\001\002\000\002" +
                            "\001\ufdfc\000\002\001\ufdfd\000\010\142\102\160\075\207" +
                            "\073\001\002\000\002\001\ufee3\000\162\031\201\032\225" +
                            "\033\231\034\233\036\205\037\255\044\152\047\302\053" +
                            "\u0232\072\312\073\200\077\246\100\206\102\307\103\277" +
                            "\104\234\105\210\112\232\113\304\114\074\115\215\124" +
                            "\174\125\235\142\261\143\260\150\076\152\242\153\276" +
                            "\154\243\155\067\156\257\157\202\160\252\161\216\162" +
                            "\072\164\170\165\167\166\166\167\165\170\164\171\163" +
                            "\172\162\173\160\174\156\175\275\176\274\177\271\200" +
                            "\270\201\267\202\266\203\265\204\264\205\263\207\073" +
                            "\210\230\211\220\001\002\000\002\001\ufef7\000\164\031" +
                            "\201\032\225\033\231\034\233\036\205\037\255\044\152" +
                            "\047\302\053\316\072\312\073\200\077\246\100\206\101" +
                            "\317\102\307\103\277\104\234\105\210\112\232\113\304" +
                            "\114\074\115\215\124\174\125\235\142\261\143\260\150" +
                            "\076\152\242\153\276\154\243\155\067\156\257\157\202" +
                            "\160\252\161\216\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\002" +
                            "\001\ufef1\000\006\051\151\052\147\001\002\000\006\051" +
                            "\u0236\052\147\001\002\000\162\031\201\032\225\033\231" +
                            "\034\233\036\205\037\255\044\152\047\302\053\u0238\072" +
                            "\312\073\200\077\246\100\206\102\307\103\277\104\234" +
                            "\105\210\112\232\113\304\114\074\115\215\124\174\125" +
                            "\235\142\261\143\260\150\076\152\242\153\276\154\243" +
                            "\155\067\156\257\157\202\160\252\161\216\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\002\001\ufefb\000\164\031\201\032" +
                            "\225\033\231\034\233\036\205\037\255\044\152\047\302" +
                            "\053\316\072\312\073\200\077\246\100\206\101\317\102" +
                            "\307\103\277\104\234\105\210\112\232\113\304\114\074" +
                            "\115\215\124\174\125\235\142\261\143\260\150\076\152" +
                            "\242\153\276\154\243\155\067\156\257\157\202\160\252" +
                            "\161\216\162\072\164\170\165\167\166\166\167\165\170" +
                            "\164\171\163\172\162\173\160\174\156\175\275\176\274" +
                            "\177\271\200\270\201\267\202\266\203\265\204\264\205" +
                            "\263\207\073\210\230\211\220\001\002\000\002\001\ufef5" +
                            "\000\004\164\u023d\001\002\000\004\164\u023c\001\002\000" +
                            "\002\001\uff0e\000\002\001\ufe12\000\004\165\u0241\001\002" +
                            "\000\004\165\u0240\001\002\000\002\001\uff0d\000\002\001" +
                            "\ufe11\000\004\166\u0245\001\002\000\004\166\u0244\001\002" +
                            "\000\002\001\uff0c\000\002\001\ufe10\000\004\167\u0249\001" +
                            "\002\000\004\167\u0248\001\002\000\002\001\uff0b\000\002" +
                            "\001\ufe0f\000\004\170\u024d\001\002\000\004\170\u024c\001" +
                            "\002\000\002\001\uff0a\000\002\001\ufe0e\000\004\171\u0251" +
                            "\001\002\000\004\171\u0250\001\002\000\002\001\uff09\000" +
                            "\002\001\ufe0d\000\004\172\u0255\001\002\000\004\172\u0254" +
                            "\001\002\000\002\001\uff08\000\002\001\ufe0c\000\004\173" +
                            "\u0259\001\002\000\004\173\u0258\001\002\000\002\001\uff07" +
                            "\000\002\001\ufe0b\000\004\174\u025d\001\002\000\004\174" +
                            "\u025c\001\002\000\002\001\uff06\000\002\001\ufe0a\000\010" +
                            "\144\u0137\145\u0135\146\u0136\001\ufe84\000\002\001\ufe98\000" +
                            "\002\001\ufe60\000\002\001\ufe5d\000\142\031\201\032\225" +
                            "\033\231\034\233\037\255\044\152\047\361\053\316\073" +
                            "\200\077\370\100\206\102\307\103\277\105\210\112\232" +
                            "\114\074\124\174\142\070\150\076\152\242\154\356\155" +
                            "\067\156\257\157\372\160\252\161\355\162\072\164\170" +
                            "\165\167\166\166\167\165\170\164\171\163\172\162\173" +
                            "\160\174\156\175\275\176\274\177\271\200\270\201\267" +
                            "\202\266\203\265\204\264\205\263\207\073\210\230\211" +
                            "\220\001\002\000\002\001\ufe56\000\010\045\335\052\u0147" +
                            "\100\334\001\002\000\002\001\ufec5\000\142\031\201\032" +
                            "\225\033\231\034\233\037\255\044\152\047\361\053\316" +
                            "\073\200\077\370\100\206\102\307\103\277\105\210\112" +
                            "\232\114\074\124\174\142\070\150\076\152\242\154\356" +
                            "\155\067\156\257\157\372\160\252\161\355\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\142\031\201\032\225\033\231\034" +
                            "\233\037\255\044\152\047\361\053\316\073\200\077\370" +
                            "\100\206\102\307\103\277\105\210\112\232\114\074\124" +
                            "\174\142\070\150\076\152\242\154\356\155\067\156\257" +
                            "\157\372\160\252\161\355\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\002\001\ufe3e\000\002\001\ufe3a\000\162\031\201\032" +
                            "\225\033\231\034\233\036\205\037\255\044\152\047\302" +
                            "\053\316\072\312\073\200\077\246\100\206\102\307\103" +
                            "\277\104\234\105\210\112\232\113\304\114\074\115\215" +
                            "\124\174\125\235\142\261\143\260\150\076\152\242\153" +
                            "\276\154\243\155\067\156\257\157\202\160\252\161\216" +
                            "\162\072\164\170\165\167\166\166\167\165\170\164\171" +
                            "\163\172\162\173\160\174\156\175\275\176\274\177\271" +
                            "\200\270\201\267\202\266\203\265\204\264\205\263\207" +
                            "\073\210\230\211\220\001\002\000\162\031\201\032\225" +
                            "\033\231\034\233\036\u017d\037\255\044\152\047\361\053" +
                            "\316\072\353\073\200\077\354\100\206\102\307\103\277" +
                            "\104\u0181\105\210\112\232\113\u0186\114\074\115\u017e\124" +
                            "\174\125\u0182\142\u0184\143\u0183\150\076\152\242\153\u0185" +
                            "\154\356\155\067\156\257\157\364\160\252\161\355\162" +
                            "\072\164\170\165\167\166\166\167\165\170\164\171\163" +
                            "\172\162\173\160\174\156\175\275\176\274\177\271\200" +
                            "\270\201\267\202\266\203\265\204\264\205\263\207\073" +
                            "\210\230\211\220\001\002\000\002\001\ufeac\000\002\001" +
                            "\ufeb6\000\002\001\ufeb4\000\004\056\u0270\001\ufeb3\000\162" +
                            "\031\201\032\225\033\231\034\233\036\205\037\255\044" +
                            "\152\047\302\053\316\072\312\073\200\077\246\100\206" +
                            "\102\307\103\277\104\234\105\210\112\232\113\304\114" +
                            "\074\115\215\124\174\125\235\142\261\143\260\150\076" +
                            "\152\242\153\276\154\243\155\067\156\257\157\202\160" +
                            "\252\161\216\162\072\164\170\165\167\166\166\167\165" +
                            "\170\164\171\163\172\162\173\160\174\156\175\275\176" +
                            "\274\177\271\200\270\201\267\202\266\203\265\204\264" +
                            "\205\263\207\073\210\230\211\220\001\002\000\002\001" +
                            "\ufeb5\000\002\001\ufeb8\000\002\001\ufeb7\000\002\001\ufdff" +
                            "\000\002\001\ufeef\000\164\031\201\032\225\033\231\034" +
                            "\233\036\205\037\255\044\152\047\302\053\316\072\312" +
                            "\073\200\077\246\100\206\101\317\102\307\103\277\104" +
                            "\234\105\210\112\232\113\304\114\074\115\215\124\174" +
                            "\125\235\142\261\143\260\150\076\152\242\153\276\154" +
                            "\243\155\067\156\257\157\202\160\252\161\216\162\072" +
                            "\164\170\165\167\166\166\167\165\170\164\171\163\172" +
                            "\162\173\160\174\156\175\275\176\274\177\271\200\270" +
                            "\201\267\202\266\203\265\204\264\205\263\207\073\210" +
                            "\230\211\220\001\002\000\002\001\ufee9\000\002\001\uff13" +
                            "\000\162\031\201\032\225\033\231\034\233\036\205\037" +
                            "\255\044\152\047\302\053\u027b\072\312\073\200\077\246" +
                            "\100\206\102\307\103\277\104\234\105\210\112\232\113" +
                            "\304\114\074\115\215\124\174\125\235\142\261\143\260" +
                            "\150\076\152\242\153\276\154\243\155\067\156\257\157" +
                            "\202\160\252\161\216\162\072\164\170\165\167\166\166" +
                            "\167\165\170\164\171\163\172\162\173\160\174\156\175" +
                            "\275\176\274\177\271\200\270\201\267\202\266\203\265" +
                            "\204\264\205\263\207\073\210\230\211\220\001\002\000" +
                            "\002\001\ufeea\000\164\031\201\032\225\033\231\034\233" +
                            "\036\205\037\255\044\152\047\302\053\316\072\312\073" +
                            "\200\077\246\100\206\101\317\102\307\103\277\104\234" +
                            "\105\210\112\232\113\304\114\074\115\215\124\174\125" +
                            "\235\142\261\143\260\150\076\152\242\153\276\154\243" +
                            "\155\067\156\257\157\202\160\252\161\216\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\002\001\ufee4\000\010\051\u0236\052" +
                            "\147\060\u027e\001\002\000\162\031\201\032\225\033\231" +
                            "\034\233\036\205\037\255\044\152\047\302\053\u0280\072" +
                            "\312\073\200\077\246\100\206\102\307\103\277\104\234" +
                            "\105\210\112\232\113\304\114\074\115\215\124\174\125" +
                            "\235\142\261\143\260\150\076\152\242\153\276\154\243" +
                            "\155\067\156\257\157\202\160\252\161\216\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\002\001\ufeee\000\164\031\201\032" +
                            "\225\033\231\034\233\036\205\037\255\044\152\047\302" +
                            "\053\316\072\312\073\200\077\246\100\206\101\317\102" +
                            "\307\103\277\104\234\105\210\112\232\113\304\114\074" +
                            "\115\215\124\174\125\235\142\261\143\260\150\076\152" +
                            "\242\153\276\154\243\155\067\156\257\157\202\160\252" +
                            "\161\216\162\072\164\170\165\167\166\166\167\165\170" +
                            "\164\171\163\172\162\173\160\174\156\175\275\176\274" +
                            "\177\271\200\270\201\267\202\266\203\265\204\264\205" +
                            "\263\207\073\210\230\211\220\001\002\000\002\001\ufee8" +
                            "\000\002\001\ufedc\000\066\052\135\053\114\062\140\130" +
                            "\145\134\113\142\102\160\075\164\143\165\142\166\141" +
                            "\167\137\170\136\171\134\172\133\173\132\174\130\175" +
                            "\126\176\125\177\124\200\123\201\122\202\121\203\120" +
                            "\204\117\205\115\207\073\001\ufedf\000\002\001\ufedd\000" +
                            "\010\051\u0226\052\147\060\u0286\001\002\000\162\031\201" +
                            "\032\225\033\231\034\233\036\205\037\255\044\152\047" +
                            "\302\053\u0288\072\312\073\200\077\246\100\206\102\307" +
                            "\103\277\104\234\105\210\112\232\113\304\114\074\115" +
                            "\215\124\174\125\235\142\261\143\260\150\076\152\242" +
                            "\153\276\154\243\155\067\156\257\157\202\160\252\161" +
                            "\216\162\072\164\170\165\167\166\166\167\165\170\164" +
                            "\171\163\172\162\173\160\174\156\175\275\176\274\177" +
                            "\271\200\270\201\267\202\266\203\265\204\264\205\263" +
                            "\207\073\210\230\211\220\001\002\000\002\001\ufeed\000" +
                            "\164\031\201\032\225\033\231\034\233\036\205\037\255" +
                            "\044\152\047\302\053\316\072\312\073\200\077\246\100" +
                            "\206\101\317\102\307\103\277\104\234\105\210\112\232" +
                            "\113\304\114\074\115\215\124\174\125\235\142\261\143" +
                            "\260\150\076\152\242\153\276\154\243\155\067\156\257" +
                            "\157\202\160\252\161\216\162\072\164\170\165\167\166" +
                            "\166\167\165\170\164\171\163\172\162\173\160\174\156" +
                            "\175\275\176\274\177\271\200\270\201\267\202\266\203" +
                            "\265\204\264\205\263\207\073\210\230\211\220\001\002" +
                            "\000\002\001\ufee7\000\010\142\102\160\075\207\073\001" +
                            "\002\000\010\051\u020a\052\147\060\u028c\001\002\000\162" +
                            "\031\201\032\225\033\231\034\233\036\205\037\255\044" +
                            "\152\047\302\053\u028e\072\312\073\200\077\246\100\206" +
                            "\102\307\103\277\104\234\105\210\112\232\113\304\114" +
                            "\074\115\215\124\174\125\235\142\261\143\260\150\076" +
                            "\152\242\153\276\154\243\155\067\156\257\157\202\160" +
                            "\252\161\216\162\072\164\170\165\167\166\166\167\165" +
                            "\170\164\171\163\172\162\173\160\174\156\175\275\176" +
                            "\274\177\271\200\270\201\267\202\266\203\265\204\264" +
                            "\205\263\207\073\210\230\211\220\001\002\000\002\001" +
                            "\ufeeb\000\164\031\201\032\225\033\231\034\233\036\205" +
                            "\037\255\044\152\047\302\053\316\072\312\073\200\077" +
                            "\246\100\206\101\317\102\307\103\277\104\234\105\210" +
                            "\112\232\113\304\114\074\115\215\124\174\125\235\142" +
                            "\261\143\260\150\076\152\242\153\276\154\243\155\067" +
                            "\156\257\157\202\160\252\161\216\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\002\001\ufee5\000\010\051\u020f\052\147\060" +
                            "\u0291\001\002\000\162\031\201\032\225\033\231\034\233" +
                            "\036\205\037\255\044\152\047\302\053\u0293\072\312\073" +
                            "\200\077\246\100\206\102\307\103\277\104\234\105\210" +
                            "\112\232\113\304\114\074\115\215\124\174\125\235\142" +
                            "\261\143\260\150\076\152\242\153\276\154\243\155\067" +
                            "\156\257\157\202\160\252\161\216\162\072\164\170\165" +
                            "\167\166\166\167\165\170\164\171\163\172\162\173\160" +
                            "\174\156\175\275\176\274\177\271\200\270\201\267\202" +
                            "\266\203\265\204\264\205\263\207\073\210\230\211\220" +
                            "\001\002\000\002\001\ufeec\000\164\031\201\032\225\033" +
                            "\231\034\233\036\205\037\255\044\152\047\302\053\316" +
                            "\072\312\073\200\077\246\100\206\101\317\102\307\103" +
                            "\277\104\234\105\210\112\232\113\304\114\074\115\215" +
                            "\124\174\125\235\142\261\143\260\150\076\152\242\153" +
                            "\276\154\243\155\067\156\257\157\202\160\252\161\216" +
                            "\162\072\164\170\165\167\166\166\167\165\170\164\171" +
                            "\163\172\162\173\160\174\156\175\275\176\274\177\271" +
                            "\200\270\201\267\202\266\203\265\204\264\205\263\207" +
                            "\073\210\230\211\220\001\002\000\002\001\ufee6\000\004" +
                            "\051\u0296\001\002\000\162\031\201\032\225\033\231\034" +
                            "\233\036\205\037\255\044\152\047\302\053\316\072\312" +
                            "\073\200\077\246\100\206\102\307\103\277\104\234\105" +
                            "\210\112\232\113\304\114\074\115\215\124\174\125\235" +
                            "\142\261\143\260\150\076\152\242\153\276\154\243\155" +
                            "\067\156\257\157\202\160\252\161\216\162\072\164\170" +
                            "\165\167\166\166\167\165\170\164\171\163\172\162\173" +
                            "\160\174\156\175\275\176\274\177\271\200\270\201\267" +
                            "\202\266\203\265\204\264\205\263\207\073\210\230\211" +
                            "\220\001\002\000\004\100\334\001\002\000\002\001\uff5f" +
                            "\000\004\140\u029a\001\002\000\004\051\u029b\001\002\000" +
                            "\162\031\201\032\225\033\231\034\233\036\205\037\255" +
                            "\044\152\047\302\053\316\072\312\073\200\077\246\100" +
                            "\206\102\307\103\277\104\234\105\210\112\232\113\304" +
                            "\114\074\115\215\124\174\125\235\142\261\143\260\150" +
                            "\076\152\242\153\276\154\243\155\067\156\257\157\202" +
                            "\160\252\161\216\162\072\164\170\165\167\166\166\167" +
                            "\165\170\164\171\163\172\162\173\160\174\156\175\275" +
                            "\176\274\177\271\200\270\201\267\202\266\203\265\204" +
                            "\264\205\263\207\073\210\230\211\220\001\002\000\004" +
                            "\100\334\001\002\000\002\001\uff60\000\004\100\334\001" +
                            "\002\000\002\001\uff5e\000\162\031\201\032\225\033\231" +
                            "\034\233\036\205\037\255\044\152\047\302\053\316\072" +
                            "\312\073\200\077\246\100\206\102\307\103\277\104\234" +
                            "\105\210\112\232\113\304\114\074\115\215\124\174\125" +
                            "\235\142\261\143\260\150\076\152\242\153\276\154\243" +
                            "\155\067\156\257\157\202\160\252\161\216\162\072\164" +
                            "\170\165\167\166\166\167\165\170\164\171\163\172\162" +
                            "\173\160\174\156\175\275\176\274\177\271\200\270\201" +
                            "\267\202\266\203\265\204\264\205\263\207\073\210\230" +
                            "\211\220\001\002\000\066\052\135\053\114\062\140\130" +
                            "\145\134\113\142\102\160\075\164\143\165\142\166\141" +
                            "\167\137\170\136\171\134\172\133\173\132\174\130\175" +
                            "\126\176\125\177\124\200\123\201\122\202\121\203\120" +
                            "\204\117\205\115\207\073\001\ufedf\000\066\052\135\053" +
                            "\114\062\140\130\145\134\113\142\102\160\075\164\143" +
                            "\165\142\166\141\167\137\170\136\171\134\172\133\173" +
                            "\132\174\130\175\126\176\125\177\124\200\123\201\122" +
                            "\202\121\203\120\204\117\205\115\207\073\001\ufedf\000" +
                            "\004\137\u02a4\001\002\000\004\051\u02a5\001\002\000\162" +
                            "\031\201\032\225\033\231\034\233\036\205\037\255\044" +
                            "\152\047\302\053\316\072\312\073\200\077\246\100\206" +
                            "\102\307\103\277\104\234\105\210\112\232\113\304\114" +
                            "\074\115\215\124\174\125\235\142\261\143\260\150\076" +
                            "\152\242\153\276\154\243\155\067\156\257\157\202\160" +
                            "\252\161\216\162\072\164\170\165\167\166\166\167\165" +
                            "\170\164\171\163\172\162\173\160\174\156\175\275\176" +
                            "\274\177\271\200\270\201\267\202\266\203\265\204\264" +
                            "\205\263\207\073\210\230\211\220\001\002\000\004\100" +
                            "\334\001\002\000\002\001\uff62\000\004\140\u02a9\001\002" +
                            "\000\004\051\u02aa\001\002\000\162\031\201\032\225\033" +
                            "\231\034\233\036\205\037\255\044\152\047\302\053\316" +
                            "\072\312\073\200\077\246\100\206\102\307\103\277\104" +
                            "\234\105\210\112\232\113\304\114\074\115\215\124\174" +
                            "\125\235\142\261\143\260\150\076\152\242\153\276\154" +
                            "\243\155\067\156\257\157\202\160\252\161\216\162\072" +
                            "\164\170\165\167\166\166\167\165\170\164\171\163\172" +
                            "\162\173\160\174\156\175\275\176\274\177\271\200\270" +
                            "\201\267\202\266\203\265\204\264\205\263\207\073\210" +
                            "\230\211\220\001\002\000\004\100\334\001\002\000\002" +
                            "\001\uff63\000\004\100\334\001\002\000\002\001\uff61\000" +
                            "\010\100\334\101\u02be\105\u02bd\001\uff25\000\004\055\u02b1" +
                            "\001\002\000\010\142\102\160\075\207\073\001\002\000" +
                            "\010\100\334\101\u02b5\105\u02b4\001\002\000\002\001\uff46" +
                            "\000\066\052\135\053\114\062\140\130\145\134\113\142" +
                            "\102\160\075\164\143\165\142\166\141\167\137\170\136" +
                            "\171\134\172\133\173\132\174\130\175\126\176\125\177" +
                            "\124\200\123\201\122\202\121\203\120\204\117\205\115" +
                            "\207\073\001\ufedf\000\066\052\135\053\114\062\140\130" +
                            "\145\134\113\142\102\160\075\164\143\165\142\166\141" +
                            "\167\137\170\136\171\134\172\133\173\132\174\130\175" +
                            "\126\176\125\177\124\200\123\201\122\202\121\203\120" +
                            "\204\117\205\115\207\073\001\ufedf\000\004\137\u02b7\001" +
                            "\002\000\004\100\334\001\002\000\002\001\uff47\000\004" +
                            "\140\u02ba\001\002\000\004\100\334\001\002\000\002\001" +
                            "\uff48\000\002\001\uff49\000\066\052\135\053\114\062\140" +
                            "\130\145\134\113\142\102\160\075\164\143\165\142\166" +
                            "\141\167\137\170\136\171\134\172\133\173\132\174\130" +
                            "\175\126\176\125\177\124\200\123\201\122\202\121\203" +
                            "\120\204\117\205\115\207\073\001\ufedf\000\066\052\135" +
                            "\053\114\062\140\130\145\134\113\142\102\160\075\164" +
                            "\143\165\142\166\141\167\137\170\136\171\134\172\133" +
                            "\173\132\174\130\175\126\176\125\177\124\200\123\201" +
                            "\122\202\121\203\120\204\117\205\115\207\073\001\ufedf" +
                            "\000\004\137\u02c0\001\002\000\004\100\334\001\002\000" +
                            "\002\001\uff4a\000\004\140\u02c3\001\002\000\004\100\334" +
                            "\001\002\000\002\001\uff4b\000\002\001\uffec\000\002\001" +
                            "\uff42\000\002\001\uffd6\000\002\001\uff74\000\002\001\uff5c" +
                            "\000\004\166\u02d3\001\002\000\004\166\u02d2\001\002\000" +
                            "\004\166\u02d1\001\002\000\004\166\u02d0\001\002\000\004" +
                            "\166\u02cf\001\002\000\002\001\uffeb\000\002\001\uff41\000" +
                            "\002\001\uffd5\000\002\001\uff73\000\002\001\uff5b\000\004" +
                            "\175\u02dd\001\002\000\004\175\u02dc\001\002\000\004\175" +
                            "\u02db\001\002\000\004\175\u02da\001\002\000\004\175\u02d9" +
                            "\001\002\000\002\001\uffe4\000\002\001\uff3a\000\002\001" +
                            "\uffce\000\002\001\uff6c\000\002\001\uff54\000\004\167\u02e7" +
                            "\001\002\000\004\167\u02e6\001\002\000\004\167\u02e5\001" +
                            "\002\000\004\167\u02e4\001\002\000\004\167\u02e3\001\002" +
                            "\000\002\001\uffea\000\002\001\uff40\000\002\001\uffd4\000" +
                            "\002\001\uff72\000\002\001\uff5a\000\004\176\u02f1\001\002" +
                            "\000\004\176\u02f0\001\002\000\004\176\u02ef\001\002\000" +
                            "\004\176\u02ee\001\002\000\004\176\u02ed\001\002\000\002" +
                            "\001\uffe3\000\002\001\uff39\000\002\001\uffcd\000\002\001" +
                            "\uff6b\000\002\001\uff53\000\004\170\u02fb\001\002\000\004" +
                            "\170\u02fa\001\002\000\004\170\u02f9\001\002\000\004\170" +
                            "\u02f8\001\002\000\004\170\u02f7\001\002\000\002\001\uffe9" +
                            "\000\002\001\uff3f\000\002\001\uffd3\000\002\001\uff71\000" +
                            "\002\001\uff59\000\004\177\u0305\001\002\000\004\177\u0304" +
                            "\001\002\000\004\177\u0303\001\002\000\004\177\u0302\001" +
                            "\002\000\004\177\u0301\001\002\000\002\001\uffe2\000\002" +
                            "\001\uff38\000\002\001\uffcc\000\002\001\uff6a\000\002\001" +
                            "\uff52\000\004\171\u030f\001\002\000\004\171\u030e\001\002" +
                            "\000\004\171\u030d\001\002\000\004\171\u030c\001\002\000" +
                            "\004\171\u030b\001\002\000\002\001\uffe8\000\002\001\uff3e" +
                            "\000\002\001\uffd2\000\002\001\uff70\000\002\001\uff58\000" +
                            "\004\200\u0319\001\002\000\004\200\u0318\001\002\000\004" +
                            "\200\u0317\001\002\000\004\200\u0316\001\002\000\004\200" +
                            "\u0315\001\002\000\002\001\uffe1\000\002\001\uff37\000\002" +
                            "\001\uffcb\000\002\001\uff69\000\002\001\uff51\000\004\172" +
                            "\u0323\001\002\000\004\172\u0322\001\002\000\004\172\u0321" +
                            "\001\002\000\004\172\u0320\001\002\000\004\172\u031f\001" +
                            "\002\000\002\001\uffe7\000\002\001\uff3d\000\002\001\uffd1" +
                            "\000\002\001\uff6f\000\002\001\uff57\000\004\201\u032d\001" +
                            "\002\000\004\201\u032c\001\002\000\004\201\u032b\001\002" +
                            "\000\004\201\u032a\001\002\000\004\201\u0329\001\002\000" +
                            "\002\001\uffe0\000\002\001\uff36\000\002\001\uffca\000\002" +
                            "\001\uff68\000\002\001\uff50\000\004\173\u0337\001\002\000" +
                            "\004\173\u0336\001\002\000\004\173\u0335\001\002\000\004" +
                            "\173\u0334\001\002\000\004\173\u0333\001\002\000\002\001" +
                            "\uffe6\000\002\001\uff3c\000\002\001\uffd0\000\002\001\uff6e" +
                            "\000\002\001\uff56\000\004\202\u0341\001\002\000\004\202" +
                            "\u0340\001\002\000\004\202\u033f\001\002\000\004\202\u033e" +
                            "\001\002\000\004\202\u033d\001\002\000\002\001\uffdf\000" +
                            "\002\001\uff35\000\002\001\uffc9\000\002\001\uff67\000\002" +
                            "\001\uff4f\000\004\174\u034b\001\002\000\004\174\u034a\001" +
                            "\002\000\004\174\u0349\001\002\000\004\174\u0348\001\002" +
                            "\000\004\174\u0347\001\002\000\002\001\uffe5\000\002\001" +
                            "\uff3b\000\002\001\uffcf\000\002\001\uff6d\000\002\001\uff55" +
                            "\000\004\203\u0355\001\002\000\004\203\u0354\001\002\000" +
                            "\004\203\u0353\001\002\000\004\203\u0352\001\002\000\004" +
                            "\203\u0351\001\002\000\002\001\uffde\000\002\001\uff34\000" +
                            "\002\001\uffc8\000\002\001\uff66\000\002\001\uff4e\000\004" +
                            "\204\u035f\001\002\000\004\204\u035e\001\002\000\004\204" +
                            "\u035d\001\002\000\004\204\u035c\001\002\000\004\204\u035b" +
                            "\001\002\000\002\001\uffdd\000\002\001\uff33\000\002\001" +
                            "\uffc7\000\002\001\uff65\000\002\001\uff4d\000\004\205\u0369" +
                            "\001\002\000\004\205\u0368\001\002\000\004\205\u0367\001" +
                            "\002\000\004\205\u0366\001\002\000\004\205\u0365\001\002" +
                            "\000\002\001\uffdc\000\002\001\uff32\000\002\001\uffc6\000" +
                            "\002\001\uff64\000\002\001\uff4c\000\004\101\u036b\001\uffff" +
                            "\000\012\061\u036d\142\102\160\075\207\073\001\002\000" +
                            "\002\001\uff12\000\010\142\102\160\075\207\073\001\002" +
                            "\000\006\052\u036f\137\u0370\001\002\000\012\061\u0372\142" +
                            "\102\160\075\207\073\001\002\000\002\001\ufffe\000\002" +
                            "\001\uff10\000\010\142\102\160\075\207\073\001\002\000" +
                            "\002\001\uff0f\000\002\001\uff11\000\010\142\102\160\075" +
                            "\207\073\001\002\000\010\142\102\160\075\207\073\001" +
                            "\002\000\010\142\102\160\075\207\073\001\002\000\006" +
                            "\042\u0379\101\u037a\001\ufffd\000\010\142\102\160\075\207" +
                            "\073\001\002\000\020\114\074\142\070\150\076\155\067" +
                            "\160\075\162\072\207\073\001\uff1f\000\004\137\u0380\001" +
                            "\002\000\004\052\u037e\001\uff1e\000\002\001\uff1d\000\020" +
                            "\114\074\142\070\150\076\155\067\160\075\162\072\207" +
                            "\073\001\002\000\002\001\uff1c\000\004\042\u0381\001\ufffb" +
                            "\000\010\142\102\160\075\207\073\001\002\000\002\001" +
                            "\ufffa\000\002\001\ufffc\000\012\060\u0385\100\334\101\u0389" +
                            "\105\u0388\001\002\000\162\031\201\032\225\033\231\034" +
                            "\233\036\205\037\255\044\152\047\302\053\316\072\312" +
                            "\073\200\077\246\100\206\102\307\103\277\104\234\105" +
                            "\210\112\232\113\304\114\074\115\215\124\174\125\235" +
                            "\142\261\143\260\150\076\152\242\153\276\154\243\155" +
                            "\067\156\257\157\202\160\252\161\216\162\072\164\170" +
                            "\165\167\166\166\167\165\170\164\171\163\172\162\173" +
                            "\160\174\156\175\275\176\274\177\271\200\270\201\267" +
                            "\202\266\203\265\204\264\205\263\207\073\210\230\211" +
                            "\220\001\002\000\002\001\uff78\000\002\001\uff77\000\012" +
                            "\140\u038f\142\102\160\075\207\073\001\002\000\012\137" +
                            "\u038b\142\102\160\075\207\073\001\002\000\006\052\147" +
                            "\137\u038d\001\002\000\006\060\u0385\100\334\001\002\000" +
                            "\002\001\uff79\000\006\060\u0385\100\334\001\002\000\002" +
                            "\001\uff7a\000\006\060\u0385\100\334\001\002\000\006\052" +
                            "\147\140\u0391\001\002\000\006\060\u0385\100\334\001\002" +
                            "\000\002\001\uff7c\000\002\001\uff7b\000\002\001\uff76\000" +
                            "\004\100\u0396\001\002\000\012\136\u0398\142\102\160\075" +
                            "\207\073\001\002\000\006\052\147\136\u0399\001\002\000" +
                            "\002\001\ufff8\000\002\001\ufff9\000\004\100\334\001\002" +
                            "\000\004\100\334\001\002\000\002\001\uffda\000\002\001" +
                            "\uffd8\000\002\001\uffd9\000\014\100\334\142\102\160\075" +
                            "\163\u03a1\207\073\001\uffb6\000\004\163\u03a1\001\uffb6\000" +
                            "\050\061\u03db\164\u03da\165\u03d9\166\u03d8\167\u03d7\170\u03d6" +
                            "\171\u03d5\172\u03d4\173\u03d3\174\u03d2\175\u03d1\176\u03d0\177" +
                            "\u03cf\200\u03ce\201\u03cd\202\u03cc\203\u03cb\204\u03ca\205\u03c9" +
                            "\001\002\000\004\066\u03a4\001\uffb2\000\004\063\u03c6\001" +
                            "\uffbb\000\006\061\u03a5\210\u03a8\001\002\000\004\210\u03bd" +
                            "\001\002\000\022\077\u03b6\114\u03bb\142\u03b9\150\u03bc\155" +
                            "\u03b8\160\075\162\u03ba\207\073\001\002\000\004\052\u03b3" +
                            "\001\uffb3\000\030\046\u03ab\051\u03aa\055\u03ac\077\uff80\114" +
                            "\uff80\142\uff80\150\uff80\155\uff80\160\uff80\162\uff80\207\uff80" +
                            "\001\uffb5\000\002\001\uff8d\000\004\210\u03b5\001\002\000" +
                            "\006\061\u03a5\210\u03b2\001\002\000\004\055\u03ad\001\002" +
                            "\000\004\210\u03ae\001\002\000\004\051\u03af\001\uff7f\000" +
                            "\004\210\u03b0\001\002\000\002\001\uff7e\000\004\052\u03b3" +
                            "\001\uffb4\000\006\051\u03aa\055\u03ac\001\uff80\000\006\061" +
                            "\u03a5\210\u03b2\001\002\000\002\001\uff8c\000\002\001\uff7d" +
                            "\000\002\001\uff89\000\002\001\uff8b\000\002\001\uff86\000" +
                            "\004\151\103\001\uff88\000\002\001\uff87\000\002\001\uff85" +
                            "\000\002\001\uff8a\000\006\051\u03be\055\u03bf\001\uff84\000" +
                            "\004\210\u03c4\001\002\000\004\055\u03c0\001\002\000\004" +
                            "\210\u03c1\001\002\000\004\051\u03c2\001\uff83\000\004\210" +
                            "\u03c3\001\002\000\002\001\uff82\000\002\001\uff81\000\002" +
                            "\001\uffc2\000\004\210\u03c7\001\002\000\002\001\uffba\000" +
                            "\004\052\u03de\001\uffb7\000\002\001\uffa0\000\002\001\uffa1" +
                            "\000\002\001\uffa2\000\002\001\uffa3\000\002\001\uffa4\000" +
                            "\002\001\uffa5\000\002\001\uffa6\000\002\001\uffa7\000\002" +
                            "\001\uffa8\000\002\001\uffa9\000\002\001\uffaa\000\002\001" +
                            "\uffab\000\002\001\uffac\000\002\001\uffad\000\002\001\uffae" +
                            "\000\002\001\uffaf\000\002\001\uffb0\000\002\001\uffb1\000" +
                            "\050\164\u03da\165\u03d9\166\u03d8\167\u03d7\170\u03d6\171\u03d5" +
                            "\172\u03d4\173\u03d3\174\u03d2\175\u03d1\176\u03d0\177\u03cf\200" +
                            "\u03ce\201\u03cd\202\u03cc\203\u03cb\204\u03ca\205\u03c9\206\u03dd" +
                            "\001\002\000\004\052\u03de\001\uffb9\000\002\001\uffb8\000" +
                            "\046\164\u03f0\165\u03ef\166\u03ee\167\u03ed\170\u03ec\171\u03eb" +
                            "\172\u03ea\173\u03e9\174\u03e8\175\u03e7\176\u03e6\177\u03e5\200" +
                            "\u03e4\201\u03e3\202\u03e2\203\u03e1\204\u03e0\205\u03df\001\002" +
                            "\000\002\001\uff8e\000\002\001\uff8f\000\002\001\uff90\000" +
                            "\002\001\uff91\000\002\001\uff92\000\002\001\uff93\000\002" +
                            "\001\uff94\000\002\001\uff95\000\002\001\uff96\000\002\001" +
                            "\uff97\000\002\001\uff98\000\002\001\uff99\000\002\001\uff9a" +
                            "\000\002\001\uff9b\000\002\001\uff9c\000\002\001\uff9d\000" +
                            "\002\001\uff9e\000\002\001\uff9f\000\004\163\u03a1\001\uffb6" +
                            "\000\004\163\u03a1\001\uffb6\000\004\066\u03a4\001\uffb2\000" +
                            "\004\063\u03c6\001\uffbb\000\002\001\uffbe\000\004\066\u03a4" +
                            "\001\uffb2\000\004\063\u03c6\001\uffbb\000\002\001\uffc3\000" +
                            "\004\066\u03a4\001\uffb2\000\004\063\u03c6\001\uffbb\000\002" +
                            "\001\uffbf\000\004\100\334\001\002\000\004\100\334\001" +
                            "\002\000\002\001\ufff0\000\002\001\uffee\000\002\001\uffef" +
                            "\000\006\050\024\141\042\001\002\000\012\100\334\142" +
                            "\102\160\075\207\073\001\002\000\014\100\334\142\102" +
                            "\160\075\163\u03a1\207\073\001\uffb6\000\004\163\u03a1\001" +
                            "\uffb6\000\004\066\u03a4\001\uffb2\000\004\063\u03c6\001\uffbb" +
                            "\000\002\001\uffc0\000\004\163\u03a1\001\uffb6\000\004\163" +
                            "\u03a1\001\uffb6\000\004\066\u03a4\001\uffb2\000\004\063\u03c6" +
                            "\001\uffbb\000\002\001\uffbc\000\004\066\u03a4\001\uffb2\000" +
                            "\004\063\u03c6\001\uffbb\000\002\001\uffc1\000\004\066\u03a4" +
                            "\001\uffb2\000\004\063\u03c6\001\uffbb\000\002\001\uffbd\000" +
                            "\002\001\uff2a\000\002\001\uff2c\000\012\052\147\060\u0418" +
                            "\064\u0417\076\u0416\001\uff26\000\020\114\074\142\070\150" +
                            "\076\155\067\160\075\162\072\207\073\001\002\000\020" +
                            "\114\074\142\070\150\076\155\067\160\075\162\072\207" +
                            "\073\001\002\000\020\114\074\142\070\150\076\155\067" +
                            "\160\075\162\072\207\073\001\002\000\004\100\u041a\001" +
                            "\002\000\066\052\135\053\114\062\140\130\145\134\113" +
                            "\142\102\160\075\164\143\165\142\166\141\167\137\170" +
                            "\136\171\134\172\133\173\132\174\130\175\126\176\125" +
                            "\177\124\200\123\201\122\202\121\203\120\204\117\205" +
                            "\115\207\073\001\ufedf\000\004\136\u041c\001\002\000\004" +
                            "\100\334\001\ufed9\000\002\001\uff31\000\002\001\ufed8\000" +
                            "\004\131\u0421\001\uff27\000\002\001\uff1b\000\020\114\074" +
                            "\142\070\150\076\155\067\160\075\162\072\207\073\001" +
                            "\002\000\002\001\uff1a\000\002\001\uff29\000\004\131\u0421" +
                            "\001\uff28\000\004\164\u042e\001\002\000\004\164\u042d\001" +
                            "\002\000\004\164\u042c\001\002\000\004\164\u042b\001\002" +
                            "\000\004\164\u042a\001\002\000\002\001\uffed\000\002\001" +
                            "\uff43\000\002\001\uffd7\000\002\001\uff75\000\002\001\uff5d" +
                            "\000\002\001\000" });

    /** Access to parse-action table. */
    @Override
    public short[][] action_table() {return _action_table;}

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[] {
                    "\000\u042d\000\006\110\003\111\004\001\001\000\002\001" +
                            "\001\000\030\004\012\013\014\014\016\040\021\052\034" +
                            "\070\024\076\052\100\006\102\011\103\010\127\022\001" +
                            "\001\000\022\004\u0428\040\u0425\070\u0424\076\u0426\100\u0427" +
                            "\102\011\103\010\127\062\001\001\000\002\001\001\000" +
                            "\002\001\001\000\010\054\115\055\070\056\u0414\001\001" +
                            "\000\006\102\011\103\u0412\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\010\032\u03fd\054\u03fb" +
                            "\055\070\001\001\000\010\032\u039f\054\u039e\055\070\001" +
                            "\001\000\010\032\u039b\054\u0399\055\070\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\006\054\u0369" +
                            "\055\070\001\001\000\002\001\001\000\002\001\001\000" +
                            "\022\004\u0363\040\u0360\070\u035f\076\u0361\100\u0362\102\011" +
                            "\103\010\127\062\001\001\000\022\004\u0359\040\u0356\070" +
                            "\u0355\076\u0357\100\u0358\102\011\103\010\127\062\001\001" +
                            "\000\022\004\u034f\040\u034c\070\u034b\076\u034d\100\u034e\102" +
                            "\011\103\010\127\062\001\001\000\002\001\001\000\022" +
                            "\004\u0345\040\u0342\070\u0341\076\u0343\100\u0344\102\011\103" +
                            "\010\127\062\001\001\000\022\004\u033b\040\u0338\070\u0337" +
                            "\076\u0339\100\u033a\102\011\103\010\127\062\001\001\000" +
                            "\022\004\u0331\040\u032e\070\u032d\076\u032f\100\u0330\102\011" +
                            "\103\010\127\062\001\001\000\022\004\u0327\040\u0324\070" +
                            "\u0323\076\u0325\100\u0326\102\011\103\010\127\062\001\001" +
                            "\000\002\001\001\000\022\004\u031d\040\u031a\070\u0319\076" +
                            "\u031b\100\u031c\102\011\103\010\127\062\001\001\000\022" +
                            "\004\u0313\040\u0310\070\u030f\076\u0311\100\u0312\102\011\103" +
                            "\010\127\062\001\001\000\022\004\u0309\040\u0306\070\u0305" +
                            "\076\u0307\100\u0308\102\011\103\010\127\062\001\001\000" +
                            "\022\004\u02ff\040\u02fc\070\u02fb\076\u02fd\100\u02fe\102\011" +
                            "\103\010\127\062\001\001\000\022\004\u02f5\040\u02f2\070" +
                            "\u02f1\076\u02f3\100\u02f4\102\011\103\010\127\062\001\001" +
                            "\000\022\004\u02eb\040\u02e8\070\u02e7\076\u02e9\100\u02ea\102" +
                            "\011\103\010\127\062\001\001\000\022\004\u02e1\040\u02de" +
                            "\070\u02dd\076\u02df\100\u02e0\102\011\103\010\127\062\001" +
                            "\001\000\022\004\u02d7\040\u02d4\070\u02d3\076\u02d5\100\u02d6" +
                            "\102\011\103\010\127\062\001\001\000\002\001\001\000" +
                            "\022\004\u02cd\040\u02ca\070\u02c9\076\u02cb\100\u02cc\102\011" +
                            "\103\010\127\062\001\001\000\022\004\061\040\056\070" +
                            "\055\076\057\100\060\102\011\103\010\127\062\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
                            "\054\u02ae\055\070\104\u02af\001\001\000\010\054\065\055" +
                            "\070\104\076\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\006\054\100\055\070\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\055\103" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\140\002\160\003\156\005\246\006\154\007\213" +
                            "\010\212\011\223\012\222\022\171\023\170\024\272\025" +
                            "\271\026\236\027\235\031\u029d\032\302\041\153\042\152" +
                            "\043\300\044\277\045\310\046\307\047\255\050\253\054" +
                            "\261\055\070\060\203\061\202\062\174\063\172\064\226" +
                            "\065\225\066\176\067\175\071\211\072\210\074\240\075" +
                            "\237\104\216\117\221\120\220\121\252\122\250\123\305" +
                            "\124\304\125\244\126\243\001\001\000\016\015\130\016" +
                            "\126\020\u0298\054\115\055\070\056\143\001\001\000\016" +
                            "\015\130\016\126\020\111\054\115\055\070\056\143\001" +
                            "\001\000\002\001\001\000\010\054\115\055\070\056\u028a" +
                            "\001\001\000\010\054\115\055\070\056\u0284\001\001\000" +
                            "\012\015\u0222\054\115\055\070\056\u01f8\001\001\000\002" +
                            "\001\001\000\012\015\u0220\054\115\055\070\056\u01f8\001" +
                            "\001\000\012\015\u021e\054\115\055\070\056\u01f8\001\001" +
                            "\000\012\015\u021c\054\115\055\070\056\u01f8\001\001\000" +
                            "\012\015\u021a\054\115\055\070\056\u01f8\001\001\000\012" +
                            "\015\u0218\054\115\055\070\056\u01f8\001\001\000\012\015" +
                            "\u0216\054\115\055\070\056\u01f8\001\001\000\012\015\u0214" +
                            "\054\115\055\070\056\u01f8\001\001\000\012\015\u0212\054" +
                            "\115\055\070\056\u01f8\001\001\000\002\001\001\000\012" +
                            "\015\u025a\054\115\055\070\056\u01f8\001\001\000\002\001" +
                            "\001\000\012\015\u0256\054\115\055\070\056\u01f8\001\001" +
                            "\000\012\015\u0252\054\115\055\070\056\u01f8\001\001\000" +
                            "\012\015\u024e\054\115\055\070\056\u01f8\001\001\000\016" +
                            "\015\130\016\126\020\u0281\054\115\055\070\056\143\001" +
                            "\001\000\012\015\u024a\054\115\055\070\056\u01f8\001\001" +
                            "\000\012\015\u0246\054\115\055\070\056\u01f8\001\001\000" +
                            "\010\054\115\055\070\056\u027c\001\001\000\012\015\u0242" +
                            "\054\115\055\070\056\u01f8\001\001\000\012\015\u023e\054" +
                            "\115\055\070\056\u01f8\001\001\000\012\015\u023a\054\115" +
                            "\055\070\056\u01f8\001\001\000\002\001\001\000\010\054" +
                            "\115\055\070\056\145\001\001\000\002\001\001\000\006" +
                            "\054\u0277\055\070\001\001\000\140\002\160\003\156\005" +
                            "\246\006\154\007\213\010\212\011\223\012\222\022\171" +
                            "\023\170\024\272\025\271\026\236\027\235\031\u0274\032" +
                            "\302\041\153\042\152\043\300\044\277\045\310\046\307" +
                            "\047\255\050\253\054\261\055\070\060\203\061\202\062" +
                            "\174\063\172\064\226\065\225\066\176\067\175\071\211" +
                            "\072\210\074\240\075\237\104\216\117\221\120\220\121" +
                            "\252\122\250\123\305\124\304\125\244\126\243\001\001" +
                            "\000\140\002\160\003\156\005\246\006\154\007\213\010" +
                            "\212\011\223\012\222\022\171\023\170\024\272\025\271" +
                            "\026\236\027\235\031\206\032\302\041\153\042\152\043" +
                            "\300\044\277\045\310\046\307\047\255\050\253\054\261" +
                            "\055\070\060\203\061\202\062\174\063\172\064\226\065" +
                            "\225\066\176\067\175\071\211\072\210\074\240\075\237" +
                            "\104\216\117\221\120\220\121\252\122\250\123\305\124" +
                            "\304\125\244\126\243\001\001\000\006\054\u0273\055\070" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\140\002\160\003\156\005\246\006\154\007\213" +
                            "\010\212\011\223\012\222\022\171\023\170\024\272\025" +
                            "\271\026\236\027\235\031\u0259\032\302\041\153\042\152" +
                            "\043\300\044\277\045\310\046\307\047\255\050\253\054" +
                            "\261\055\070\060\203\061\202\062\174\063\172\064\226" +
                            "\065\225\066\176\067\175\071\211\072\210\074\240\075" +
                            "\237\104\216\117\221\120\220\121\252\122\250\123\305" +
                            "\124\304\125\244\126\243\001\001\000\002\001\001\000" +
                            "\140\002\160\003\156\005\246\006\154\007\213\010\212" +
                            "\011\223\012\222\022\171\023\170\024\272\025\271\026" +
                            "\236\027\235\031\u0255\032\302\041\153\042\152\043\300" +
                            "\044\277\045\310\046\307\047\255\050\253\054\261\055" +
                            "\070\060\203\061\202\062\174\063\172\064\226\065\225" +
                            "\066\176\067\175\071\211\072\210\074\240\075\237\104" +
                            "\216\117\221\120\220\121\252\122\250\123\305\124\304" +
                            "\125\244\126\243\001\001\000\002\001\001\000\140\002" +
                            "\160\003\156\005\246\006\154\007\213\010\212\011\223" +
                            "\012\222\022\171\023\170\024\272\025\271\026\236\027" +
                            "\235\031\u0251\032\302\041\153\042\152\043\300\044\277" +
                            "\045\310\046\307\047\255\050\253\054\261\055\070\060" +
                            "\203\061\202\062\174\063\172\064\226\065\225\066\176" +
                            "\067\175\071\211\072\210\074\240\075\237\104\216\117" +
                            "\221\120\220\121\252\122\250\123\305\124\304\125\244" +
                            "\126\243\001\001\000\140\002\160\003\156\005\246\006" +
                            "\154\007\213\010\212\011\223\012\222\022\171\023\170" +
                            "\024\272\025\271\026\236\027\235\031\u024d\032\302\041" +
                            "\153\042\152\043\300\044\277\045\310\046\307\047\255" +
                            "\050\253\054\261\055\070\060\203\061\202\062\174\063" +
                            "\172\064\226\065\225\066\176\067\175\071\211\072\210" +
                            "\074\240\075\237\104\216\117\221\120\220\121\252\122" +
                            "\250\123\305\124\304\125\244\126\243\001\001\000\140" +
                            "\002\160\003\156\005\246\006\154\007\213\010\212\011" +
                            "\223\012\222\022\171\023\170\024\272\025\271\026\236" +
                            "\027\235\031\u0249\032\302\041\153\042\152\043\300\044" +
                            "\277\045\310\046\307\047\255\050\253\054\261\055\070" +
                            "\060\203\061\202\062\174\063\172\064\226\065\225\066" +
                            "\176\067\175\071\211\072\210\074\240\075\237\104\216" +
                            "\117\221\120\220\121\252\122\250\123\305\124\304\125" +
                            "\244\126\243\001\001\000\140\002\160\003\156\005\246" +
                            "\006\154\007\213\010\212\011\223\012\222\022\171\023" +
                            "\170\024\272\025\271\026\236\027\235\031\u0245\032\302" +
                            "\041\153\042\152\043\300\044\277\045\310\046\307\047" +
                            "\255\050\253\054\261\055\070\060\203\061\202\062\174" +
                            "\063\172\064\226\065\225\066\176\067\175\071\211\072" +
                            "\210\074\240\075\237\104\216\117\221\120\220\121\252" +
                            "\122\250\123\305\124\304\125\244\126\243\001\001\000" +
                            "\140\002\160\003\156\005\246\006\154\007\213\010\212" +
                            "\011\223\012\222\022\171\023\170\024\272\025\271\026" +
                            "\236\027\235\031\u0241\032\302\041\153\042\152\043\300" +
                            "\044\277\045\310\046\307\047\255\050\253\054\261\055" +
                            "\070\060\203\061\202\062\174\063\172\064\226\065\225" +
                            "\066\176\067\175\071\211\072\210\074\240\075\237\104" +
                            "\216\117\221\120\220\121\252\122\250\123\305\124\304" +
                            "\125\244\126\243\001\001\000\140\002\160\003\156\005" +
                            "\246\006\154\007\213\010\212\011\223\012\222\022\171" +
                            "\023\170\024\272\025\271\026\236\027\235\031\u023d\032" +
                            "\302\041\153\042\152\043\300\044\277\045\310\046\307" +
                            "\047\255\050\253\054\261\055\070\060\203\061\202\062" +
                            "\174\063\172\064\226\065\225\066\176\067\175\071\211" +
                            "\072\210\074\240\075\237\104\216\117\221\120\220\121" +
                            "\252\122\250\123\305\124\304\125\244\126\243\001\001" +
                            "\000\140\002\160\003\156\005\246\006\154\007\213\010" +
                            "\212\011\223\012\222\022\171\023\170\024\272\025\271" +
                            "\026\236\027\235\031\u0239\032\302\041\153\042\152\043" +
                            "\300\044\277\045\310\046\307\047\255\050\253\054\261" +
                            "\055\070\060\203\061\202\062\174\063\172\064\226\065" +
                            "\225\066\176\067\175\071\211\072\210\074\240\075\237" +
                            "\104\216\117\221\120\220\121\252\122\250\123\305\124" +
                            "\304\125\244\126\243\001\001\000\004\073\u0266\001\001" +
                            "\000\002\001\001\000\002\001\001\000\016\015\130\016" +
                            "\u0145\017\u0263\054\115\055\070\056\143\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\062\005\246\006\u025f\007\213" +
                            "\010\212\022\171\023\170\024\272\025\271\032\302\047" +
                            "\255\050\253\054\261\055\070\062\u0260\063\u0109\066\176" +
                            "\067\175\071\211\072\210\074\240\075\237\104\216\125" +
                            "\244\126\243\001\001\000\002\001\001\000\002\001\001" +
                            "\000\074\005\246\007\213\010\212\022\171\023\170\024" +
                            "\272\025\271\032\302\047\255\050\253\054\261\055\070" +
                            "\062\174\063\172\066\176\067\175\071\211\072\210\074" +
                            "\240\075\237\104\216\117\u025e\120\u025d\121\252\122\250" +
                            "\123\305\124\304\125\244\126\243\001\001\000\150\002" +
                            "\160\003\156\005\246\006\154\007\213\010\212\011\223" +
                            "\012\222\015\u01fb\021\u01f9\022\171\023\170\024\272\025" +
                            "\271\026\236\027\235\031\340\032\302\034\341\041\153" +
                            "\042\152\043\300\044\277\045\310\046\307\047\255\050" +
                            "\253\054\u01fd\055\070\056\u01f8\060\203\061\202\062\174" +
                            "\063\172\064\226\065\225\066\176\067\175\071\211\072" +
                            "\210\074\240\075\237\104\216\117\221\120\220\121\252" +
                            "\122\250\123\305\124\304\125\244\126\243\001\001\000" +
                            "\002\001\001\000\140\002\160\003\156\005\246\006\154" +
                            "\007\213\010\212\011\223\012\222\022\171\023\170\024" +
                            "\272\025\271\026\236\027\235\031\u01eb\032\302\041\153" +
                            "\042\152\043\300\044\277\045\310\046\307\047\255\050" +
                            "\253\054\261\055\070\060\203\061\202\062\174\063\172" +
                            "\064\226\065\225\066\176\067\175\071\211\072\210\074" +
                            "\240\075\237\104\216\117\221\120\220\121\252\122\250" +
                            "\123\305\124\304\125\244\126\243\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\106\005\246\006\u01e5\007\213\010\212\011\223\012" +
                            "\222\022\171\023\170\024\272\025\271\032\302\047\255" +
                            "\050\253\054\261\055\070\060\u01e6\061\u01a8\062\174\063" +
                            "\172\066\176\067\175\071\211\072\210\074\240\075\237" +
                            "\104\216\117\221\120\220\121\252\122\250\123\305\124" +
                            "\304\125\244\126\243\001\001\000\022\005\246\006\u01e4" +
                            "\032\302\054\261\055\070\104\216\125\u01e3\126\u012a\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\016\015\130\016\u0145\017" +
                            "\u01b9\054\115\055\070\056\143\001\001\000\002\001\001" +
                            "\000\074\005\246\007\213\010\212\022\171\023\170\024" +
                            "\272\025\271\032\302\047\255\050\253\054\261\055\070" +
                            "\062\174\063\172\066\176\067\175\071\211\072\210\074" +
                            "\240\075\237\104\216\117\u01b5\120\u01b4\121\252\122\250" +
                            "\123\305\124\304\125\244\126\243\001\001\000\074\005" +
                            "\246\007\213\010\212\022\171\023\170\024\272\025\271" +
                            "\032\302\047\255\050\253\054\261\055\070\062\174\063" +
                            "\172\066\176\067\175\071\211\072\210\074\240\075\237" +
                            "\104\216\117\u01b3\120\u01b2\121\252\122\250\123\305\124" +
                            "\304\125\244\126\243\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\016\015" +
                            "\130\016\u0145\017\u0176\054\115\055\070\056\143\001\001" +
                            "\000\022\005\246\006\u0175\032\302\054\261\055\070\104" +
                            "\216\125\u0174\126\u0129\001\001\000\002\001\001\000\002" +
                            "\001\001\000\062\005\246\006\u0172\007\213\010\212\022" +
                            "\171\023\170\024\272\025\271\032\302\047\255\050\253" +
                            "\054\261\055\070\062\u0173\063\u012b\066\176\067\175\071" +
                            "\211\072\210\074\240\075\237\104\216\125\244\126\243" +
                            "\001\001\000\002\001\001\000\140\002\160\003\156\005" +
                            "\246\006\154\007\213\010\212\011\223\012\222\022\171" +
                            "\023\170\024\272\025\271\026\236\027\235\031\u0171\032" +
                            "\302\041\153\042\152\043\300\044\277\045\310\046\307" +
                            "\047\255\050\253\054\261\055\070\060\203\061\202\062" +
                            "\174\063\172\064\226\065\225\066\176\067\175\071\211" +
                            "\072\210\074\240\075\237\104\216\117\221\120\220\121" +
                            "\252\122\250\123\305\124\304\125\244\126\243\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\016\015\130\016\u0145\017\u0165\054\115" +
                            "\055\070\056\143\001\001\000\002\001\001\000\016\015" +
                            "\130\016\u0145\017\u0163\054\115\055\070\056\143\001\001" +
                            "\000\074\005\246\007\213\010\212\022\171\023\170\024" +
                            "\272\025\271\032\302\047\255\050\253\054\261\055\070" +
                            "\062\174\063\172\066\176\067\175\071\211\072\210\074" +
                            "\240\075\237\104\216\117\u0162\120\u0161\121\252\122\250" +
                            "\123\305\124\304\125\244\126\243\001\001\000\074\005" +
                            "\246\007\213\010\212\022\171\023\170\024\272\025\271" +
                            "\032\302\047\255\050\253\054\261\055\070\062\174\063" +
                            "\172\066\176\067\175\071\211\072\210\074\240\075\237" +
                            "\104\216\117\u015e\120\u015d\121\252\122\250\123\305\124" +
                            "\304\125\244\126\243\001\001\000\002\001\001\000\140" +
                            "\002\160\003\156\005\246\006\154\007\213\010\212\011" +
                            "\223\012\222\022\171\023\170\024\272\025\271\026\236" +
                            "\027\235\031\u015b\032\302\041\153\042\152\043\300\044" +
                            "\277\045\310\046\307\047\255\050\253\054\261\055\070" +
                            "\060\203\061\202\062\174\063\172\064\226\065\225\066" +
                            "\176\067\175\071\211\072\210\074\240\075\237\104\216" +
                            "\117\221\120\220\121\252\122\250\123\305\124\304\125" +
                            "\244\126\243\001\001\000\140\002\160\003\156\005\246" +
                            "\006\154\007\213\010\212\011\223\012\222\022\171\023" +
                            "\170\024\272\025\271\026\236\027\235\031\u0159\032\302" +
                            "\041\153\042\152\043\300\044\277\045\310\046\307\047" +
                            "\255\050\253\054\261\055\070\060\203\061\202\062\174" +
                            "\063\172\064\226\065\225\066\176\067\175\071\211\072" +
                            "\210\074\240\075\237\104\216\117\221\120\220\121\252" +
                            "\122\250\123\305\124\304\125\244\126\243\001\001\000" +
                            "\140\002\160\003\156\005\246\006\154\007\213\010\212" +
                            "\011\223\012\222\022\171\023\170\024\272\025\271\026" +
                            "\236\027\235\031\u0157\032\302\041\153\042\152\043\300" +
                            "\044\277\045\310\046\307\047\255\050\253\054\261\055" +
                            "\070\060\203\061\202\062\174\063\172\064\226\065\225" +
                            "\066\176\067\175\071\211\072\210\074\240\075\237\104" +
                            "\216\117\221\120\220\121\252\122\250\123\305\124\304" +
                            "\125\244\126\243\001\001\000\140\002\160\003\156\005" +
                            "\246\006\154\007\213\010\212\011\223\012\222\022\171" +
                            "\023\170\024\272\025\271\026\236\027\235\031\u0155\032" +
                            "\302\041\153\042\152\043\300\044\277\045\310\046\307" +
                            "\047\255\050\253\054\261\055\070\060\203\061\202\062" +
                            "\174\063\172\064\226\065\225\066\176\067\175\071\211" +
                            "\072\210\074\240\075\237\104\216\117\221\120\220\121" +
                            "\252\122\250\123\305\124\304\125\244\126\243\001\001" +
                            "\000\140\002\160\003\156\005\246\006\154\007\213\010" +
                            "\212\011\223\012\222\022\171\023\170\024\272\025\271" +
                            "\026\236\027\235\031\u0153\032\302\041\153\042\152\043" +
                            "\300\044\277\045\310\046\307\047\255\050\253\054\261" +
                            "\055\070\060\203\061\202\062\174\063\172\064\226\065" +
                            "\225\066\176\067\175\071\211\072\210\074\240\075\237" +
                            "\104\216\117\221\120\220\121\252\122\250\123\305\124" +
                            "\304\125\244\126\243\001\001\000\140\002\160\003\156" +
                            "\005\246\006\154\007\213\010\212\011\223\012\222\022" +
                            "\171\023\170\024\272\025\271\026\236\027\235\031\u0151" +
                            "\032\302\041\153\042\152\043\300\044\277\045\310\046" +
                            "\307\047\255\050\253\054\261\055\070\060\203\061\202" +
                            "\062\174\063\172\064\226\065\225\066\176\067\175\071" +
                            "\211\072\210\074\240\075\237\104\216\117\221\120\220" +
                            "\121\252\122\250\123\305\124\304\125\244\126\243\001" +
                            "\001\000\140\002\160\003\156\005\246\006\154\007\213" +
                            "\010\212\011\223\012\222\022\171\023\170\024\272\025" +
                            "\271\026\236\027\235\031\u014f\032\302\041\153\042\152" +
                            "\043\300\044\277\045\310\046\307\047\255\050\253\054" +
                            "\261\055\070\060\203\061\202\062\174\063\172\064\226" +
                            "\065\225\066\176\067\175\071\211\072\210\074\240\075" +
                            "\237\104\216\117\221\120\220\121\252\122\250\123\305" +
                            "\124\304\125\244\126\243\001\001\000\002\001\001\000" +
                            "\002\001\001\000\140\002\160\003\156\005\246\006\154" +
                            "\007\213\010\212\011\223\012\222\022\171\023\170\024" +
                            "\272\025\271\026\236\027\235\031\u014d\032\302\041\153" +
                            "\042\152\043\300\044\277\045\310\046\307\047\255\050" +
                            "\253\054\261\055\070\060\203\061\202\062\174\063\172" +
                            "\064\226\065\225\066\176\067\175\071\211\072\210\074" +
                            "\240\075\237\104\216\117\221\120\220\121\252\122\250" +
                            "\123\305\124\304\125\244\126\243\001\001\000\140\002" +
                            "\160\003\156\005\246\006\154\007\213\010\212\011\223" +
                            "\012\222\022\171\023\170\024\272\025\271\026\236\027" +
                            "\235\031\u014b\032\302\041\153\042\152\043\300\044\277" +
                            "\045\310\046\307\047\255\050\253\054\261\055\070\060" +
                            "\203\061\202\062\174\063\172\064\226\065\225\066\176" +
                            "\067\175\071\211\072\210\074\240\075\237\104\216\117" +
                            "\221\120\220\121\252\122\250\123\305\124\304\125\244" +
                            "\126\243\001\001\000\074\005\246\007\213\010\212\022" +
                            "\171\023\170\024\272\025\271\032\302\047\255\050\253" +
                            "\054\261\055\070\062\174\063\172\066\176\067\175\071" +
                            "\211\072\210\074\240\075\237\104\216\117\u014a\120\u0149" +
                            "\121\252\122\250\123\305\124\304\125\244\126\243\001" +
                            "\001\000\016\015\130\016\u0145\017\u0144\054\115\055\070" +
                            "\056\143\001\001\000\002\001\001\000\002\001\001\000" +
                            "\022\005\246\006\u0143\032\302\054\261\055\070\104\216" +
                            "\125\u0142\126\u0110\001\001\000\002\001\001\000\074\005" +
                            "\246\007\213\010\212\022\171\023\170\024\272\025\271" +
                            "\032\302\047\255\050\253\054\261\055\070\062\174\063" +
                            "\172\066\176\067\175\071\211\072\210\074\240\075\237" +
                            "\104\216\117\u0133\120\u0132\121\252\122\250\123\305\124" +
                            "\304\125\244\126\243\001\001\000\002\001\001\000\002" +
                            "\001\001\000\010\051\326\054\325\055\070\001\001\000" +
                            "\002\001\001\000\002\001\001\000\062\005\246\006\312" +
                            "\007\213\010\212\022\171\023\170\024\272\025\271\032" +
                            "\302\047\255\050\253\054\261\055\070\062\314\063\313" +
                            "\066\176\067\175\071\211\072\210\074\240\075\237\104" +
                            "\216\125\244\126\243\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\144\002" +
                            "\160\003\156\005\246\006\154\007\213\010\212\011\223" +
                            "\012\222\022\171\023\170\024\272\025\271\026\236\027" +
                            "\235\031\317\032\302\036\320\037\321\041\153\042\152" +
                            "\043\300\044\277\045\310\046\307\047\255\050\253\054" +
                            "\261\055\070\060\203\061\202\062\174\063\172\064\226" +
                            "\065\225\066\176\067\175\071\211\072\210\074\240\075" +
                            "\237\104\216\117\221\120\220\121\252\122\250\123\305" +
                            "\124\304\125\244\126\243\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\140\002\160\003\156" +
                            "\005\246\006\154\007\213\010\212\011\223\012\222\022" +
                            "\171\023\170\024\272\025\271\026\236\027\235\031\323" +
                            "\032\302\041\153\042\152\043\300\044\277\045\310\046" +
                            "\307\047\255\050\253\054\261\055\070\060\203\061\202" +
                            "\062\174\063\172\064\226\065\225\066\176\067\175\071" +
                            "\211\072\210\074\240\075\237\104\216\117\221\120\220" +
                            "\121\252\122\250\123\305\124\304\125\244\126\243\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\140\002\160\003\156\005\246\006" +
                            "\154\007\213\010\212\011\223\012\222\022\171\023\170" +
                            "\024\272\025\271\026\236\027\235\031\330\032\302\041" +
                            "\153\042\152\043\300\044\277\045\310\046\307\047\255" +
                            "\050\253\054\261\055\070\060\203\061\202\062\174\063" +
                            "\172\064\226\065\225\066\176\067\175\071\211\072\210" +
                            "\074\240\075\237\104\216\117\221\120\220\121\252\122" +
                            "\250\123\305\124\304\125\244\126\243\001\001\000\006" +
                            "\032\335\035\332\001\001\000\010\051\344\054\325\055" +
                            "\070\001\001\000\002\001\001\000\142\002\160\003\156" +
                            "\005\246\006\154\007\213\010\212\011\223\012\222\022" +
                            "\171\023\170\024\272\025\271\026\236\027\235\031\340" +
                            "\032\302\034\341\041\153\042\152\043\300\044\277\045" +
                            "\310\046\307\047\255\050\253\054\261\055\070\060\203" +
                            "\061\202\062\174\063\172\064\226\065\225\066\176\067" +
                            "\175\071\211\072\210\074\240\075\237\104\216\117\221" +
                            "\120\220\121\252\122\250\123\305\124\304\125\244\126" +
                            "\243\001\001\000\140\002\160\003\156\005\246\006\154" +
                            "\007\213\010\212\011\223\012\222\022\171\023\170\024" +
                            "\272\025\271\026\236\027\235\031\336\032\302\041\153" +
                            "\042\152\043\300\044\277\045\310\046\307\047\255\050" +
                            "\253\054\261\055\070\060\203\061\202\062\174\063\172" +
                            "\064\226\065\225\066\176\067\175\071\211\072\210\074" +
                            "\240\075\237\104\216\117\221\120\220\121\252\122\250" +
                            "\123\305\124\304\125\244\126\243\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\140\002\160\003\156\005\246\006\154\007\213\010" +
                            "\212\011\223\012\222\022\171\023\170\024\272\025\271" +
                            "\026\236\027\235\031\343\032\302\041\153\042\152\043" +
                            "\300\044\277\045\310\046\307\047\255\050\253\054\261" +
                            "\055\070\060\203\061\202\062\174\063\172\064\226\065" +
                            "\225\066\176\067\175\071\211\072\210\074\240\075\237" +
                            "\104\216\117\221\120\220\121\252\122\250\123\305\124" +
                            "\304\125\244\126\243\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\042\005\246\006\u0131\010" +
                            "\362\023\356\025\271\032\302\050\351\054\261\055\070" +
                            "\063\172\067\357\072\364\075\237\104\216\122\u0130\126" +
                            "\243\001\001\000\042\005\246\006\u012f\010\362\023\356" +
                            "\025\271\032\302\050\351\054\261\055\070\063\172\067" +
                            "\357\072\364\075\237\104\216\122\u012e\126\243\001\001" +
                            "\000\042\005\246\006\u012d\010\362\023\356\025\271\032" +
                            "\302\050\351\054\261\055\070\063\172\067\357\072\364" +
                            "\075\237\104\216\122\u012c\126\243\001\001\000\042\005" +
                            "\246\006\365\010\362\023\356\025\271\032\302\050\351" +
                            "\054\261\055\070\063\172\067\357\072\364\075\237\104" +
                            "\216\122\361\126\243\001\001\000\002\001\001\000\036" +
                            "\005\246\010\362\023\356\025\271\032\302\050\351\054" +
                            "\261\055\070\063\313\067\357\072\364\075\237\104\216" +
                            "\126\243\001\001\000\036\005\246\010\362\023\356\025" +
                            "\271\032\302\050\351\054\261\055\070\063\u012b\067\357" +
                            "\072\364\075\237\104\216\126\243\001\001\000\016\005" +
                            "\246\032\302\054\261\055\070\104\216\126\u012a\001\001" +
                            "\000\016\005\246\032\302\054\261\055\070\104\216\126" +
                            "\u0129\001\001\000\004\073\u0123\001\001\000\002\001\001" +
                            "\000\016\005\246\032\302\054\261\055\070\104\216\126" +
                            "\u0110\001\001\000\002\001\001\000\002\001\001\000\036" +
                            "\005\246\010\362\023\356\025\271\032\302\050\351\054" +
                            "\261\055\070\063\u0109\067\357\072\364\075\237\104\216" +
                            "\126\243\001\001\000\002\001\001\000\002\001\001\000" +
                            "\022\005\246\010\370\025\271\032\302\054\261\055\070" +
                            "\104\216\126\243\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\144\002\160\003\156\005\246" +
                            "\006\154\007\213\010\212\011\223\012\222\022\171\023" +
                            "\170\024\272\025\271\026\236\027\235\031\317\032\302" +
                            "\036\373\037\321\041\153\042\152\043\300\044\277\045" +
                            "\310\046\307\047\255\050\253\054\261\055\070\060\203" +
                            "\061\202\062\174\063\172\064\226\065\225\066\176\067" +
                            "\175\071\211\072\210\074\240\075\237\104\216\117\221" +
                            "\120\220\121\252\122\250\123\305\124\304\125\244\126" +
                            "\243\001\001\000\002\001\001\000\002\001\001\000\144" +
                            "\002\160\003\156\005\246\006\154\007\213\010\212\011" +
                            "\223\012\222\022\171\023\170\024\272\025\271\026\236" +
                            "\027\235\031\317\032\302\036\u0104\037\321\041\153\042" +
                            "\152\043\300\044\277\045\310\046\307\047\255\050\253" +
                            "\054\261\055\070\060\203\061\202\062\174\063\172\064" +
                            "\226\065\225\066\176\067\175\071\211\072\210\074\240" +
                            "\075\237\104\216\117\221\120\220\121\252\122\250\123" +
                            "\305\124\304\125\244\126\243\001\001\000\016\005\246" +
                            "\032\302\054\261\055\070\104\216\126\u0100\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\144\002\160\003\156\005\246\006\154\007\213" +
                            "\010\212\011\223\012\222\022\171\023\170\024\272\025" +
                            "\271\026\236\027\235\031\317\032\302\036\u0107\037\321" +
                            "\041\153\042\152\043\300\044\277\045\310\046\307\047" +
                            "\255\050\253\054\261\055\070\060\203\061\202\062\174" +
                            "\063\172\064\226\065\225\066\176\067\175\071\211\072" +
                            "\210\074\240\075\237\104\216\117\221\120\220\121\252" +
                            "\122\250\123\305\124\304\125\244\126\243\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
                            "\005\246\010\362\023\356\025\271\032\302\050\351\054" +
                            "\261\055\070\063\u010f\067\357\072\364\075\237\104\216" +
                            "\126\243\001\001\000\036\005\246\010\362\023\356\025" +
                            "\271\032\302\050\351\054\261\055\070\063\u010e\067\357" +
                            "\072\364\075\237\104\216\126\243\001\001\000\036\005" +
                            "\246\010\362\023\356\025\271\032\302\050\351\054\261" +
                            "\055\070\063\u010d\067\357\072\364\075\237\104\216\126" +
                            "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\032\005\246\010\362\023" +
                            "\356\025\271\032\302\050\u0112\054\261\055\070\072\364" +
                            "\075\237\104\216\126\243\001\001\000\002\001\001\000" +
                            "\030\005\246\010\362\023\356\025\271\032\302\054\261" +
                            "\055\070\072\364\075\u0114\104\216\126\243\001\001\000" +
                            "\002\001\001\000\024\005\246\010\362\025\271\032\302" +
                            "\054\261\055\070\072\u0128\104\216\126\243\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\030\005\246\010\362\023\356\025\271\032\302\054\261" +
                            "\055\070\072\364\075\u0127\104\216\126\243\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
                            "\005\246\006\u0141\010\362\023\356\025\271\032\302\050" +
                            "\351\054\261\055\070\063\172\067\357\072\364\075\237" +
                            "\104\216\122\u0137\124\u0140\126\243\001\001\000\044\005" +
                            "\246\006\u013f\010\362\023\356\025\271\032\302\050\351" +
                            "\054\261\055\070\063\172\067\357\072\364\075\237\104" +
                            "\216\122\u0137\124\u013e\126\243\001\001\000\044\005\246" +
                            "\006\u0139\010\362\023\356\025\271\032\302\050\351\054" +
                            "\261\055\070\063\172\067\357\072\364\075\237\104\216" +
                            "\122\u0137\124\u0138\126\243\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\040\005\246\010\362" +
                            "\023\356\025\271\032\302\050\351\054\261\055\070\063" +
                            "\172\067\357\072\364\075\237\104\216\122\u0130\126\243" +
                            "\001\001\000\040\005\246\010\362\023\356\025\271\032" +
                            "\302\050\351\054\261\055\070\063\172\067\357\072\364" +
                            "\075\237\104\216\122\u012e\126\243\001\001\000\040\005" +
                            "\246\010\362\023\356\025\271\032\302\050\351\054\261" +
                            "\055\070\063\172\067\357\072\364\075\237\104\216\122" +
                            "\u012c\126\243\001\001\000\040\005\246\010\362\023\356" +
                            "\025\271\032\302\050\351\054\261\055\070\063\172\067" +
                            "\357\072\364\075\237\104\216\122\361\126\243\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
                            "\032\335\035\u0147\001\001\000\002\001\001\000\014\015" +
                            "\130\016\u0148\054\115\055\070\056\143\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\055\103\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\006\032\335\035" +
                            "\u0164\001\001\000\002\001\001\000\006\032\335\035\u0166" +
                            "\001\001\000\002\001\001\000\032\005\246\006\u0168\010" +
                            "\362\023\356\025\271\032\302\054\261\055\070\072\364" +
                            "\075\u0114\104\216\126\243\001\001\000\002\001\001\000" +
                            "\004\055\u016a\001\001\000\002\001\001\000\040\005\246" +
                            "\006\u0170\010\362\023\356\025\271\032\302\050\351\054" +
                            "\261\055\070\063\u010f\067\357\072\364\075\237\104\216" +
                            "\126\243\001\001\000\040\005\246\006\u016f\010\362\023" +
                            "\356\025\271\032\302\050\351\054\261\055\070\063\u010d" +
                            "\067\357\072\364\075\237\104\216\126\243\001\001\000" +
                            "\040\005\246\006\u016e\010\362\023\356\025\271\032\302" +
                            "\050\351\054\261\055\070\063\u010e\067\357\072\364\075" +
                            "\237\104\216\126\243\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\006\032\335\035\u0177\001\001\000\002\001\001\000" +
                            "\062\003\u017b\005\246\006\u017a\010\362\012\u017f\023\356" +
                            "\025\271\032\302\042\u0179\044\277\046\307\050\351\054" +
                            "\261\055\070\061\202\063\172\067\357\072\364\075\237" +
                            "\104\216\120\u017e\122\u0137\124\u0186\126\243\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
                            "\005\246\010\362\023\356\025\271\032\302\050\351\054" +
                            "\261\055\070\063\172\067\357\072\364\075\237\104\216" +
                            "\120\u01a9\122\u0137\124\u0186\126\243\001\001\000\050\005" +
                            "\246\010\362\012\u017f\023\356\025\271\032\302\050\351" +
                            "\054\261\055\070\061\u01a8\063\172\067\357\072\364\075" +
                            "\237\104\216\120\u017e\122\u0137\124\u0186\126\243\001\001" +
                            "\000\002\001\001\000\002\001\001\000\044\005\246\010" +
                            "\362\023\356\025\271\032\302\050\351\054\261\055\070" +
                            "\063\172\067\357\072\364\075\237\104\216\120\u018f\122" +
                            "\u0137\124\u0186\126\243\001\001\000\044\005\246\010\362" +
                            "\023\356\025\271\032\302\050\351\054\261\055\070\063" +
                            "\172\067\357\072\364\075\237\104\216\120\u018e\122\u0137" +
                            "\124\u0186\126\243\001\001\000\044\005\246\010\362\023" +
                            "\356\025\271\032\302\050\351\054\261\055\070\063\172" +
                            "\067\357\072\364\075\237\104\216\120\u018d\122\u0137\124" +
                            "\u0186\126\243\001\001\000\044\005\246\010\362\023\356" +
                            "\025\271\032\302\050\351\054\261\055\070\063\172\067" +
                            "\357\072\364\075\237\104\216\120\u018c\122\u0137\124\u0186" +
                            "\126\243\001\001\000\044\005\246\010\362\023\356\025" +
                            "\271\032\302\050\351\054\261\055\070\063\172\067\357" +
                            "\072\364\075\237\104\216\120\u018b\122\u0137\124\u0186\126" +
                            "\243\001\001\000\044\005\246\010\362\023\356\025\271" +
                            "\032\302\050\351\054\261\055\070\063\172\067\357\072" +
                            "\364\075\237\104\216\120\u0187\122\u0137\124\u0186\126\243" +
                            "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
                            "\246\010\362\023\356\025\271\032\302\050\351\054\261" +
                            "\055\070\063\172\067\357\072\364\075\237\104\216\122" +
                            "\u0137\124\u0140\126\243\001\001\000\042\005\246\010\362" +
                            "\023\356\025\271\032\302\050\351\054\261\055\070\063" +
                            "\172\067\357\072\364\075\237\104\216\122\u0137\124\u013e" +
                            "\126\243\001\001\000\042\005\246\010\362\023\356\025" +
                            "\271\032\302\050\351\054\261\055\070\063\172\067\357" +
                            "\072\364\075\237\104\216\122\u0137\124\u0138\126\243\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\044\005\246\010" +
                            "\362\023\356\025\271\032\302\050\351\054\261\055\070" +
                            "\063\172\067\357\072\364\075\237\104\216\120\u01a7\122" +
                            "\u0137\124\u0186\126\243\001\001\000\044\005\246\010\362" +
                            "\023\356\025\271\032\302\050\351\054\261\055\070\063" +
                            "\172\067\357\072\364\075\237\104\216\120\u01a6\122\u0137" +
                            "\124\u0186\126\243\001\001\000\044\005\246\010\362\023" +
                            "\356\025\271\032\302\050\351\054\261\055\070\063\172" +
                            "\067\357\072\364\075\237\104\216\120\u01a5\122\u0137\124" +
                            "\u0186\126\243\001\001\000\044\005\246\010\362\023\356" +
                            "\025\271\032\302\050\351\054\261\055\070\063\172\067" +
                            "\357\072\364\075\237\104\216\120\u01a4\122\u0137\124\u0186" +
                            "\126\243\001\001\000\044\005\246\010\362\023\356\025" +
                            "\271\032\302\050\351\054\261\055\070\063\172\067\357" +
                            "\072\364\075\237\104\216\120\u01a3\122\u0137\124\u0186\126" +
                            "\243\001\001\000\044\005\246\010\362\023\356\025\271" +
                            "\032\302\050\351\054\261\055\070\063\172\067\357\072" +
                            "\364\075\237\104\216\120\u01a2\122\u0137\124\u0186\126\243" +
                            "\001\001\000\044\005\246\010\362\023\356\025\271\032" +
                            "\302\050\351\054\261\055\070\063\172\067\357\072\364" +
                            "\075\237\104\216\120\u01a1\122\u0137\124\u0186\126\243\001" +
                            "\001\000\044\005\246\010\362\023\356\025\271\032\302" +
                            "\050\351\054\261\055\070\063\172\067\357\072\364\075" +
                            "\237\104\216\120\u01a0\122\u0137\124\u0186\126\243\001\001" +
                            "\000\044\005\246\010\362\023\356\025\271\032\302\050" +
                            "\351\054\261\055\070\063\172\067\357\072\364\075\237" +
                            "\104\216\120\u019f\122\u0137\124\u0186\126\243\001\001\000" +
                            "\044\005\246\010\362\023\356\025\271\032\302\050\351" +
                            "\054\261\055\070\063\172\067\357\072\364\075\237\104" +
                            "\216\120\u019e\122\u0137\124\u0186\126\243\001\001\000\044" +
                            "\005\246\010\362\023\356\025\271\032\302\050\351\054" +
                            "\261\055\070\063\172\067\357\072\364\075\237\104\216" +
                            "\120\u019d\122\u0137\124\u0186\126\243\001\001\000\044\005" +
                            "\246\010\362\023\356\025\271\032\302\050\351\054\261" +
                            "\055\070\063\172\067\357\072\364\075\237\104\216\120" +
                            "\u019c\122\u0137\124\u0186\126\243\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\060\003\u017b\005\246\010\362\012\u017f\023\356\025" +
                            "\271\032\302\042\u01ad\044\u01ae\046\307\050\351\054\261" +
                            "\055\070\061\202\063\172\067\357\072\364\075\237\104" +
                            "\216\120\u017e\122\u0137\124\u0186\126\243\001\001\000\050" +
                            "\005\246\010\362\012\u017f\023\356\025\271\032\302\050" +
                            "\351\054\261\055\070\061\u01ac\063\172\067\357\072\364" +
                            "\075\237\104\216\120\u017e\122\u0137\124\u0186\126\243\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\056\003\u017b\005\246\010\362\012\u017f\023\356\025" +
                            "\271\032\302\044\u01b1\046\u01b0\050\351\054\261\055\070" +
                            "\061\202\063\172\067\357\072\364\075\237\104\216\120" +
                            "\u017e\122\u0137\124\u0186\126\243\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\144\002\160\003\156" +
                            "\005\246\006\154\007\213\010\212\011\223\012\222\022" +
                            "\171\023\170\024\272\025\271\026\236\027\235\031\317" +
                            "\032\302\036\u01b7\037\321\041\153\042\152\043\300\044" +
                            "\277\045\310\046\307\047\255\050\253\054\261\055\070" +
                            "\060\203\061\202\062\174\063\172\064\226\065\225\066" +
                            "\176\067\175\071\211\072\210\074\240\075\237\104\216" +
                            "\117\221\120\220\121\252\122\250\123\305\124\304\125" +
                            "\244\126\243\001\001\000\002\001\001\000\002\001\001" +
                            "\000\006\032\335\035\u01ba\001\001\000\002\001\001\000" +
                            "\064\003\u017b\005\246\006\u01bc\010\362\012\u017f\023\356" +
                            "\025\271\027\u01bd\032\302\042\152\044\277\046\307\050" +
                            "\351\054\261\055\070\061\202\063\172\067\357\072\364" +
                            "\075\237\104\216\120\u017e\122\u0137\124\u0186\126\243\001" +
                            "\001\000\002\001\001\000\002\001\001\000\060\003\u017b" +
                            "\005\246\010\362\012\u017f\023\356\025\271\032\302\042" +
                            "\u0179\044\277\046\307\050\351\054\261\055\070\061\202" +
                            "\063\172\067\357\072\364\075\237\104\216\120\u017e\122" +
                            "\u0137\124\u0186\126\243\001\001\000\074\005\246\007\213" +
                            "\010\212\022\171\023\170\024\272\025\271\032\302\047" +
                            "\255\050\253\054\261\055\070\062\174\063\172\066\176" +
                            "\067\175\071\211\072\210\074\240\075\237\104\216\117" +
                            "\u01e2\120\u01e1\121\252\122\250\123\305\124\304\125\244" +
                            "\126\243\001\001\000\074\005\246\007\213\010\212\022" +
                            "\171\023\170\024\272\025\271\032\302\047\255\050\253" +
                            "\054\261\055\070\062\174\063\172\066\176\067\175\071" +
                            "\211\072\210\074\240\075\237\104\216\117\u01e0\120\u01df" +
                            "\121\252\122\250\123\305\124\304\125\244\126\243\001" +
                            "\001\000\074\005\246\007\213\010\212\022\171\023\170" +
                            "\024\272\025\271\032\302\047\255\050\253\054\261\055" +
                            "\070\062\174\063\172\066\176\067\175\071\211\072\210" +
                            "\074\240\075\237\104\216\117\u01de\120\u01dd\121\252\122" +
                            "\250\123\305\124\304\125\244\126\243\001\001\000\074" +
                            "\005\246\007\213\010\212\022\171\023\170\024\272\025" +
                            "\271\032\302\047\255\050\253\054\261\055\070\062\174" +
                            "\063\172\066\176\067\175\071\211\072\210\074\240\075" +
                            "\237\104\216\117\u01dc\120\u01db\121\252\122\250\123\305" +
                            "\124\304\125\244\126\243\001\001\000\074\005\246\007" +
                            "\213\010\212\022\171\023\170\024\272\025\271\032\302" +
                            "\047\255\050\253\054\261\055\070\062\174\063\172\066" +
                            "\176\067\175\071\211\072\210\074\240\075\237\104\216" +
                            "\117\u01da\120\u01d9\121\252\122\250\123\305\124\304\125" +
                            "\244\126\243\001\001\000\074\005\246\007\213\010\212" +
                            "\022\171\023\170\024\272\025\271\032\302\047\255\050" +
                            "\253\054\261\055\070\062\174\063\172\066\176\067\175" +
                            "\071\211\072\210\074\240\075\237\104\216\117\u01d8\120" +
                            "\u01d7\121\252\122\250\123\305\124\304\125\244\126\243" +
                            "\001\001\000\074\005\246\007\213\010\212\022\171\023" +
                            "\170\024\272\025\271\032\302\047\255\050\253\054\261" +
                            "\055\070\062\174\063\172\066\176\067\175\071\211\072" +
                            "\210\074\240\075\237\104\216\117\u01d6\120\u01d5\121\252" +
                            "\122\250\123\305\124\304\125\244\126\243\001\001\000" +
                            "\074\005\246\007\213\010\212\022\171\023\170\024\272" +
                            "\025\271\032\302\047\255\050\253\054\261\055\070\062" +
                            "\174\063\172\066\176\067\175\071\211\072\210\074\240" +
                            "\075\237\104\216\117\u01d4\120\u01d3\121\252\122\250\123" +
                            "\305\124\304\125\244\126\243\001\001\000\074\005\246" +
                            "\007\213\010\212\022\171\023\170\024\272\025\271\032" +
                            "\302\047\255\050\253\054\261\055\070\062\174\063\172" +
                            "\066\176\067\175\071\211\072\210\074\240\075\237\104" +
                            "\216\117\u01d2\120\u01d1\121\252\122\250\123\305\124\304" +
                            "\125\244\126\243\001\001\000\074\005\246\007\213\010" +
                            "\212\022\171\023\170\024\272\025\271\032\302\047\255" +
                            "\050\253\054\261\055\070\062\174\063\172\066\176\067" +
                            "\175\071\211\072\210\074\240\075\237\104\216\117\u01d0" +
                            "\120\u01cf\121\252\122\250\123\305\124\304\125\244\126" +
                            "\243\001\001\000\074\005\246\007\213\010\212\022\171" +
                            "\023\170\024\272\025\271\032\302\047\255\050\253\054" +
                            "\261\055\070\062\174\063\172\066\176\067\175\071\211" +
                            "\072\210\074\240\075\237\104\216\117\u01ce\120\u01cd\121" +
                            "\252\122\250\123\305\124\304\125\244\126\243\001\001" +
                            "\000\074\005\246\007\213\010\212\022\171\023\170\024" +
                            "\272\025\271\032\302\047\255\050\253\054\261\055\070" +
                            "\062\174\063\172\066\176\067\175\071\211\072\210\074" +
                            "\240\075\237\104\216\117\u01cc\120\u01cb\121\252\122\250" +
                            "\123\305\124\304\125\244\126\243\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\020\005\246\006\u01e8\032\302" +
                            "\054\261\055\070\104\216\126\u0100\001\001\000\002\001" +
                            "\001\000\024\005\246\006\u01ea\010\370\025\271\032\302" +
                            "\054\261\055\070\104\216\126\243\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\144\002\160" +
                            "\003\156\005\246\006\154\007\213\010\212\011\223\012" +
                            "\222\015\u025a\022\171\023\170\024\272\025\271\026\236" +
                            "\027\235\031\u0259\032\302\041\153\042\152\043\300\044" +
                            "\277\045\310\046\307\047\255\050\253\054\u01fd\055\070" +
                            "\056\u01f8\060\203\061\202\062\174\063\172\064\226\065" +
                            "\225\066\176\067\175\071\211\072\210\074\240\075\237" +
                            "\104\216\117\221\120\220\121\252\122\250\123\305\124" +
                            "\304\125\244\126\243\001\001\000\144\002\160\003\156" +
                            "\005\246\006\154\007\213\010\212\011\223\012\222\015" +
                            "\u0256\022\171\023\170\024\272\025\271\026\236\027\235" +
                            "\031\u0255\032\302\041\153\042\152\043\300\044\277\045" +
                            "\310\046\307\047\255\050\253\054\u01fd\055\070\056\u01f8" +
                            "\060\203\061\202\062\174\063\172\064\226\065\225\066" +
                            "\176\067\175\071\211\072\210\074\240\075\237\104\216" +
                            "\117\221\120\220\121\252\122\250\123\305\124\304\125" +
                            "\244\126\243\001\001\000\144\002\160\003\156\005\246" +
                            "\006\154\007\213\010\212\011\223\012\222\015\u0252\022" +
                            "\171\023\170\024\272\025\271\026\236\027\235\031\u0251" +
                            "\032\302\041\153\042\152\043\300\044\277\045\310\046" +
                            "\307\047\255\050\253\054\u01fd\055\070\056\u01f8\060\203" +
                            "\061\202\062\174\063\172\064\226\065\225\066\176\067" +
                            "\175\071\211\072\210\074\240\075\237\104\216\117\221" +
                            "\120\220\121\252\122\250\123\305\124\304\125\244\126" +
                            "\243\001\001\000\144\002\160\003\156\005\246\006\154" +
                            "\007\213\010\212\011\223\012\222\015\u024e\022\171\023" +
                            "\170\024\272\025\271\026\236\027\235\031\u024d\032\302" +
                            "\041\153\042\152\043\300\044\277\045\310\046\307\047" +
                            "\255\050\253\054\u01fd\055\070\056\u01f8\060\203\061\202" +
                            "\062\174\063\172\064\226\065\225\066\176\067\175\071" +
                            "\211\072\210\074\240\075\237\104\216\117\221\120\220" +
                            "\121\252\122\250\123\305\124\304\125\244\126\243\001" +
                            "\001\000\144\002\160\003\156\005\246\006\154\007\213" +
                            "\010\212\011\223\012\222\015\u024a\022\171\023\170\024" +
                            "\272\025\271\026\236\027\235\031\u0249\032\302\041\153" +
                            "\042\152\043\300\044\277\045\310\046\307\047\255\050" +
                            "\253\054\u01fd\055\070\056\u01f8\060\203\061\202\062\174" +
                            "\063\172\064\226\065\225\066\176\067\175\071\211\072" +
                            "\210\074\240\075\237\104\216\117\221\120\220\121\252" +
                            "\122\250\123\305\124\304\125\244\126\243\001\001\000" +
                            "\144\002\160\003\156\005\246\006\154\007\213\010\212" +
                            "\011\223\012\222\015\u0246\022\171\023\170\024\272\025" +
                            "\271\026\236\027\235\031\u0245\032\302\041\153\042\152" +
                            "\043\300\044\277\045\310\046\307\047\255\050\253\054" +
                            "\u01fd\055\070\056\u01f8\060\203\061\202\062\174\063\172" +
                            "\064\226\065\225\066\176\067\175\071\211\072\210\074" +
                            "\240\075\237\104\216\117\221\120\220\121\252\122\250" +
                            "\123\305\124\304\125\244\126\243\001\001\000\144\002" +
                            "\160\003\156\005\246\006\154\007\213\010\212\011\223" +
                            "\012\222\015\u0242\022\171\023\170\024\272\025\271\026" +
                            "\236\027\235\031\u0241\032\302\041\153\042\152\043\300" +
                            "\044\277\045\310\046\307\047\255\050\253\054\u01fd\055" +
                            "\070\056\u01f8\060\203\061\202\062\174\063\172\064\226" +
                            "\065\225\066\176\067\175\071\211\072\210\074\240\075" +
                            "\237\104\216\117\221\120\220\121\252\122\250\123\305" +
                            "\124\304\125\244\126\243\001\001\000\144\002\160\003" +
                            "\156\005\246\006\154\007\213\010\212\011\223\012\222" +
                            "\015\u023e\022\171\023\170\024\272\025\271\026\236\027" +
                            "\235\031\u023d\032\302\041\153\042\152\043\300\044\277" +
                            "\045\310\046\307\047\255\050\253\054\u01fd\055\070\056" +
                            "\u01f8\060\203\061\202\062\174\063\172\064\226\065\225" +
                            "\066\176\067\175\071\211\072\210\074\240\075\237\104" +
                            "\216\117\221\120\220\121\252\122\250\123\305\124\304" +
                            "\125\244\126\243\001\001\000\144\002\160\003\156\005" +
                            "\246\006\154\007\213\010\212\011\223\012\222\015\u023a" +
                            "\022\171\023\170\024\272\025\271\026\236\027\235\031" +
                            "\u0239\032\302\041\153\042\152\043\300\044\277\045\310" +
                            "\046\307\047\255\050\253\054\u01fd\055\070\056\u01f8\060" +
                            "\203\061\202\062\174\063\172\064\226\065\225\066\176" +
                            "\067\175\071\211\072\210\074\240\075\237\104\216\117" +
                            "\221\120\220\121\252\122\250\123\305\124\304\125\244" +
                            "\126\243\001\001\000\010\054\115\055\070\056\u0234\001" +
                            "\001\000\010\054\115\055\070\056\u0233\001\001\000\002" +
                            "\001\001\000\006\032\335\035\u022a\001\001\000\010\054" +
                            "\115\055\070\056\u0224\001\001\000\002\001\001\000\144" +
                            "\002\160\003\156\005\246\006\154\007\213\010\212\011" +
                            "\223\012\222\015\u0222\022\171\023\170\024\272\025\271" +
                            "\026\236\027\235\031\u015b\032\302\041\153\042\152\043" +
                            "\300\044\277\045\310\046\307\047\255\050\253\054\u01fd" +
                            "\055\070\056\u01f8\060\203\061\202\062\174\063\172\064" +
                            "\226\065\225\066\176\067\175\071\211\072\210\074\240" +
                            "\075\237\104\216\117\221\120\220\121\252\122\250\123" +
                            "\305\124\304\125\244\126\243\001\001\000\002\001\001" +
                            "\000\144\002\160\003\156\005\246\006\154\007\213\010" +
                            "\212\011\223\012\222\015\u0220\022\171\023\170\024\272" +
                            "\025\271\026\236\027\235\031\u0159\032\302\041\153\042" +
                            "\152\043\300\044\277\045\310\046\307\047\255\050\253" +
                            "\054\u01fd\055\070\056\u01f8\060\203\061\202\062\174\063" +
                            "\172\064\226\065\225\066\176\067\175\071\211\072\210" +
                            "\074\240\075\237\104\216\117\221\120\220\121\252\122" +
                            "\250\123\305\124\304\125\244\126\243\001\001\000\144" +
                            "\002\160\003\156\005\246\006\154\007\213\010\212\011" +
                            "\223\012\222\015\u021e\022\171\023\170\024\272\025\271" +
                            "\026\236\027\235\031\u0157\032\302\041\153\042\152\043" +
                            "\300\044\277\045\310\046\307\047\255\050\253\054\u01fd" +
                            "\055\070\056\u01f8\060\203\061\202\062\174\063\172\064" +
                            "\226\065\225\066\176\067\175\071\211\072\210\074\240" +
                            "\075\237\104\216\117\221\120\220\121\252\122\250\123" +
                            "\305\124\304\125\244\126\243\001\001\000\144\002\160" +
                            "\003\156\005\246\006\154\007\213\010\212\011\223\012" +
                            "\222\015\u021c\022\171\023\170\024\272\025\271\026\236" +
                            "\027\235\031\u0155\032\302\041\153\042\152\043\300\044" +
                            "\277\045\310\046\307\047\255\050\253\054\u01fd\055\070" +
                            "\056\u01f8\060\203\061\202\062\174\063\172\064\226\065" +
                            "\225\066\176\067\175\071\211\072\210\074\240\075\237" +
                            "\104\216\117\221\120\220\121\252\122\250\123\305\124" +
                            "\304\125\244\126\243\001\001\000\144\002\160\003\156" +
                            "\005\246\006\154\007\213\010\212\011\223\012\222\015" +
                            "\u021a\022\171\023\170\024\272\025\271\026\236\027\235" +
                            "\031\u0153\032\302\041\153\042\152\043\300\044\277\045" +
                            "\310\046\307\047\255\050\253\054\u01fd\055\070\056\u01f8" +
                            "\060\203\061\202\062\174\063\172\064\226\065\225\066" +
                            "\176\067\175\071\211\072\210\074\240\075\237\104\216" +
                            "\117\221\120\220\121\252\122\250\123\305\124\304\125" +
                            "\244\126\243\001\001\000\144\002\160\003\156\005\246" +
                            "\006\154\007\213\010\212\011\223\012\222\015\u0218\022" +
                            "\171\023\170\024\272\025\271\026\236\027\235\031\u0151" +
                            "\032\302\041\153\042\152\043\300\044\277\045\310\046" +
                            "\307\047\255\050\253\054\u01fd\055\070\056\u01f8\060\203" +
                            "\061\202\062\174\063\172\064\226\065\225\066\176\067" +
                            "\175\071\211\072\210\074\240\075\237\104\216\117\221" +
                            "\120\220\121\252\122\250\123\305\124\304\125\244\126" +
                            "\243\001\001\000\144\002\160\003\156\005\246\006\154" +
                            "\007\213\010\212\011\223\012\222\015\u0216\022\171\023" +
                            "\170\024\272\025\271\026\236\027\235\031\u014f\032\302" +
                            "\041\153\042\152\043\300\044\277\045\310\046\307\047" +
                            "\255\050\253\054\u01fd\055\070\056\u01f8\060\203\061\202" +
                            "\062\174\063\172\064\226\065\225\066\176\067\175\071" +
                            "\211\072\210\074\240\075\237\104\216\117\221\120\220" +
                            "\121\252\122\250\123\305\124\304\125\244\126\243\001" +
                            "\001\000\144\002\160\003\156\005\246\006\154\007\213" +
                            "\010\212\011\223\012\222\015\u0214\022\171\023\170\024" +
                            "\272\025\271\026\236\027\235\031\u014d\032\302\041\153" +
                            "\042\152\043\300\044\277\045\310\046\307\047\255\050" +
                            "\253\054\u01fd\055\070\056\u01f8\060\203\061\202\062\174" +
                            "\063\172\064\226\065\225\066\176\067\175\071\211\072" +
                            "\210\074\240\075\237\104\216\117\221\120\220\121\252" +
                            "\122\250\123\305\124\304\125\244\126\243\001\001\000" +
                            "\144\002\160\003\156\005\246\006\154\007\213\010\212" +
                            "\011\223\012\222\015\u0212\022\171\023\170\024\272\025" +
                            "\271\026\236\027\235\031\u014b\032\302\041\153\042\152" +
                            "\043\300\044\277\045\310\046\307\047\255\050\253\054" +
                            "\u01fd\055\070\056\u01f8\060\203\061\202\062\174\063\172" +
                            "\064\226\065\225\066\176\067\175\071\211\072\210\074" +
                            "\240\075\237\104\216\117\221\120\220\121\252\122\250" +
                            "\123\305\124\304\125\244\126\243\001\001\000\010\054" +
                            "\115\055\070\056\u0208\001\001\000\010\054\115\055\070" +
                            "\056\u020d\001\001\000\002\001\001\000\140\002\160\003" +
                            "\156\005\246\006\154\007\213\010\212\011\223\012\222" +
                            "\022\171\023\170\024\272\025\271\026\236\027\235\031" +
                            "\u020a\032\302\041\153\042\152\043\300\044\277\045\310" +
                            "\046\307\047\255\050\253\054\261\055\070\060\203\061" +
                            "\202\062\174\063\172\064\226\065\225\066\176\067\175" +
                            "\071\211\072\210\074\240\075\237\104\216\117\221\120" +
                            "\220\121\252\122\250\123\305\124\304\125\244\126\243" +
                            "\001\001\000\002\001\001\000\140\002\160\003\156\005" +
                            "\246\006\154\007\213\010\212\011\223\012\222\022\171" +
                            "\023\170\024\272\025\271\026\236\027\235\031\u020c\032" +
                            "\302\041\153\042\152\043\300\044\277\045\310\046\307" +
                            "\047\255\050\253\054\261\055\070\060\203\061\202\062" +
                            "\174\063\172\064\226\065\225\066\176\067\175\071\211" +
                            "\072\210\074\240\075\237\104\216\117\221\120\220\121" +
                            "\252\122\250\123\305\124\304\125\244\126\243\001\001" +
                            "\000\002\001\001\000\002\001\001\000\140\002\160\003" +
                            "\156\005\246\006\154\007\213\010\212\011\223\012\222" +
                            "\022\171\023\170\024\272\025\271\026\236\027\235\031" +
                            "\u020f\032\302\041\153\042\152\043\300\044\277\045\310" +
                            "\046\307\047\255\050\253\054\261\055\070\060\203\061" +
                            "\202\062\174\063\172\064\226\065\225\066\176\067\175" +
                            "\071\211\072\210\074\240\075\237\104\216\117\221\120" +
                            "\220\121\252\122\250\123\305\124\304\125\244\126\243" +
                            "\001\001\000\002\001\001\000\140\002\160\003\156\005" +
                            "\246\006\154\007\213\010\212\011\223\012\222\022\171" +
                            "\023\170\024\272\025\271\026\236\027\235\031\u0211\032" +
                            "\302\041\153\042\152\043\300\044\277\045\310\046\307" +
                            "\047\255\050\253\054\261\055\070\060\203\061\202\062" +
                            "\174\063\172\064\226\065\225\066\176\067\175\071\211" +
                            "\072\210\074\240\075\237\104\216\117\221\120\220\121" +
                            "\252\122\250\123\305\124\304\125\244\126\243\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\140\002\160\003\156\005\246\006\154\007" +
                            "\213\010\212\011\223\012\222\022\171\023\170\024\272" +
                            "\025\271\026\236\027\235\031\u0226\032\302\041\153\042" +
                            "\152\043\300\044\277\045\310\046\307\047\255\050\253" +
                            "\054\261\055\070\060\203\061\202\062\174\063\172\064" +
                            "\226\065\225\066\176\067\175\071\211\072\210\074\240" +
                            "\075\237\104\216\117\221\120\220\121\252\122\250\123" +
                            "\305\124\304\125\244\126\243\001\001\000\002\001\001" +
                            "\000\140\002\160\003\156\005\246\006\154\007\213\010" +
                            "\212\011\223\012\222\022\171\023\170\024\272\025\271" +
                            "\026\236\027\235\031\u0228\032\302\041\153\042\152\043" +
                            "\300\044\277\045\310\046\307\047\255\050\253\054\261" +
                            "\055\070\060\203\061\202\062\174\063\172\064\226\065" +
                            "\225\066\176\067\175\071\211\072\210\074\240\075\237" +
                            "\104\216\117\221\120\220\121\252\122\250\123\305\124" +
                            "\304\125\244\126\243\001\001\000\002\001\001\000\012" +
                            "\015\u022e\054\115\055\070\056\u01f8\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\010\054\115" +
                            "\055\070\056\u0224\001\001\000\002\001\001\000\140\002" +
                            "\160\003\156\005\246\006\154\007\213\010\212\011\223" +
                            "\012\222\022\171\023\170\024\272\025\271\026\236\027" +
                            "\235\031\u0230\032\302\041\153\042\152\043\300\044\277" +
                            "\045\310\046\307\047\255\050\253\054\261\055\070\060" +
                            "\203\061\202\062\174\063\172\064\226\065\225\066\176" +
                            "\067\175\071\211\072\210\074\240\075\237\104\216\117" +
                            "\221\120\220\121\252\122\250\123\305\124\304\125\244" +
                            "\126\243\001\001\000\002\001\001\000\140\002\160\003" +
                            "\156\005\246\006\154\007\213\010\212\011\223\012\222" +
                            "\022\171\023\170\024\272\025\271\026\236\027\235\031" +
                            "\u0232\032\302\041\153\042\152\043\300\044\277\045\310" +
                            "\046\307\047\255\050\253\054\261\055\070\060\203\061" +
                            "\202\062\174\063\172\064\226\065\225\066\176\067\175" +
                            "\071\211\072\210\074\240\075\237\104\216\117\221\120" +
                            "\220\121\252\122\250\123\305\124\304\125\244\126\243" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\140\002\160\003\156\005\246\006\154\007\213" +
                            "\010\212\011\223\012\222\022\171\023\170\024\272\025" +
                            "\271\026\236\027\235\031\u0236\032\302\041\153\042\152" +
                            "\043\300\044\277\045\310\046\307\047\255\050\253\054" +
                            "\261\055\070\060\203\061\202\062\174\063\172\064\226" +
                            "\065\225\066\176\067\175\071\211\072\210\074\240\075" +
                            "\237\104\216\117\221\120\220\121\252\122\250\123\305" +
                            "\124\304\125\244\126\243\001\001\000\002\001\001\000" +
                            "\140\002\160\003\156\005\246\006\154\007\213\010\212" +
                            "\011\223\012\222\022\171\023\170\024\272\025\271\026" +
                            "\236\027\235\031\u0238\032\302\041\153\042\152\043\300" +
                            "\044\277\045\310\046\307\047\255\050\253\054\261\055" +
                            "\070\060\203\061\202\062\174\063\172\064\226\065\225" +
                            "\066\176\067\175\071\211\072\210\074\240\075\237\104" +
                            "\216\117\221\120\220\121\252\122\250\123\305\124\304" +
                            "\125\244\126\243\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\034\005\246\006\u0262\010\362\023\356\025\271" +
                            "\032\302\050\u0112\054\261\055\070\072\364\075\237\104" +
                            "\216\126\243\001\001\000\002\001\001\000\006\032\335" +
                            "\035\u0264\001\001\000\002\001\001\000\026\005\246\006" +
                            "\u0268\010\362\025\271\032\302\054\261\055\070\072\u0128" +
                            "\104\216\126\243\001\001\000\032\005\246\006\u0267\010" +
                            "\362\023\356\025\271\032\302\054\261\055\070\072\364" +
                            "\075\u0127\104\216\126\243\001\001\000\002\001\001\000" +
                            "\002\001\001\000\126\002\160\003\156\005\246\006\u026d" +
                            "\007\213\010\212\011\223\012\222\022\171\023\170\024" +
                            "\272\025\271\032\302\041\u026c\042\u01ad\043\300\044\u026e" +
                            "\045\310\046\307\047\255\050\253\054\261\055\070\060" +
                            "\203\061\202\062\174\063\172\066\176\067\175\071\211" +
                            "\072\210\074\240\075\237\104\216\117\221\120\220\121" +
                            "\252\122\250\123\305\124\304\125\244\126\243\001\001" +
                            "\000\052\005\246\006\u026b\010\362\012\u017f\023\356\025" +
                            "\271\032\302\050\351\054\261\055\070\061\u01ac\063\172" +
                            "\067\357\072\364\075\237\104\216\120\u017e\122\u0137\124" +
                            "\u0186\126\243\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\122\002\160\003" +
                            "\156\005\246\006\u0270\007\213\010\212\011\223\012\222" +
                            "\022\171\023\170\024\272\025\271\032\302\043\u0271\044" +
                            "\u01b1\045\u0272\046\u01b0\047\255\050\253\054\261\055\070" +
                            "\060\203\061\202\062\174\063\172\066\176\067\175\071" +
                            "\211\072\210\074\240\075\237\104\216\117\221\120\220" +
                            "\121\252\122\250\123\305\124\304\125\244\126\243\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\140\002\160\003" +
                            "\156\005\246\006\154\007\213\010\212\011\223\012\222" +
                            "\022\171\023\170\024\272\025\271\026\236\027\235\031" +
                            "\u0276\032\302\041\153\042\152\043\300\044\277\045\310" +
                            "\046\307\047\255\050\253\054\261\055\070\060\203\061" +
                            "\202\062\174\063\172\064\226\065\225\066\176\067\175" +
                            "\071\211\072\210\074\240\075\237\104\216\117\221\120" +
                            "\220\121\252\122\250\123\305\124\304\125\244\126\243" +
                            "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
                            "\160\003\156\005\246\006\154\007\213\010\212\011\223" +
                            "\012\222\022\171\023\170\024\272\025\271\026\236\027" +
                            "\235\031\u0279\032\302\041\153\042\152\043\300\044\277" +
                            "\045\310\046\307\047\255\050\253\054\261\055\070\060" +
                            "\203\061\202\062\174\063\172\064\226\065\225\066\176" +
                            "\067\175\071\211\072\210\074\240\075\237\104\216\117" +
                            "\221\120\220\121\252\122\250\123\305\124\304\125\244" +
                            "\126\243\001\001\000\002\001\001\000\140\002\160\003" +
                            "\156\005\246\006\154\007\213\010\212\011\223\012\222" +
                            "\022\171\023\170\024\272\025\271\026\236\027\235\031" +
                            "\u027b\032\302\041\153\042\152\043\300\044\277\045\310" +
                            "\046\307\047\255\050\253\054\261\055\070\060\203\061" +
                            "\202\062\174\063\172\064\226\065\225\066\176\067\175" +
                            "\071\211\072\210\074\240\075\237\104\216\117\221\120" +
                            "\220\121\252\122\250\123\305\124\304\125\244\126\243" +
                            "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
                            "\160\003\156\005\246\006\154\007\213\010\212\011\223" +
                            "\012\222\022\171\023\170\024\272\025\271\026\236\027" +
                            "\235\031\u027e\032\302\041\153\042\152\043\300\044\277" +
                            "\045\310\046\307\047\255\050\253\054\261\055\070\060" +
                            "\203\061\202\062\174\063\172\064\226\065\225\066\176" +
                            "\067\175\071\211\072\210\074\240\075\237\104\216\117" +
                            "\221\120\220\121\252\122\250\123\305\124\304\125\244" +
                            "\126\243\001\001\000\002\001\001\000\140\002\160\003" +
                            "\156\005\246\006\154\007\213\010\212\011\223\012\222" +
                            "\022\171\023\170\024\272\025\271\026\236\027\235\031" +
                            "\u0280\032\302\041\153\042\152\043\300\044\277\045\310" +
                            "\046\307\047\255\050\253\054\261\055\070\060\203\061" +
                            "\202\062\174\063\172\064\226\065\225\066\176\067\175" +
                            "\071\211\072\210\074\240\075\237\104\216\117\221\120" +
                            "\220\121\252\122\250\123\305\124\304\125\244\126\243" +
                            "\001\001\000\002\001\001\000\002\001\001\000\016\015" +
                            "\130\016\126\020\u0283\054\115\055\070\056\143\001\001" +
                            "\000\002\001\001\000\002\001\001\000\140\002\160\003" +
                            "\156\005\246\006\154\007\213\010\212\011\223\012\222" +
                            "\022\171\023\170\024\272\025\271\026\236\027\235\031" +
                            "\u0286\032\302\041\153\042\152\043\300\044\277\045\310" +
                            "\046\307\047\255\050\253\054\261\055\070\060\203\061" +
                            "\202\062\174\063\172\064\226\065\225\066\176\067\175" +
                            "\071\211\072\210\074\240\075\237\104\216\117\221\120" +
                            "\220\121\252\122\250\123\305\124\304\125\244\126\243" +
                            "\001\001\000\002\001\001\000\140\002\160\003\156\005" +
                            "\246\006\154\007\213\010\212\011\223\012\222\022\171" +
                            "\023\170\024\272\025\271\026\236\027\235\031\u0288\032" +
                            "\302\041\153\042\152\043\300\044\277\045\310\046\307" +
                            "\047\255\050\253\054\261\055\070\060\203\061\202\062" +
                            "\174\063\172\064\226\065\225\066\176\067\175\071\211" +
                            "\072\210\074\240\075\237\104\216\117\221\120\220\121" +
                            "\252\122\250\123\305\124\304\125\244\126\243\001\001" +
                            "\000\002\001\001\000\010\054\115\055\070\056\u028f\001" +
                            "\001\000\002\001\001\000\140\002\160\003\156\005\246" +
                            "\006\154\007\213\010\212\011\223\012\222\022\171\023" +
                            "\170\024\272\025\271\026\236\027\235\031\u028c\032\302" +
                            "\041\153\042\152\043\300\044\277\045\310\046\307\047" +
                            "\255\050\253\054\261\055\070\060\203\061\202\062\174" +
                            "\063\172\064\226\065\225\066\176\067\175\071\211\072" +
                            "\210\074\240\075\237\104\216\117\221\120\220\121\252" +
                            "\122\250\123\305\124\304\125\244\126\243\001\001\000" +
                            "\002\001\001\000\140\002\160\003\156\005\246\006\154" +
                            "\007\213\010\212\011\223\012\222\022\171\023\170\024" +
                            "\272\025\271\026\236\027\235\031\u028e\032\302\041\153" +
                            "\042\152\043\300\044\277\045\310\046\307\047\255\050" +
                            "\253\054\261\055\070\060\203\061\202\062\174\063\172" +
                            "\064\226\065\225\066\176\067\175\071\211\072\210\074" +
                            "\240\075\237\104\216\117\221\120\220\121\252\122\250" +
                            "\123\305\124\304\125\244\126\243\001\001\000\002\001" +
                            "\001\000\002\001\001\000\140\002\160\003\156\005\246" +
                            "\006\154\007\213\010\212\011\223\012\222\022\171\023" +
                            "\170\024\272\025\271\026\236\027\235\031\u0291\032\302" +
                            "\041\153\042\152\043\300\044\277\045\310\046\307\047" +
                            "\255\050\253\054\261\055\070\060\203\061\202\062\174" +
                            "\063\172\064\226\065\225\066\176\067\175\071\211\072" +
                            "\210\074\240\075\237\104\216\117\221\120\220\121\252" +
                            "\122\250\123\305\124\304\125\244\126\243\001\001\000" +
                            "\002\001\001\000\140\002\160\003\156\005\246\006\154" +
                            "\007\213\010\212\011\223\012\222\022\171\023\170\024" +
                            "\272\025\271\026\236\027\235\031\u0293\032\302\041\153" +
                            "\042\152\043\300\044\277\045\310\046\307\047\255\050" +
                            "\253\054\261\055\070\060\203\061\202\062\174\063\172" +
                            "\064\226\065\225\066\176\067\175\071\211\072\210\074" +
                            "\240\075\237\104\216\117\221\120\220\121\252\122\250" +
                            "\123\305\124\304\125\244\126\243\001\001\000\002\001" +
                            "\001\000\002\001\001\000\140\002\160\003\156\005\246" +
                            "\006\154\007\213\010\212\011\223\012\222\022\171\023" +
                            "\170\024\272\025\271\026\236\027\235\031\u0296\032\302" +
                            "\041\153\042\152\043\300\044\277\045\310\046\307\047" +
                            "\255\050\253\054\261\055\070\060\203\061\202\062\174" +
                            "\063\172\064\226\065\225\066\176\067\175\071\211\072" +
                            "\210\074\240\075\237\104\216\117\221\120\220\121\252" +
                            "\122\250\123\305\124\304\125\244\126\243\001\001\000" +
                            "\004\032\u0297\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\140\002\160\003\156\005\246\006" +
                            "\154\007\213\010\212\011\223\012\222\022\171\023\170" +
                            "\024\272\025\271\026\236\027\235\031\u029b\032\302\041" +
                            "\153\042\152\043\300\044\277\045\310\046\307\047\255" +
                            "\050\253\054\261\055\070\060\203\061\202\062\174\063" +
                            "\172\064\226\065\225\066\176\067\175\071\211\072\210" +
                            "\074\240\075\237\104\216\117\221\120\220\121\252\122" +
                            "\250\123\305\124\304\125\244\126\243\001\001\000\004" +
                            "\032\u029c\001\001\000\002\001\001\000\004\032\u029e\001" +
                            "\001\000\002\001\001\000\140\002\160\003\156\005\246" +
                            "\006\154\007\213\010\212\011\223\012\222\022\171\023" +
                            "\170\024\272\025\271\026\236\027\235\031\u02ac\032\302" +
                            "\041\153\042\152\043\300\044\277\045\310\046\307\047" +
                            "\255\050\253\054\261\055\070\060\203\061\202\062\174" +
                            "\063\172\064\226\065\225\066\176\067\175\071\211\072" +
                            "\210\074\240\075\237\104\216\117\221\120\220\121\252" +
                            "\122\250\123\305\124\304\125\244\126\243\001\001\000" +
                            "\016\015\130\016\126\020\u02a7\054\115\055\070\056\143" +
                            "\001\001\000\016\015\130\016\126\020\u02a2\054\115\055" +
                            "\070\056\143\001\001\000\002\001\001\000\002\001\001" +
                            "\000\140\002\160\003\156\005\246\006\154\007\213\010" +
                            "\212\011\223\012\222\022\171\023\170\024\272\025\271" +
                            "\026\236\027\235\031\u02a5\032\302\041\153\042\152\043" +
                            "\300\044\277\045\310\046\307\047\255\050\253\054\261" +
                            "\055\070\060\203\061\202\062\174\063\172\064\226\065" +
                            "\225\066\176\067\175\071\211\072\210\074\240\075\237" +
                            "\104\216\117\221\120\220\121\252\122\250\123\305\124" +
                            "\304\125\244\126\243\001\001\000\004\032\u02a6\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\140\002\160\003\156\005\246\006\154\007\213\010\212" +
                            "\011\223\012\222\022\171\023\170\024\272\025\271\026" +
                            "\236\027\235\031\u02aa\032\302\041\153\042\152\043\300" +
                            "\044\277\045\310\046\307\047\255\050\253\054\261\055" +
                            "\070\060\203\061\202\062\174\063\172\064\226\065\225" +
                            "\066\176\067\175\071\211\072\210\074\240\075\237\104" +
                            "\216\117\221\120\220\121\252\122\250\123\305\124\304" +
                            "\125\244\126\243\001\001\000\004\032\u02ab\001\001\000" +
                            "\002\001\001\000\004\032\u02ad\001\001\000\002\001\001" +
                            "\000\004\032\u02bb\001\001\000\002\001\001\000\006\054" +
                            "\u02b1\055\070\001\001\000\004\032\u02b2\001\001\000\002" +
                            "\001\001\000\016\015\130\016\126\020\u02b8\054\115\055" +
                            "\070\056\143\001\001\000\016\015\130\016\126\020\u02b5" +
                            "\054\115\055\070\056\143\001\001\000\002\001\001\000" +
                            "\004\032\u02b7\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\032\u02ba\001\001\000\002\001\001\000\002\001" +
                            "\001\000\016\015\130\016\126\020\u02c1\054\115\055\070" +
                            "\056\143\001\001\000\016\015\130\016\126\020\u02be\054" +
                            "\115\055\070\056\143\001\001\000\002\001\001\000\004" +
                            "\032\u02c0\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\032\u02c3\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\010\054" +
                            "\u036b\055\070\057\u036d\001\001\000\002\001\001\000\006" +
                            "\054\u0373\055\070\001\001\000\002\001\001\000\006\054" +
                            "\u0370\055\070\001\001\000\002\001\001\000\002\001\001" +
                            "\000\006\054\u0372\055\070\001\001\000\002\001\001\000" +
                            "\002\001\001\000\006\054\u0394\055\070\001\001\000\006" +
                            "\054\u0383\055\070\001\001\000\006\054\u0377\055\070\001" +
                            "\001\000\002\001\001\000\006\054\u0382\055\070\001\001" +
                            "\000\014\054\261\055\070\104\u037c\105\u037b\106\u037a\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\010\054\261\055\070\104\u037e\001\001\000\002\001" +
                            "\001\000\002\001\001\000\006\054\u0381\055\070\001\001" +
                            "\000\002\001\001\000\002\001\001\000\006\032\u0386\053" +
                            "\u0385\001\001\000\140\002\160\003\156\005\246\006\154" +
                            "\007\213\010\212\011\223\012\222\022\171\023\170\024" +
                            "\272\025\271\026\236\027\235\031\u0393\032\302\041\153" +
                            "\042\152\043\300\044\277\045\310\046\307\047\255\050" +
                            "\253\054\261\055\070\060\203\061\202\062\174\063\172" +
                            "\064\226\065\225\066\176\067\175\071\211\072\210\074" +
                            "\240\075\237\104\216\117\221\120\220\121\252\122\250" +
                            "\123\305\124\304\125\244\126\243\001\001\000\002\001" +
                            "\001\000\002\001\001\000\010\054\115\055\070\056\u038f" +
                            "\001\001\000\010\054\115\055\070\056\u0389\001\001\000" +
                            "\002\001\001\000\006\032\u0386\053\u038b\001\001\000\002" +
                            "\001\001\000\006\032\u0386\053\u038d\001\001\000\002\001" +
                            "\001\000\006\032\u0386\053\u0392\001\001\000\002\001\001" +
                            "\000\006\032\u0386\053\u0391\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
                            "\054\115\055\070\056\u0396\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\032\u039d\001\001" +
                            "\000\004\032\u039c\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\012\032\u03f1\054\u03f0\055\070" +
                            "\116\u03f2\001\001\000\004\116\u03a1\001\001\000\004\115" +
                            "\u03c7\001\001\000\004\077\u03a2\001\001\000\004\030\u03c4" +
                            "\001\001\000\010\112\u03a5\113\u03a8\114\u03a6\001\001\000" +
                            "\002\001\001\000\006\054\u03b6\055\070\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\010\112\u03a5\113\u03a8\114\u03b0\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\006\112\u03a5\113\u03b3\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\115\u03db\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\116\u03f8\001\001" +
                            "\000\004\116\u03f5\001\001\000\004\077\u03f3\001\001\000" +
                            "\004\030\u03f4\001\001\000\002\001\001\000\004\077\u03f6" +
                            "\001\001\000\004\030\u03f7\001\001\000\002\001\001\000" +
                            "\004\077\u03f9\001\001\000\004\030\u03fa\001\001\000\002" +
                            "\001\001\000\004\032\u03ff\001\001\000\004\032\u03fe\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\014\u0401\001\001\000\010\032\u0403\054\u0402\055" +
                            "\070\001\001\000\012\032\u0408\054\u0407\055\070\116\u0409" +
                            "\001\001\000\004\116\u0404\001\001\000\004\077\u0405\001" +
                            "\001\000\004\030\u0406\001\001\000\002\001\001\000\004" +
                            "\116\u040f\001\001\000\004\116\u040c\001\001\000\004\077" +
                            "\u040a\001\001\000\004\030\u040b\001\001\000\002\001\001" +
                            "\000\004\077\u040d\001\001\000\004\030\u040e\001\001\000" +
                            "\002\001\001\000\004\077\u0410\001\001\000\004\030\u0411" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\101\u0418\001\001\000\012\054\261\055\070" +
                            "\104\u041f\107\u0423\001\001\000\010\054\261\055\070\104" +
                            "\u0422\001\001\000\012\054\261\055\070\104\u041f\107\u041e" +
                            "\001\001\000\002\001\001\000\016\015\130\016\126\020" +
                            "\u041a\054\115\055\070\056\143\001\001\000\002\001\001" +
                            "\000\006\032\u041d\033\u041c\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
                            "\054\261\055\070\104\u0421\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    @Override
    public short[][] reduce_table() {return _reduce_table;}

    /** Instance of action encapsulation class. */
    protected CUP$CompParser$actions action_obj;

    /** Action encapsulation object initializer. */
    @Override
    protected void init_actions()
    {
        action_obj = new CUP$CompParser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    @Override
    public java_cup.runtime.Symbol do_action(
            int                        act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack            stack,
            int                        top)
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    @Override
    public int start_state() {return 0;}
    /** Indicates start production. */
    @Override
    public int start_production() {return 1;}

    /** <code>EOF</code> Symbol index. */
    @Override
    public int EOF_sym() {return 0;}

    /** <code>error</code> Symbol index. */
    @Override
    public int error_sym() {return 1;}




    public CompModule alloymodule=null;

    @Override public Symbol parse() throws java.lang.Exception {
        int act; // current action code
        Symbol lhs_sym = null; // the Symbol/stack element returned by a reduce
        short handle_size, lhs_sym_num; // information about production being reduced with
        boolean logging = AlloyCore.isDebug();
        production_tab = production_table();
        action_tab     = action_table();
        reduce_tab     = reduce_table();
        init_actions();
        user_init();
        // start
        cur_token = scan();
        stack.removeAllElements();
        stack.push(getSymbolFactory().startSymbol("START", 0, start_state()));
        tos = 0;
        for (_done_parsing = false; !_done_parsing; ) {
            act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);
            if (act > 0) { // "shift"; thus, we shift to the encoded state by pushing it on the stack
                if (logging) System.out.println("shift " + cur_token.sym);
                cur_token.parse_state = act-1;
                stack.push(cur_token);
                tos++;
                cur_token = scan();
            } else if (act<0) { // "reduce"
                if (logging) System.out.println("reduce " + ((-act)-1));
                lhs_sym = do_action((-act)-1, this, stack, tos);
                lhs_sym_num = production_tab[(-act)-1][0];
                handle_size = production_tab[(-act)-1][1];
                for (int i = 0; i < handle_size; i++)  {  stack.pop(); tos--; }
                act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);
                lhs_sym.parse_state = act;
                stack.push(lhs_sym);
                tos++;
            } else { // "error"
                if (logging) System.out.println("error");
                syntax_error(cur_token);
                done_parsing();
            }
        }
        return lhs_sym;
    }

    @Override
    public void syntax_error(Symbol x) throws Err {
        Map<Integer,String> ch = new LinkedHashMap<>();
        ch.put(CompSym.ARROW, "->");
        ch.put(CompSym.ANY_ARROW_SOME, "->");
        ch.put(CompSym.ANY_ARROW_ONE, "->");
        ch.put(CompSym.ANY_ARROW_LONE, "->");
        ch.put(CompSym.SOME_ARROW_ANY, "some");
        ch.put(CompSym.SOME_ARROW_SOME, "some");
        ch.put(CompSym.SOME_ARROW_ONE, "some");
        ch.put(CompSym.SOME_ARROW_LONE, "some");
        ch.put(CompSym.ONE_ARROW_ANY, "one");
        ch.put(CompSym.ONE_ARROW_SOME, "one");
        ch.put(CompSym.ONE_ARROW_ONE, "one");
        ch.put(CompSym.ONE_ARROW_LONE, "one");
        ch.put(CompSym.LONE_ARROW_ANY, "lone");
        ch.put(CompSym.LONE_ARROW_SOME, "lone");
        ch.put(CompSym.LONE_ARROW_ONE, "lone");
        ch.put(CompSym.LONE_ARROW_LONE, "lone");
        ch.put(CompSym.INTADD, "fun");
        ch.put(CompSym.INTSUB, "fun");
        ch.put(CompSym.INTMUL, "fun");
        ch.put(CompSym.INTDIV, "fun");
        ch.put(CompSym.INTREM, "fun");
        ch.put(CompSym.INTMIN, "fun");
        ch.put(CompSym.INTMAX, "fun");
        ch.put(CompSym.INTNEXT, "fun");
        ch.put(CompSym.TOTALORDER, "pred");
        ch.put(CompSym.ABSTRACT, "abstract");
        ch.put(CompSym.ALL, "all");
        ch.put(CompSym.ALL2, "all");
        ch.put(CompSym.AMPERSAND, "&");
        ch.put(CompSym.AND, "&&");
        ch.put(CompSym.AS, "as");
        ch.put(CompSym.ASSERT, "assert");
        ch.put(CompSym.AT, "@");
        ch.put(CompSym.BAR, "|");
        ch.put(CompSym.BUT, "but");
        ch.put(CompSym.CARET, "^");
        ch.put(CompSym.CHECK, "check");
        ch.put(CompSym.COLON, ":");
        ch.put(CompSym.COMMA, ", ");
        ch.put(CompSym.DISJ, "disj");
        ch.put(CompSym.DOMAIN, "<:");
        ch.put(CompSym.DOT, ".");
        ch.put(CompSym.ELSE, "else");
        ch.put(CompSym.ENUM, "enum");
        ch.put(CompSym.EQUALS, "=");
        ch.put(CompSym.EXACTLY, "exactly");
        ch.put(CompSym.EXH, "exh");
        ch.put(CompSym.EXPECT, "expect");
        ch.put(CompSym.EXTENDS, "extends");
        ch.put(CompSym.FACT, "fact");
        ch.put(CompSym.FOR, "for");
        ch.put(CompSym.FUN, "fun");
        ch.put(CompSym.GT, ">");
        ch.put(CompSym.GTE, ">=");
        ch.put(CompSym.HASH, "#");
        ch.put(CompSym.IDEN, "iden");
        ch.put(CompSym.IFF, "iff");
        ch.put(CompSym.IMPLIES, "=>");
        ch.put(CompSym.IN, "in");
        ch.put(CompSym.INT, "int");
        ch.put(CompSym.LBRACE, "{");
        ch.put(CompSym.LBRACKET, "[");
        ch.put(CompSym.LET, "let");
        ch.put(CompSym.LONE2, "lone");
        ch.put(CompSym.LONE, "lone");
        ch.put(CompSym.LPAREN, "(");
        ch.put(CompSym.LT, "<");
        ch.put(CompSym.LTE, "<=");
        ch.put(CompSym.MINUS, "-");
        ch.put(CompSym.MODULE, "module");
        ch.put(CompSym.NO2, "no");
        ch.put(CompSym.NO, "no");
        ch.put(CompSym.NONE, "none");
        ch.put(CompSym.NOT, "!");
        ch.put(CompSym.NOTEQUALS, "!");
        ch.put(CompSym.NOTGT, "!");
        ch.put(CompSym.NOTGTE, "!");
        ch.put(CompSym.NOTIN, "!");
        ch.put(CompSym.NOTLT, "!");
        ch.put(CompSym.NOTLTE, "!");
        ch.put(CompSym.ONE2, "one");
        ch.put(CompSym.ONE, "one");
        ch.put(CompSym.OPEN, "open");
        ch.put(CompSym.OR, "||");
        ch.put(CompSym.PART, "part");
        ch.put(CompSym.PLUS, "+");
        ch.put(CompSym.PLUSPLUS, "++");
        ch.put(CompSym.PRED, "pred");
        ch.put(CompSym.PRIVATE, "private");
        ch.put(CompSym.RANGE, ":>");
        ch.put(CompSym.RBRACE, "}");
        ch.put(CompSym.RBRACKET, "]");
        ch.put(CompSym.RPAREN, ")");
        ch.put(CompSym.RUN, "run");
        ch.put(CompSym.SEQ, "seq");
        ch.put(CompSym.SET, "set");
        ch.put(CompSym.SHL, "<<");
        ch.put(CompSym.SHR, ">>>");
        ch.put(CompSym.SHA, ">>");
        ch.put(CompSym.SIG, "sig");
        ch.put(CompSym.SIGINT, "Int");
        ch.put(CompSym.SLASH, "/");
        ch.put(CompSym.SOME2, "some");
        ch.put(CompSym.SOME, "some");
        ch.put(CompSym.STAR, "*");
        ch.put(CompSym.STRING, "String");
        ch.put(CompSym.SUM2, "sum");
        ch.put(CompSym.SUM, "sum");
        ch.put(CompSym.THIS, "this");
        ch.put(CompSym.TILDE, "~");
        ch.put(CompSym.UNIV, "univ");
        ch.put(CompSym.ID, "NAME");
        ch.put(CompSym.NUMBER, "NUMBER");
        ch.put(CompSym.STR, "STRING");
        ch.put(CompSym.WITH, "with"); // [HASLab] colorful Alloy
        ch.put(CompSym.PFEAT1,"\u2780" ); // [HASLab] colorful Alloy
        ch.put(CompSym.PFEAT2,"\u2781" ); // [HASLab] colorful Alloy
        ch.put(CompSym.PFEAT3,"\u2782" ); // [HASLab] colorful Alloy
        ch.put(CompSym.PFEAT4,"\u2783" ); // [HASLab] colorful Alloy
        ch.put(CompSym.PFEAT5,"\u2784" ); // [HASLab] colorful Alloy
        ch.put(CompSym.PFEAT6,"\u2785" ); // [HASLab] colorful Alloy
        ch.put(CompSym.PFEAT7,"\u2786" ); // [HASLab] colorful Alloy
        ch.put(CompSym.PFEAT8,"\u2787" ); // [HASLab] colorful Alloy
        ch.put(CompSym.PFEAT9,"\u2788" ); // [HASLab] colorful Alloy
        ch.put(CompSym.NFEAT1,"\u278A" ); // [HASLab] colorful Alloy
        ch.put(CompSym.NFEAT2,"\u278B" ); // [HASLab] colorful Alloy
        ch.put(CompSym.NFEAT3,"\u278C" ); // [HASLab] colorful Alloy
        ch.put(CompSym.NFEAT4,"\u278D" ); // [HASLab] colorful Alloy
        ch.put(CompSym.NFEAT5,"\u278E" ); // [HASLab] colorful Alloy
        ch.put(CompSym.NFEAT6,"\u278F" ); // [HASLab] colorful Alloy
        ch.put(CompSym.NFEAT7,"\u2790" ); // [HASLab] colorful Alloy
        ch.put(CompSym.NFEAT8,"\u2791" ); // [HASLab] colorful Alloy
        ch.put(CompSym.NFEAT9,"\u2792" ); // [HASLab] colorful Alloy
        TreeSet<String> list = new TreeSet<>();
        Pos p=Pos.UNKNOWN;
        if (x!=null && x.value instanceof Pos) p=(Pos)(x.value);
        else if (x!=null && x.value instanceof Expr) p=((Expr)(x.value)).pos;
        else if (x!=null) p=x.pos;
        if (!stack.empty()) for(Map.Entry<Integer,String> e:ch.entrySet()) {
            int key=e.getKey(), act=get_action(((Symbol)stack.peek()).parse_state, key);
            if (act==0) continue;
            try {
                if (act>0 || alloy_confirm(key)) list.add(e.getValue());
            } catch(Throwable ex) {
                // If the parser is really really confused, alloy_confirm() could fail with array out-of-bound exception, etc.
            }
        }
        String result="There are "+list.size()+" possible tokens that can appear here:\n";
        for(String item:list) result=result+item+" ";
        throw new ErrorSyntax(p, (list.size()!=0)?result:"");
    }

    private boolean alloy_confirm(int key) {
        int state = ((Symbol)stack.peek()).parse_state;
        Stack<Object> newstack=new Stack<>(); for(Object x:stack) newstack.push(x);
        while(true) {
            int act = get_action(state, key);
            if (act>0) return true;
            if (act==0) return false;
            int lhs_sym_num = production_tab[(-act)-1][0];
            int handle_size = production_tab[(-act)-1][1];
            for (int i = 0; i < handle_size; i++) { if (newstack.empty()) return false; newstack.pop(); }
            if (newstack.empty()) return false;
            if (newstack.peek() instanceof Symbol) state=((Symbol)newstack.peek()).parse_state;
            state=get_reduce(state, lhs_sym_num);
            newstack.push(null);
        }
    }

    static final String INT_LIB_NAME = "util" + java.io.File.separator + "integer";
    static CompModule alloy_parseStream (List<Object> seenDollar,
                                         Map<String,String> loaded, Map<String,String> fc, CompModule root,
                                         int lineOffset, String filename, String prefix, int initialResolutionMode) throws Err, FileNotFoundException, IOException {
        Reader isr=null;
        try {
            if (root==null && prefix.length()!=0) throw new ErrorFatal("Internal error (parse subfile with root==null)");
            if (root!=null && prefix.length()==0) throw new ErrorFatal("Internal error (parse topfile with root!=null)");
            CompModule u = new CompModule(root, filename, prefix);
            if (!filename.endsWith(INT_LIB_NAME + ".als"))
                u.addOpen(null, null, ExprVar.make(null, INT_LIB_NAME), null, ExprVar.make(null, "integer"));
            u.resolution = initialResolutionMode;
            String content = fc!=null ? fc.get(filename) : null;
            if (content==null && loaded!=null) content = loaded.get(filename);
            if (content==null) content = Util.readAll(filename);
            if (loaded!=null) loaded.put(filename,content);
            content = MarkdownHandler.strip(content);
            content = Util.convertLineBreak(content);
            isr = new StringReader(content);
            CompFilter s = new CompFilter(u, seenDollar, filename, lineOffset, new BufferedReader(isr));
            CompParser p = new CompParser(s);
            p.alloymodule=u;
            try {p.parse();} catch(Throwable ex) {if (ex instanceof Err) throw (Err)ex; throw new ErrorFatal("Parser Exception", ex);}
            return u;
        } finally {
            Util.close(isr);
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompParser$actions {


    /** This function is needed to handle a difficult parsing ambiguity.
     *
     * <p>
     * "some EXPR", "one EXPR", and "lone EXPR"
     * can be either formulas (saying the EXPR has at least 1, exactly 1, or at most 1 tuple),
     * or multiplicity constraints (saying something else has this multiplicity).
     *
     * <p>
     * So we let the parser generate the former by default.
     * And whenever we construct a Decl "x: y" object,
     * or an binary expression "x in y", or a function return type,
     * we call this method on y to convert it into a multiplicity constraint.
     *
     * <p>
     * This is safe, because in all 3 cases, a formula would be illegal.
     * So the first form is always wrong.
     *
     * <p>
     * And this is sufficient, because those are the only 3 places
     * where a mulitplicity constraint is allowed to appear.
     *
     * @return a newly formed multiplciity constraint (if this.op==SOME or LONE or ONE),
     * otherwise it just returns the original node.
     */
    private Expr mult(Expr x) throws Err {
        if (x instanceof ExprUnary) {
            ExprUnary y=(ExprUnary)x;
            if (y.op==ExprUnary.Op.SOME) return ExprUnary.Op.SOMEOF.make(y.pos, y.sub);
            if (y.op==ExprUnary.Op.LONE) return ExprUnary.Op.LONEOF.make(y.pos, y.sub);
            if (y.op==ExprUnary.Op.ONE)  return ExprUnary.Op.ONEOF.make(y.pos, y.sub);
        }
        return x;
    }
    private void nod(ExprVar name) throws Err {
        if (name.label.indexOf('$')>=0) throw new ErrorSyntax(name.pos, "The name cannot contain the '$' symbol.");
    }
    private void nod(List<ExprVar> names) throws Err {
        if (names!=null) for(ExprVar n:names) if (n!=null && n.label.indexOf('$')>=0) throw new ErrorSyntax(n.pos, "The name cannot contain the '$' symbol.");
    }
    // [HASLab] colorful Alloy, feature scope, not yet type checked
    private void c(boolean follow, ExprVar o, ExprVar x, ExprVar n, Expr e, List<CommandScope> s, ExprConstant c, FeatureScope f) throws Err {
        if (n!=null) nod(n);
        int bitwidth=(-1), maxseq=(-1), overall=(-1), expects=(c==null ? -1 : c.num);
        Pos p = o.pos.merge(n!=null ? n.span() : e.span());
        for(int i=s.size()-1; i>=0; i--) {
            Sig j=s.get(i).sig;  int k=s.get(i).startingScope;
            p=p.merge(j.pos);
            if (j.label.equals("univ")) { overall=k; s.remove(i); continue; }
            if (j.label.equals("int"))  { if (bitwidth>=0) throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once."); bitwidth=k; s.remove(i); continue; }
            if (j.label.equals("seq"))  { if (maxseq>=0) throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once."); maxseq=k; s.remove(i); continue; }
        }
        if (n!=null)
            parser.alloymodule.addCommand(follow, p, n, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x, f);
        else
            parser.alloymodule.addCommand(follow, p, e, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x, f);
    }
    private Expr t(Pos pos, Pos oldClosing, Expr left, Expr right, Pos close) throws Err {
        if (right instanceof ExprVar) {
            String n = ((ExprVar)right).label;
            if (n.equals("int"))             return ExprUnary.Op.CAST2INT.make(pos, left);
            if (n.equals("disj"))            return ExprList.makeDISJOINT(pos, close, Util.asList(left));
            if (n.equals("pred/totalOrder")) return ExprList.makeTOTALORDER(pos, close, Util.asList(left));
        }
        else if (right instanceof ExprList) {
            return ((ExprList)right).addArg(left);
        }
        return ExprBadJoin.make(pos, oldClosing, left, right);
    }

    private final CompParser parser;

    /** Constructor */
    CUP$CompParser$actions(CompParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$CompParser$do_action(
            int                        CUP$CompParser$act_num,
            java_cup.runtime.lr_parser CUP$CompParser$parser,
            java.util.Stack            CUP$CompParser$stack,
            int                        CUP$CompParser$top)
            throws java.lang.Exception
    {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$CompParser$result;

        /* select the action based on the action number */
        switch (CUP$CompParser$act_num)
        {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 517: // BaseExpr ::= LBRACE Declz RBRACE
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, ExprConstant.TRUE);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 516: // BaseExpr ::= LBRACE Declz SuperOrBar RBRACE
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 515: // BaseExpr ::= Super
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 514: // BaseExpr ::= AT Name
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(x); RESULT = ExprVar.make(o.merge(x.pos), "@"+x.label);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 513: // BaseExpr ::= SigRef
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 512: // BaseExpr ::= NFEAT9 Expr NFEAT9
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-9); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 511: // BaseExpr ::= NFEAT8 Expr NFEAT8
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-8); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 510: // BaseExpr ::= NFEAT7 Expr NFEAT7
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-7); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 509: // BaseExpr ::= NFEAT6 Expr NFEAT6
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-6); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 508: // BaseExpr ::= NFEAT5 Expr NFEAT5
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-5); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 507: // BaseExpr ::= NFEAT4 Expr NFEAT4
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-4); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 506: // BaseExpr ::= NFEAT3 Expr NFEAT3
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-3); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 505: // BaseExpr ::= NFEAT2 Expr NFEAT2
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-2); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 504: // BaseExpr ::= NFEAT1 Expr NFEAT1
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-1); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 503: // BaseExpr ::= PFEAT9 Expr PFEAT9
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(9); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 502: // BaseExpr ::= PFEAT8 Expr PFEAT8
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(8); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 501: // BaseExpr ::= PFEAT7 Expr PFEAT7
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(7); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 500: // BaseExpr ::= PFEAT6 Expr PFEAT6
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(6); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 499: // BaseExpr ::= PFEAT5 Expr PFEAT5
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(5); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 498: // BaseExpr ::= PFEAT4 Expr PFEAT4
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(4); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 497: // BaseExpr ::= PFEAT3 Expr PFEAT3
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(3); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 496: // BaseExpr ::= PFEAT2 Expr PFEAT2
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(2); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 495: // BaseExpr ::= PFEAT1 Expr PFEAT1
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(1); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 494: // BaseExpr ::= LPAREN Expr RPAREN
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 493: // BaseExpr ::= INTNEXT
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprConstant.Op.NEXT.make(o, 0);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 492: // BaseExpr ::= INTMAX
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprConstant.Op.MAX.make(o, 0);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 491: // BaseExpr ::= INTMIN
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprConstant.Op.MIN.make(o, 0);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 490: // BaseExpr ::= THIS
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(o, "this");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 489: // BaseExpr ::= IDEN
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(o, "iden");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 488: // BaseExpr ::= STR
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 487: // BaseExpr ::= NUMBER
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 486: // UnopExprB ::= CARET UnopExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.CLOSURE  .make(o,b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 485: // UnopExprB ::= STAR UnopExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.RCLOSURE .make(o,b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 484: // UnopExprB ::= TILDE UnopExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.TRANSPOSE.make(o,b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 483: // UnopExprB ::= BaseExpr
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 482: // UnopExprA ::= CARET UnopExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.CLOSURE  .make(o,b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 481: // UnopExprA ::= STAR UnopExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.RCLOSURE .make(o,b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 480: // UnopExprA ::= TILDE UnopExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.TRANSPOSE.make(o,b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 479: // UnopExprA ::= CARET Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.CLOSURE  .make(o,b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 478: // UnopExprA ::= STAR Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.RCLOSURE .make(o,b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 477: // UnopExprA ::= TILDE Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.TRANSPOSE.make(o,b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 476: // DotExprB ::= BracketExprB DOT SUM
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 475: // DotExprB ::= BracketExprB DOT INT
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 474: // DotExprB ::= BracketExprB DOT TOTALORDER
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=t(o, null, a, ExprVar.make(b, "pred/totalOrder"), null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 473: // DotExprB ::= BracketExprB DOT DISJ
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=t(o, null, a, ExprVar.make(b, "disj"),            null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 472: // DotExprB ::= BracketExprB DOT UnopExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=t(o, null, a, b,                                  null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 471: // DotExprB ::= UnopExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 470: // DotExprA ::= BracketExprB DOT Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=t(o, null, a, b,                                  null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 469: // DotExprA ::= UnopExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 468: // BracketExprB ::= SUM LBRACKET Exprs RBRACKET
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 467: // BracketExprB ::= INT LBRACKET Exprs RBRACKET
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 466: // BracketExprB ::= TOTALORDER LBRACKET Exprs RBRACKET
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr aa=ExprVar.make(a, "pred/totalOrder"); for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 465: // BracketExprB ::= DISJ LBRACKET Exprs RBRACKET
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr aa=ExprVar.make(a, "disj");            for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 464: // BracketExprB ::= BracketExprB LBRACKET Exprs RBRACKET
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr aa=a;                                  for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 463: // BracketExprB ::= DotExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 462: // BracketExprA ::= DotExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprA",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 461: // RangeExprB ::= RangeExprB RANGE BracketExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.RANGE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 460: // RangeExprB ::= BracketExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 459: // RangeExprA ::= RangeExprB RANGE Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.RANGE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",55, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 458: // RangeExprA ::= BracketExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",55, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 457: // DomainExprB ::= DomainExprB DOMAIN RangeExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 456: // DomainExprB ::= RangeExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 455: // DomainExprA ::= DomainExprB DOMAIN Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 454: // DomainExprA ::= RangeExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 453: // RelationExprB ::= DomainExprB RelOp RelationExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=o.b.make(o.a, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 452: // RelationExprB ::= DomainExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 451: // RelationExprA ::= DomainExprB RelOp Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=o.b.make(o.a, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 450: // RelationExprA ::= DomainExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 449: // RelOp ::= LONE_ARROW_LONE
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.LONE_ARROW_LONE);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 448: // RelOp ::= LONE_ARROW_ONE
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.LONE_ARROW_ONE );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 447: // RelOp ::= LONE_ARROW_SOME
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.LONE_ARROW_SOME);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 446: // RelOp ::= LONE_ARROW_ANY
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.LONE_ARROW_ANY );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 445: // RelOp ::= ONE_ARROW_LONE
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.ONE_ARROW_LONE );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 444: // RelOp ::= ONE_ARROW_ONE
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.ONE_ARROW_ONE  );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 443: // RelOp ::= ONE_ARROW_SOME
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.ONE_ARROW_SOME );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 442: // RelOp ::= ONE_ARROW_ANY
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.ONE_ARROW_ANY  );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 441: // RelOp ::= SOME_ARROW_LONE
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.SOME_ARROW_LONE);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 440: // RelOp ::= SOME_ARROW_ONE
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.SOME_ARROW_ONE );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 439: // RelOp ::= SOME_ARROW_SOME
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.SOME_ARROW_SOME);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 438: // RelOp ::= SOME_ARROW_ANY
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.SOME_ARROW_ANY );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 437: // RelOp ::= ANY_ARROW_LONE
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.ANY_ARROW_LONE );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 436: // RelOp ::= ANY_ARROW_ONE
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.ANY_ARROW_ONE  );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 435: // RelOp ::= ANY_ARROW_SOME
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.ANY_ARROW_SOME );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 434: // RelOp ::= ARROW
            {
                Pair<Pos,ExprBinary.Op> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Pair<>(o, ExprBinary.Op.ARROW          );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 433: // IntersectExprB ::= IntersectExprB AMPERSAND RelationExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",38, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 432: // IntersectExprB ::= RelationExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",38, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 431: // IntersectExprA ::= IntersectExprB AMPERSAND Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",37, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 430: // IntersectExprA ::= RelationExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",37, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 429: // OverrideExprB ::= OverrideExprB PLUSPLUS IntersectExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 428: // OverrideExprB ::= IntersectExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 427: // OverrideExprA ::= OverrideExprB PLUSPLUS Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 426: // OverrideExprA ::= IntersectExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 425: // NumUnopExprB ::= INT NumUnopExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 424: // NumUnopExprB ::= SUM NumUnopExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 423: // NumUnopExprB ::= HASH NumUnopExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.CARDINALITY.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 422: // NumUnopExprB ::= OverrideExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 421: // NumUnopExprA ::= INT NumUnopExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 420: // NumUnopExprA ::= SUM NumUnopExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 419: // NumUnopExprA ::= HASH NumUnopExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.CARDINALITY.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 418: // NumUnopExprA ::= INT Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 417: // NumUnopExprA ::= SUM Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 416: // NumUnopExprA ::= HASH Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.CARDINALITY.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 415: // NumUnopExprA ::= OverrideExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 414: // MulExprB ::= MulExprB INTREM NumUnopExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.REM       .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 413: // MulExprB ::= MulExprB INTDIV NumUnopExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.DIV       .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 412: // MulExprB ::= MulExprB INTMUL NumUnopExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.MUL       .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 411: // MulExprB ::= NumUnopExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 410: // MulExprA ::= MulExprB INTREM Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.REM       .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 409: // MulExprA ::= MulExprB INTDIV Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.DIV       .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 408: // MulExprA ::= MulExprB INTMUL Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.MUL       .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 407: // MulExprA ::= NumUnopExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 406: // UnionDiffExprB ::= UnionDiffExprB INTSUB MulExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 405: // UnionDiffExprB ::= UnionDiffExprB INTADD MulExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 404: // UnionDiffExprB ::= UnionDiffExprB MINUS MulExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.MINUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 403: // UnionDiffExprB ::= UnionDiffExprB PLUS MulExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.PLUS .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 402: // UnionDiffExprB ::= MulExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 401: // UnionDiffExprA ::= UnionDiffExprB INTSUB Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 400: // UnionDiffExprA ::= UnionDiffExprB INTADD Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 399: // UnionDiffExprA ::= UnionDiffExprB MINUS Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.MINUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 398: // UnionDiffExprA ::= UnionDiffExprB PLUS Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.PLUS .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 397: // UnionDiffExprA ::= MulExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 396: // ShiftExprB ::= ShiftExprB SHA UnionDiffExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.SHA.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 395: // ShiftExprB ::= ShiftExprB SHR UnionDiffExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.SHR.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 394: // ShiftExprB ::= ShiftExprB SHL UnionDiffExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.SHL.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 393: // ShiftExprB ::= UnionDiffExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 392: // ShiftExprA ::= ShiftExprB SHA Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.SHA.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 391: // ShiftExprA ::= ShiftExprB SHR Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.SHR.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 390: // ShiftExprA ::= ShiftExprB SHL Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.SHL.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 389: // ShiftExprA ::= UnionDiffExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 388: // CompareExprB ::= ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 387: // CompareExprB ::= SEQ ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o,"seq/Int"), b); parser.alloymodule.addSeq(o);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 386: // CompareExprB ::= SET ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.SETOF.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 385: // CompareExprB ::= ONE ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.ONE  .make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 384: // CompareExprB ::= LONE ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.LONE .make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 383: // CompareExprB ::= SOME ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.SOME .make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 382: // CompareExprB ::= NO ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.NO   .make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 381: // CompareExprB ::= ALL ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\".");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 380: // CompareExprB ::= CompareExprB NOTGTE ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 379: // CompareExprB ::= CompareExprB NOTLTE ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 378: // CompareExprB ::= CompareExprB NOTGT ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 377: // CompareExprB ::= CompareExprB NOTLT ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 376: // CompareExprB ::= CompareExprB NOTEQUALS ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 375: // CompareExprB ::= CompareExprB NOTIN ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 374: // CompareExprB ::= CompareExprB GTE ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 373: // CompareExprB ::= CompareExprB LTE ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 372: // CompareExprB ::= CompareExprB GT ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.GT        .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 371: // CompareExprB ::= CompareExprB LT ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.LT        .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 370: // CompareExprB ::= CompareExprB EQUALS ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 369: // CompareExprB ::= CompareExprB IN ShiftExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 368: // CompareExprA ::= ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 367: // CompareExprA ::= SEQ ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o, "seq/Int"), b); parser.alloymodule.addSeq(o);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 366: // CompareExprA ::= SET ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.SETOF.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 365: // CompareExprA ::= ONE ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.ONE  .make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 364: // CompareExprA ::= LONE ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.LONE .make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 363: // CompareExprA ::= SOME ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.SOME .make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 362: // CompareExprA ::= NO ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.NO   .make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 361: // CompareExprA ::= ALL ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\".");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 360: // CompareExprA ::= CompareExprB NOTGTE ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 359: // CompareExprA ::= CompareExprB NOTLTE ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 358: // CompareExprA ::= CompareExprB NOTGT ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 357: // CompareExprA ::= CompareExprB NOTLT ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 356: // CompareExprA ::= CompareExprB NOTEQUALS ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 355: // CompareExprA ::= CompareExprB NOTIN ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 354: // CompareExprA ::= CompareExprB GTE ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 353: // CompareExprA ::= CompareExprB LTE ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 352: // CompareExprA ::= CompareExprB GT ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.GT        .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 351: // CompareExprA ::= CompareExprB LT ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.LT        .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 350: // CompareExprA ::= CompareExprB EQUALS ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 349: // CompareExprA ::= CompareExprB IN ShiftExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 348: // NegExprB ::= NOT NegExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.NOT.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 347: // NegExprB ::= CompareExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 346: // NegExprA ::= NOT NegExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.NOT.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 345: // NegExprA ::= NOT Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.NOT.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 344: // NegExprA ::= CompareExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 343: // AndExprB ::= AndExprB AND NegExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.AND.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 342: // AndExprB ::= NegExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 341: // AndExprA ::= AndExprB AND Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.AND.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 340: // AndExprA ::= NegExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 339: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",36, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 338: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprITE.make(o,a,b,c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",36, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 337: // ImpliesExprCloseB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprITE.make(o,a,b,c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 336: // ImpliesExprCloseB ::= AndExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 335: // ImpliesExprB ::= ImpliesExprOpenB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 334: // ImpliesExprB ::= ImpliesExprCloseB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 333: // ImpliesExprOpenA ::= AndExprB IMPLIES Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 332: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprITE.make(o,a,b,c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 331: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 330: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprITE.make(o,a,b,c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 329: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprITE.make(o,a,b,c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 328: // ImpliesExprCloseA ::= AndExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 327: // ImpliesExprA ::= ImpliesExprOpenA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",31, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 326: // ImpliesExprA ::= ImpliesExprCloseA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",31, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 325: // EquivExprB ::= EquivExprB IFF ImpliesExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.IFF.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",21, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 324: // EquivExprB ::= ImpliesExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",21, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 323: // EquivExprA ::= EquivExprB IFF Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.IFF.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 322: // EquivExprA ::= ImpliesExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 321: // OrExprB ::= OrExprB OR EquivExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.OR.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 320: // OrExprB ::= EquivExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 319: // OrExprA ::= OrExprB OR Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.OR.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 318: // OrExprA ::= EquivExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 317: // Bind ::= SUM2 Declp SuperOrBar
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.SUM .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 316: // Bind ::= ONE2 Declp SuperOrBar
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.ONE .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 315: // Bind ::= LONE2 Declp SuperOrBar
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.LONE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 314: // Bind ::= SOME2 Declp SuperOrBar
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.SOME.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 313: // Bind ::= NO2 Declp SuperOrBar
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.NO  .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 312: // Bind ::= ALL2 Declp SuperOrBar
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.ALL .make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 311: // Bind ::= LET Let
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 310: // Expr ::= Bind
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 309: // Expr ::= OrExprB
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 308: // Expr ::= OrExprA
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 307: // Exprp ::= Exprp COMMA Expr
            {
                List<Expr> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Expr> a = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                a.add(b); RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 306: // Exprp ::= Expr
            {
                List<Expr> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(); RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 305: // Exprs ::= Exprp
            {
                List<Expr> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                List<Expr> x = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",28, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 304: // Exprs ::=
            {
                List<Expr> RESULT =null;
                RESULT=new ArrayList<>();
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",28, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 303: // SuperOrBar ::= Super
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",27, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 302: // SuperOrBar ::= BAR Expr
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",27, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 301: // SuperP ::= SuperP Expr
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprBinary.Op.AND.make(null, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",26, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 300: // SuperP ::= Expr
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",26, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 299: // Super ::= LBRACE RBRACE
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprConstant.Op.TRUE.make(a.merge(b), 0);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",24, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 298: // Super ::= LBRACE SuperP RBRACE
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprUnary.Op.NOOP.make(a.merge(b), x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",24, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 297: // SuperOpt ::= Super
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",25, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 296: // SuperOpt ::=
            {
                Expr RESULT =null;
                RESULT=null;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",25, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 295: // Let ::= Name EQUALS Expr COMMA Let
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                nod(a);
                if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
                if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
                RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 294: // Let ::= Name EQUALS Expr SuperOrBar
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                nod(a);
                if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
                if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
                RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 293: // Decls ::= COMMA Decls
            {
                List<Decl> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=y;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 292: // Decls ::= Declb COMMA Decls
            {
                List<Decl> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=y; RESULT.add(0,x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 291: // Decls ::= Declb
            {
                List<Decl> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(); RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 290: // Decls ::=
            {
                List<Decl> RESULT =null;
                RESULT=new ArrayList<>();
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 289: // Declp ::= Declb
            {
                List<Decl> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(); RESULT.add(y);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 288: // Declp ::= Declp COMMA Declb
            {
                List<Decl> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x; RESULT.add(y);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 287: // Declz ::= Decla
            {
                List<Decl> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(); RESULT.add(y);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 286: // Declz ::= Declz COMMA Decla
            {
                List<Decl> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x; RESULT.add(y);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 285: // Declb ::= Names EQUALS DISJ Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 284: // Declb ::= PRIVATE Names EQUALS DISJ Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 283: // Declb ::= PRIVATE DISJ Names EQUALS DISJ Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 282: // Declb ::= DISJ Names EQUALS DISJ Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 281: // Declb ::= EXH Names EQUALS DISJ Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                if (1==1) throw CompModule.hint(k, "exh");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 280: // Declb ::= PART Names EQUALS DISJ Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                if (1==1) throw CompModule.hint(k, "part");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 279: // Declb ::= Names EQUALS Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Decl(null, null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 278: // Declb ::= PRIVATE Names EQUALS Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Decl(p,    null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 277: // Declb ::= PRIVATE DISJ Names EQUALS Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 276: // Declb ::= DISJ Names EQUALS Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 275: // Declb ::= EXH Names EQUALS Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                if (1==1) throw CompModule.hint(k, "exh");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 274: // Declb ::= PART Names EQUALS Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                if (1==1) throw CompModule.hint(k, "part");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 273: // Declb ::= Decla
            {
                Decl RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 272: // Decla ::= Names COLON DISJ Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Decl(null, null, d,    a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 271: // Decla ::= PRIVATE Names COLON DISJ Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Decl(p,    null, d,    a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 270: // Decla ::= PRIVATE DISJ Names COLON DISJ Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Decl(p,    k,    d,    a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 269: // Decla ::= DISJ Names COLON DISJ Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Decl(null, k,    d,    a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 268: // Decla ::= EXH Names COLON DISJ Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                if (1==1) throw CompModule.hint(k, "exh");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 267: // Decla ::= PART Names COLON DISJ Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                if (1==1) throw CompModule.hint(k, "part");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 266: // Decla ::= Names COLON Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Decl(null, null, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 265: // Decla ::= PRIVATE Names COLON Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Decl(p,    null, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 264: // Decla ::= PRIVATE DISJ Names COLON Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Decl(p,    k,    null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 263: // Decla ::= DISJ Names COLON Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new Decl(null, k,    null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 262: // Decla ::= EXH Names COLON Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                if (1==1) throw CompModule.hint(k, "exh");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 261: // Decla ::= PART Names COLON Expr
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                if (1==1) throw CompModule.hint(k, "part");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 260: // Decla ::= NFEAT9 Decla NFEAT9
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-9); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 259: // Decla ::= NFEAT8 Decla NFEAT8
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-8); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 258: // Decla ::= NFEAT7 Decla NFEAT7
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-7); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 257: // Decla ::= NFEAT6 Decla NFEAT6
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-6); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 256: // Decla ::= NFEAT5 Decla NFEAT5
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-5); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 255: // Decla ::= NFEAT4 Decla NFEAT4
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-4); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 254: // Decla ::= NFEAT3 Decla NFEAT3
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-3); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 253: // Decla ::= NFEAT2 Decla NFEAT2
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-2); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 252: // Decla ::= NFEAT1 Decla NFEAT1
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(-1); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 251: // Decla ::= PFEAT9 Decla PFEAT9
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(9); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 250: // Decla ::= PFEAT8 Decla PFEAT8
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(8); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 249: // Decla ::= PFEAT7 Decla PFEAT7
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(7); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 248: // Decla ::= PFEAT6 Decla PFEAT6
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(6); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 247: // Decla ::= PFEAT5 Decla PFEAT5
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(5); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 246: // Decla ::= PFEAT4 Decla PFEAT4
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(4); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 245: // Decla ::= PFEAT3 Decla PFEAT3
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(3); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 244: // Decla ::= PFEAT2 Decla PFEAT2
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(2); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 243: // Decla ::= PFEAT1 Decla PFEAT1
            {
                Decl RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                x.paint(1); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 242: // Namex ::= Namex COMMA EXACTLY Name
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(b); a.add(null); a.add(b); RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 241: // Namex ::= Namex COMMA Name
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(b);              a.add(b); RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 240: // Namex ::= EXACTLY Name
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(x); RESULT=new ArrayList<>(); RESULT.add(null); RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 239: // Namex ::= Name
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(x); RESULT=new ArrayList<>();                   RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 238: // Names ::= Names COMMA Name
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(b); a.add(b); RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 237: // Names ::= Name
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(x); RESULT=new ArrayList<>(); RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 236: // NameHelper ::= NameHelper SLASH ID
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprVar.make(a.pos.merge(b.pos), a.label+"/"+b.label);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",43, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 235: // NameHelper ::= ID
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",43, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 234: // Name ::= SEQ SLASH NameHelper
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprVar.make(a.merge(b.pos),  "seq/"+b.label);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 233: // Name ::= THIS SLASH NameHelper
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprVar.make(a.merge(b.pos), "this/"+b.label);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 232: // Name ::= NameHelper
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 231: // SigRefu ::= SigRefu PLUS SigRef
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                a.add(b); RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 230: // SigRefu ::= SigRef
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(); RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 229: // SigRefp ::= SigRefp COMMA SigRef
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                a.add(b); RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 228: // SigRefp ::= SigRef
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(); RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 227: // SigRefs ::= SigRefp
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 226: // SigRefs ::=
            {
                List<ExprVar> RESULT =null;
                RESULT=new ArrayList<>();
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 225: // SigRef ::= NONE
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprVar.make(x, "none");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 224: // SigRef ::= SEQ SLASH SIGINT
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprVar.make(a.merge(b), "seq/Int");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 223: // SigRef ::= SIGINT
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprVar.make(x, "Int");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 222: // SigRef ::= STRING
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprVar.make(x, "String");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 221: // SigRef ::= UNIV
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=ExprVar.make(x, "univ");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 220: // SigRef ::= Name
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 219: // SigIn ::=
            {
                List<ExprVar> RESULT =null;
                RESULT=null;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 218: // SigIn ::= EQUALS SigRefu
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x;  x.add(ExprVar.make(a,"="));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 217: // SigIn ::= IN SigRefu
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=x;  x.add(ExprVar.make(a,"in"));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 216: // SigIn ::= EXTENDS SigRef
            {
                List<ExprVar> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(2); RESULT.add(x); RESULT.add(ExprVar.make(a, "extends"));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 215: // SigQuals ::= SigQual SigQuals
            {
                List<Pos> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                List<Pos> b = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a; for(int i=0;i<5;i++) if (a.get(i)==null) a.set(i,b.get(i)); else if (b.get(i)!=null) throw new ErrorSyntax(b.get(i), "The same qualifer cannot be specified more than once for the same sig.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 214: // SigQuals ::= SIG
            {
                List<Pos> RESULT =null;
                RESULT=new ArrayList<>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 213: // SigQual ::= PRIVATE
            {
                List<Pos> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 212: // SigQual ::= SOME
            {
                List<Pos> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 211: // SigQual ::= ONE
            {
                List<Pos> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(5); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 210: // SigQual ::= LONE
            {
                List<Pos> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(5); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 209: // SigQual ::= ABSTRACT
            {
                List<Pos> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(5); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 208: // Sig ::= SigQuals Names SigIn LBRACE Decls RBRACE SuperOpt
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                List<ExprVar> c = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                if (e==null) e = ExprConstant.Op.TRUE.make(o, 0);
                ExprVar cc = (c!=null && c.size()>0) ? c.remove(c.size()-1) : null;
                RESULT = new ArrayList<>(); // [HASLab] colorful Alloy
                for(ExprVar bb:b) {
                    Sig s = parser.alloymodule.addSig(bb.label, cc, c, d, e,
                            AttrType.WHERE   .makenull(bb.pos.merge(e==null ? o : e.span())),
                            AttrType.ABSTRACT.makenull(a.get(0)),
                            AttrType.LONE    .makenull(a.get(1)),
                            AttrType.ONE     .makenull(a.get(2)),
                            AttrType.SOME    .makenull(a.get(3)),
                            AttrType.PRIVATE .makenull(a.get(4)));
                    RESULT.add(s); // [HASLab] colorful Alloy
                }

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 207: // Sig ::= NFEAT9 Sig NFEAT9
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(-9); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 206: // Sig ::= NFEAT8 Sig NFEAT8
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(-8); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 205: // Sig ::= NFEAT7 Sig NFEAT7
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(-7); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 204: // Sig ::= NFEAT6 Sig NFEAT6
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(-6); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 203: // Sig ::= NFEAT5 Sig NFEAT5
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(-5); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 202: // Sig ::= NFEAT4 Sig NFEAT4
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(-4); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 201: // Sig ::= NFEAT3 Sig NFEAT3
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(-3); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 200: // Sig ::= NFEAT2 Sig NFEAT2
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(-2); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 199: // Sig ::= NFEAT1 Sig NFEAT1
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(-1); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 198: // Sig ::= PFEAT9 Sig PFEAT9
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(9); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 197: // Sig ::= PFEAT8 Sig PFEAT8
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(8); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 196: // Sig ::= PFEAT7 Sig PFEAT7
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(7); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 195: // Sig ::= PFEAT6 Sig PFEAT6
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(6); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 194: // Sig ::= PFEAT5 Sig PFEAT5
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(5); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 193: // Sig ::= PFEAT4 Sig PFEAT4
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(4); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 192: // Sig ::= PFEAT3 Sig PFEAT3
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(3); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 191: // Sig ::= PFEAT2 Sig PFEAT2
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(2); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 190: // Sig ::= PFEAT1 Sig PFEAT1
            {
                List<Sig> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<Sig> x = (List<Sig>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                for (Sig s : x) s.paint(1); RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 189: // Vis ::= PRIVATE
            {
                Pos RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 188: // Vis ::=
            {
                Pos RESULT =null;
                RESULT=null;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 187: // Predicate ::= Vis PRED SigRef DOT Name Super
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Func fun=parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , null, v); RESULT=fun;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 186: // Predicate ::= Vis PRED SigRef DOT Name LBRACKET Decls RBRACKET Super
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Func fun=parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); RESULT=fun;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 185: // Predicate ::= Vis PRED SigRef DOT Name LPAREN Decls RPAREN Super
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Func fun=parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); RESULT=fun;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 184: // Predicate ::= Vis PRED Name Super
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Func fun=parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , null, v); RESULT=fun;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 183: // Predicate ::= Vis PRED Name LBRACKET Decls RBRACKET Super
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Func fun=parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); RESULT=fun;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 182: // Predicate ::= Vis PRED Name LPAREN Decls RPAREN Super
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Func fun=parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); RESULT=fun;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 181: // Predicate ::= NFEAT9 Predicate NFEAT9
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-9); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 180: // Predicate ::= NFEAT8 Predicate NFEAT8
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-8); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 179: // Predicate ::= NFEAT7 Predicate NFEAT7
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-7); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 178: // Predicate ::= NFEAT6 Predicate NFEAT6
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-6); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 177: // Predicate ::= NFEAT5 Predicate NFEAT5
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-5); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 176: // Predicate ::= NFEAT4 Predicate NFEAT4
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-4); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 175: // Predicate ::= NFEAT3 Predicate NFEAT3
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-3); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 174: // Predicate ::= NFEAT2 Predicate NFEAT2
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-2); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 173: // Predicate ::= NFEAT1 Predicate NFEAT1
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-1); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 172: // Predicate ::= PFEAT9 Predicate PFEAT9
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(9); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 171: // Predicate ::= PFEAT8 Predicate PFEAT8
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(8); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 170: // Predicate ::= PFEAT7 Predicate PFEAT7
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(7); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 169: // Predicate ::= PFEAT6 Predicate PFEAT6
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(6); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 168: // Predicate ::= PFEAT5 Predicate PFEAT5
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(5); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 167: // Predicate ::= PFEAT4 Predicate PFEAT4
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(4); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 166: // Predicate ::= PFEAT3 Predicate PFEAT3
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(3); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 165: // Predicate ::= PFEAT2 Predicate PFEAT2
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(2); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 164: // Predicate ::= PFEAT1 Predicate PFEAT1
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(1); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 163: // Function ::= Vis FUN SigRef DOT Name COLON Expr Super
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Func fun=parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , mult(r), v);RESULT=fun;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 162: // Function ::= Vis FUN SigRef DOT Name LBRACKET Decls RBRACKET COLON Expr Super
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-10);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-10);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-9);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-9);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
                ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Func fun=parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v);RESULT=fun;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 161: // Function ::= Vis FUN SigRef DOT Name LPAREN Decls RPAREN COLON Expr Super
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-10);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-10);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-9);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-9);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
                ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Func fun=parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v);RESULT=fun;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 160: // Function ::= Vis FUN Name COLON Expr Super
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Func fun=parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , mult(r), v);RESULT=fun;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 159: // Function ::= Vis FUN Name LBRACKET Decls RBRACKET COLON Expr Super
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Func fun=parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v);RESULT=fun;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 158: // Function ::= Vis FUN Name LPAREN Decls RPAREN COLON Expr Super
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Func fun=parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v);RESULT=fun;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 157: // Function ::= NFEAT9 Function NFEAT9
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-9); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 156: // Function ::= NFEAT8 Function NFEAT8
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-8); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 155: // Function ::= NFEAT7 Function NFEAT7
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-7); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 154: // Function ::= NFEAT6 Function NFEAT6
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-6); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 153: // Function ::= NFEAT5 Function NFEAT5
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-5); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 152: // Function ::= NFEAT4 Function NFEAT4
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-4); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 151: // Function ::= NFEAT3 Function NFEAT3
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-3); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 150: // Function ::= NFEAT2 Function NFEAT2
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-2); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 149: // Function ::= NFEAT1 Function NFEAT1
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-1); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 148: // Function ::= PFEAT9 Function PFEAT9
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(9); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 147: // Function ::= PFEAT8 Function PFEAT8
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(8); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 146: // Function ::= PFEAT7 Function PFEAT7
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(7); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 145: // Function ::= PFEAT6 Function PFEAT6
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(6); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 144: // Function ::= PFEAT5 Function PFEAT5
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(5); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 143: // Function ::= PFEAT4 Function PFEAT4
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(4); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 142: // Function ::= PFEAT3 Function PFEAT3
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(3); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 141: // Function ::= PFEAT2 Function PFEAT2
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(2); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 140: // Function ::= PFEAT1 Function PFEAT1
            {
                Func RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Func p = (Func)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(1); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 139: // MacroBody ::= EQUALS Expr
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 138: // MacroBody ::= Super
            {
                Expr RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 137: // Macro ::= Vis LET Name MacroBody
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 136: // Macro ::= Vis LET Name LBRACKET RBRACKET MacroBody
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 135: // Macro ::= Vis LET Name LBRACKET Names RBRACKET MacroBody
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 134: // Macro ::= Vis LET Name LPAREN RPAREN MacroBody
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 133: // Macro ::= Vis LET Name LPAREN Names RPAREN MacroBody
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 132: // TypeNumber ::= NUMBER COLON NUMBER
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, Integer.MAX_VALUE, i.num);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 131: // TypeNumber ::= NUMBER DOT DOT NUMBER COLON NUMBER
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, b.num,             i.num);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 130: // TypeNumber ::= NUMBER DOT DOT NUMBER
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(b.pos), Sig.NONE, false, a.num, b.num,             1    );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 129: // TypeNumber ::= NUMBER
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new CommandScope(a.pos             , Sig.NONE, false, a.num, a.num,             1    );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 128: // TypeNumber ::= EXACTLY NUMBER COLON NUMBER
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, Integer.MAX_VALUE, i.num);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 127: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER COLON NUMBER
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, b.num,             i.num);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 126: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(b.pos), Sig.NONE, true,  a.num, b.num,             1    );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 125: // TypeNumber ::= EXACTLY NUMBER
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new CommandScope(    e.merge(a.pos), Sig.NONE, true,  a.num, a.num,             1    );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 124: // Typescope ::= TypeNumber NONE
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on none.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 123: // Typescope ::= TypeNumber STRING
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new CommandScope(a.pos.merge(b), new PrimSig("String", AttrType.WHERE.make(a.pos.merge(b))), a.isExact, a.startingScope, a.endingScope, a.increment);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 122: // Typescope ::= TypeNumber UNIV
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on univ.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 121: // Typescope ::= TypeNumber SEQ
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                Pos p = a.pos.merge(b);
                if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"seq\"");
                if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the number of sequence index has to be exact.");
                RESULT = new CommandScope(p, new PrimSig("seq", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 120: // Typescope ::= TypeNumber INT
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                Pos p = a.pos.merge(b);
                if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
                if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
                RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 119: // Typescope ::= TypeNumber SIGINT
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                Pos p = a.pos.merge(b);
                if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
                if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
                RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 118: // Typescope ::= TypeNumber Name
            {
                CommandScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                nod(b);
                RESULT = new CommandScope(a.pos.merge(b.pos), new PrimSig(b.label, AttrType.WHERE.make(a.pos.merge(b.pos))), a.isExact, a.startingScope, a.endingScope, a.increment);

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 117: // Typescopes ::= Typescopes COMMA Typescope
            {
                List<CommandScope> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<CommandScope> a = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                CommandScope b = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a; a.add(b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 116: // Typescopes ::= Typescope
            {
                List<CommandScope> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(); RESULT.add(a);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 115: // Featscope ::= Featscope COMMA NFEAT9
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(9)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-9);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 114: // Featscope ::= Featscope COMMA NFEAT8
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(8)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-8);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // Featscope ::= Featscope COMMA NFEAT7
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(7)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-7);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // Featscope ::= Featscope COMMA NFEAT6
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(6)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-6);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // Featscope ::= Featscope COMMA NFEAT5
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(5)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-5);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // Featscope ::= Featscope COMMA NFEAT4
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(4)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-4);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // Featscope ::= Featscope COMMA NFEAT3
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(3)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-3);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // Featscope ::= Featscope COMMA NFEAT2
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(2)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-2);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // Featscope ::= Featscope COMMA NFEAT1
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(1)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-1);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // Featscope ::= Featscope COMMA PFEAT9
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(-9)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(9);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // Featscope ::= Featscope COMMA PFEAT8
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(-8)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(8);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // Featscope ::= Featscope COMMA PFEAT7
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(-7)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(7);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // Featscope ::= Featscope COMMA PFEAT6
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(-6)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(6);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // Featscope ::= Featscope COMMA PFEAT5
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(-5)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(5);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // Featscope ::= Featscope COMMA PFEAT4
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(-4)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(4);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // Featscope ::= Featscope COMMA PFEAT3
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(-3)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(3);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // Featscope ::= Featscope COMMA PFEAT2
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(-2)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(2);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // Featscope ::= Featscope COMMA PFEAT1
            {
                List<Integer> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                if(a.contains(-1)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(1);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // Featscope ::= NFEAT9
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(-9);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // Featscope ::= NFEAT8
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(-8);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // Featscope ::= NFEAT7
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(-7);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // Featscope ::= NFEAT6
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(-6);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // Featscope ::= NFEAT5
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(-5);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // Featscope ::= NFEAT4
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(-4);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // Featscope ::= NFEAT3
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(-3);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // Featscope ::= NFEAT2
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(-2);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // Featscope ::= NFEAT1
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(-1);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // Featscope ::= PFEAT9
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(9);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // Featscope ::= PFEAT8
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(8);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // Featscope ::= PFEAT7
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(7);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // Featscope ::= PFEAT6
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(6);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // Featscope ::= PFEAT5
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(5);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // Featscope ::= PFEAT4
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(4);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // Featscope ::= PFEAT3
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(3);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // Featscope ::= PFEAT2
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(2);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // Featscope ::= PFEAT1
            {
                List<Integer> RESULT =null;
                RESULT=new ArrayList<>(); RESULT.add(1);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // Scope ::=
            {
                List<CommandScope> RESULT =null;
                RESULT=new ArrayList<>();
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // Scope ::= FOR Typescopes
            {
                List<CommandScope> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // Scope ::= FOR NUMBER BUT Typescopes
            {
                List<CommandScope> RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=b;                                  b.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // Scope ::= FOR NUMBER
            {
                List<CommandScope> RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new ArrayList<>(); RESULT.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // Product ::=
            {
                FeatureScope RESULT =null;
                RESULT=new FeatureScope(null,false,new ArrayList<Integer>());
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Product",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // Product ::= WITH Featscope
            {
                FeatureScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                List<Integer> b = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new FeatureScope(o,false,b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Product",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // Product ::= WITH EXACTLY PFEAT0
            {
                FeatureScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                RESULT=new FeatureScope(o,true,new ArrayList<Integer>());
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Product",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // Product ::= WITH EXACTLY Featscope
            {
                FeatureScope RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                List<Integer> b = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=new FeatureScope(o,true,b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Product",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // Expects ::= EXPECT NUMBER
            {
                ExprConstant RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT=a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // Expects ::=
            {
                ExprConstant RESULT =null;
                RESULT=null;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // Command ::= Command IMPLIES CommandPrefix Name Product Scope Expects
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(true ,o,null,n   ,null,s,c,p);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // Command ::= Command IMPLIES CommandPrefix Name Name Product Scope Expects
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(true ,o,x   ,n   ,null,s,c,p);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // Command ::= CommandPrefix Name Product Scope Expects
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(false,o,null,n   ,null,s,c,p);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // Command ::= CommandPrefix Name Name Product Scope Expects
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(false,o,x   ,n   ,null,s,c,p);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // Command ::= Command IMPLIES CommandPrefix Super Product Scope Expects
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(true ,o,null,null,e   ,s,c,p);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // Command ::= Command IMPLIES CommandPrefix Name Super Product Scope Expects
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(true ,o,x   ,null,e   ,s,c,p);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // Command ::= CommandPrefix Super Product Scope Expects
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(false,o,null,null,e   ,s,c,p);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // Command ::= CommandPrefix Name Super Product Scope Expects
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(false,o,x   ,null,e   ,s,c,p);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // CommandPrefix ::= RUN
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(r, "r");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // CommandPrefix ::= CHECK
            {
                ExprVar RESULT =null;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(c, "c");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // Fact ::= NFEAT9 Fact NFEAT9
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-9); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // Fact ::= NFEAT8 Fact NFEAT8
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-8); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // Fact ::= NFEAT7 Fact NFEAT7
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-7); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // Fact ::= NFEAT6 Fact NFEAT6
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-6); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // Fact ::= NFEAT5 Fact NFEAT5
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-5); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // Fact ::= NFEAT4 Fact NFEAT4
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-4); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // Fact ::= NFEAT3 Fact NFEAT3
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-3); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // Fact ::= NFEAT2 Fact NFEAT2
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-2); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // Fact ::= NFEAT1 Fact NFEAT1
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-1); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // Fact ::= PFEAT9 Fact PFEAT9
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(9); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // Fact ::= PFEAT8 Fact PFEAT8
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(8); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // Fact ::= PFEAT7 Fact PFEAT7
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(7); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // Fact ::= PFEAT6 Fact PFEAT6
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(6); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // Fact ::= PFEAT5 Fact PFEAT5
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(5); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // Fact ::= PFEAT4 Fact PFEAT4
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(4); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // Fact ::= PFEAT3 Fact PFEAT3
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(3); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // Fact ::= PFEAT2 Fact PFEAT2
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(2); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // Fact ::= PFEAT1 Fact PFEAT1
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(1); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // Fact ::= FACT STR Super
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr expr=parser.alloymodule.addFact      (o , n.string , e); RESULT=expr;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // Fact ::= FACT Name Super
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Expr expr=parser.alloymodule.addFact      (o , n.label  , e); RESULT=expr;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // Fact ::= FACT Super
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr expr=parser.alloymodule.addFact      (o , ""       , e); RESULT=expr;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Fact",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // Spec ::= Spec Fact
            {
                Object RESULT =null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // Assert ::= NFEAT9 Assert NFEAT9
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-9); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // Assert ::= NFEAT8 Assert NFEAT8
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-8); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // Assert ::= NFEAT7 Assert NFEAT7
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-7); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // Assert ::= NFEAT6 Assert NFEAT6
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-6); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // Assert ::= NFEAT5 Assert NFEAT5
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-5); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // Assert ::= NFEAT4 Assert NFEAT4
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-4); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // Assert ::= NFEAT3 Assert NFEAT3
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-3); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // Assert ::= NFEAT2 Assert NFEAT2
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-2); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // Assert ::= NFEAT1 Assert NFEAT1
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(-1); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // Assert ::= PFEAT9 Assert PFEAT9
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(9); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // Assert ::= PFEAT8 Assert PFEAT8
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(8); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // Assert ::= PFEAT7 Assert PFEAT7
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(7); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // Assert ::= PFEAT6 Assert PFEAT6
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(6); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // Assert ::= PFEAT5 Assert PFEAT5
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(5); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // Assert ::= PFEAT4 Assert PFEAT4
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(4); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // Assert ::= PFEAT3 Assert PFEAT3
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(3); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // Assert ::= PFEAT2 Assert PFEAT2
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(2); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // Assert ::= PFEAT1 Assert PFEAT1
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Expr p = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                p.paint(1); RESULT=p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // Assert ::= ASSERT STR Super
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr expr= parser.alloymodule.addAssertion (o , n.string , e,null);RESULT=expr;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // Assert ::= ASSERT Name Super
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); Expr expr= parser.alloymodule.addAssertion (o , n.label  , e,null); RESULT=expr;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // Assert ::= ASSERT Super
            {
                Expr RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr expr=  parser.alloymodule.addAssertion (o , ""       , e,null);  RESULT=expr;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Assert",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // Spec ::= Spec Assert
            {
                Object RESULT =null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // Spec ::=
            {
                Object RESULT =null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // Spec ::= Spec Command
            {
                Object RESULT =null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // Spec ::= Spec Macro
            {
                Object RESULT =null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // Spec ::= Spec Predicate
            {
                Object RESULT =null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // Spec ::= Spec Function
            {
                Object RESULT =null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // Spec ::= Spec Sig
            {
                Object RESULT =null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // Spec ::= Spec Vis ENUM Name LBRACE RBRACE
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, null, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // Spec ::= Spec Vis ENUM Name LBRACE Names RBRACE
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<ExprVar> n = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, n,    c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET AS Name
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, b,    c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(a);         parser.alloymodule.addOpen(o.merge(c),     p, a, b,    null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // Spec ::= Spec Vis OPEN Name AS Name
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, null, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // Spec ::= Spec Vis OPEN Name
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
                Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(a);         parser.alloymodule.addOpen(o.merge(a.pos), p, a, null, null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // Spec ::= Spec MODULE Name LBRACKET Namex RBRACKET
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n); nod(b); parser.alloymodule.addModelName(o.merge(r)     , n.label , b                       );
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // Spec ::= Spec MODULE Name
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                CUP$CompParser$stack.peek();
                CUP$CompParser$stack.peek();
                ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);         parser.alloymodule.addModelName(o.merge(n.pos) , n.label , new ArrayList<ExprVar>());
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= File EOF
            {
                Object RESULT =null;
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
                Object start_val = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
                RESULT = start_val;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$CompParser$parser.done_parsing();
            return CUP$CompParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // File ::= Spec
            {
                Object RESULT =null;
                parser.alloymodule.doneParsing();
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("File",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
            return CUP$CompParser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}

