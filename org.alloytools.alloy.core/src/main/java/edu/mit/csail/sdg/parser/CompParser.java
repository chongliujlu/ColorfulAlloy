
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 02 13:42:49 WEST 2019
//----------------------------------------------------

package edu.mit.csail.sdg.parser;

import java.util.Arrays;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import java_cup.runtime.*;
import org.alloytools.alloy.core.AlloyCore;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorFatal;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Pair;
import edu.mit.csail.sdg.alloy4.Util;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.ast.Attr.AttrType;
import edu.mit.csail.sdg.ast.FeatureScope;
import edu.mit.csail.sdg.ast.CommandScope;
import edu.mit.csail.sdg.ast.Decl;
import edu.mit.csail.sdg.ast.Browsable;
import edu.mit.csail.sdg.ast.Expr;
import edu.mit.csail.sdg.ast.ExprBadJoin;
import edu.mit.csail.sdg.ast.ExprITE;
import edu.mit.csail.sdg.ast.ExprLet;
import edu.mit.csail.sdg.ast.ExprBinary;
import edu.mit.csail.sdg.ast.ExprList;
import edu.mit.csail.sdg.ast.ExprConstant;
import edu.mit.csail.sdg.ast.ExprQt;
import edu.mit.csail.sdg.ast.ExprUnary;
import edu.mit.csail.sdg.ast.ExprVar;
import edu.mit.csail.sdg.ast.Sig;
import edu.mit.csail.sdg.ast.Sig.PrimSig;
import edu.mit.csail.sdg.ast.Func;
import edu.mit.csail.sdg.alloy4.ErrorColor;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 02 13:42:49 WEST 2019
  */
public class CompParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01bd\000\002\110\003\000\002\002\004\000\002\111" +
    "\005\000\002\111\010\000\002\111\006\000\002\111\010" +
    "\000\002\111\011\000\002\111\013\000\002\111\011\000" +
    "\002\111\010\000\002\111\004\000\002\111\004\000\002" +
    "\111\004\000\002\111\002\000\002\112\005\000\002\112" +
    "\005\000\002\112\005\000\002\112\005\000\002\112\005" +
    "\000\002\112\005\000\002\112\005\000\002\112\005\000" +
    "\002\112\005\000\002\112\005\000\002\112\005\000\002" +
    "\112\005\000\002\112\005\000\002\112\005\000\002\112" +
    "\005\000\002\112\005\000\002\112\005\000\002\112\005" +
    "\000\002\112\004\000\002\112\005\000\002\112\005\000" +
    "\002\112\004\000\002\112\005\000\002\112\005\000\002" +
    "\112\003\000\002\112\003\000\002\112\003\000\002\014" +
    "\003\000\002\014\003\000\002\013\010\000\002\013\007" +
    "\000\002\013\012\000\002\013\011\000\002\013\010\000" +
    "\002\013\007\000\002\013\012\000\002\013\011\000\002" +
    "\030\002\000\002\030\004\000\002\117\005\000\002\117" +
    "\005\000\002\117\004\000\002\117\002\000\002\077\004" +
    "\000\002\077\006\000\002\077\004\000\002\077\002\000" +
    "\002\116\003\000\002\116\003\000\002\116\003\000\002" +
    "\116\003\000\002\116\003\000\002\116\003\000\002\116" +
    "\003\000\002\116\003\000\002\116\003\000\002\116\003" +
    "\000\002\116\003\000\002\116\003\000\002\116\003\000" +
    "\002\116\003\000\002\116\003\000\002\116\003\000\002" +
    "\116\003\000\002\116\003\000\002\116\005\000\002\116" +
    "\005\000\002\116\005\000\002\116\005\000\002\116\005" +
    "\000\002\116\005\000\002\116\005\000\002\116\005\000" +
    "\002\116\005\000\002\116\005\000\002\116\005\000\002" +
    "\116\005\000\002\116\005\000\002\116\005\000\002\116" +
    "\005\000\002\116\005\000\002\116\005\000\002\116\005" +
    "\000\002\115\003\000\002\115\005\000\002\114\004\000" +
    "\002\114\004\000\002\114\004\000\002\114\004\000\002" +
    "\114\004\000\002\114\004\000\002\114\004\000\002\113" +
    "\004\000\002\113\007\000\002\113\011\000\002\113\006" +
    "\000\002\113\003\000\002\113\006\000\002\113\010\000" +
    "\002\113\005\000\002\052\011\000\002\052\010\000\002" +
    "\052\011\000\002\052\010\000\002\052\006\000\002\053" +
    "\003\000\002\053\004\000\002\040\013\000\002\040\013" +
    "\000\002\040\010\000\002\040\015\000\002\040\015\000" +
    "\002\040\012\000\002\070\011\000\002\070\011\000\002" +
    "\070\006\000\002\070\013\000\002\070\013\000\002\070" +
    "\010\000\002\130\002\000\002\130\003\000\002\100\011" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\003\000\002\102\003\000\002\103\003\000\002" +
    "\103\004\000\002\101\004\000\002\101\004\000\002\101" +
    "\004\000\002\101\002\000\002\104\003\000\002\104\003" +
    "\000\002\104\003\000\002\104\003\000\002\104\005\000" +
    "\002\104\003\000\002\106\002\000\002\106\003\000\002" +
    "\105\003\000\002\105\005\000\002\107\003\000\002\107" +
    "\005\000\002\054\003\000\002\054\005\000\002\054\005" +
    "\000\002\055\003\000\002\055\005\000\002\056\003\000" +
    "\002\056\005\000\002\057\003\000\002\057\004\000\002" +
    "\057\005\000\002\057\006\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\015\007\000\002\015\006\000\002\015\005\000\002" +
    "\015\007\000\002\015\007\000\002\015\007\000\002\015" +
    "\010\000\002\015\007\000\002\015\006\000\002\016\003" +
    "\000\002\016\006\000\002\016\006\000\002\016\006\000" +
    "\002\016\007\000\002\016\006\000\002\016\005\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\010\000\002\016\007\000\002\016\006\000\002\021\005" +
    "\000\002\021\003\000\002\017\005\000\002\017\003\000" +
    "\002\020\002\000\002\020\003\000\002\020\005\000\002" +
    "\020\004\000\002\051\006\000\002\051\007\000\002\033" +
    "\002\000\002\033\003\000\002\032\005\000\002\032\004" +
    "\000\002\034\003\000\002\034\004\000\002\035\004\000" +
    "\002\035\003\000\002\036\002\000\002\036\003\000\002" +
    "\037\003\000\002\037\005\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\006\004\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\064\003\000\002" +
    "\064\005\000\002\065\003\000\002\065\005\000\002\026" +
    "\003\000\002\026\005\000\002\027\003\000\002\027\005" +
    "\000\002\041\003\000\002\041\003\000\002\043\003\000" +
    "\002\043\007\000\002\045\007\000\002\045\005\000\002" +
    "\043\007\000\002\045\005\000\002\042\003\000\002\042" +
    "\003\000\002\044\003\000\002\044\007\000\002\046\007" +
    "\000\002\046\005\000\002\002\003\000\002\002\005\000" +
    "\002\003\003\000\002\003\005\000\002\060\003\000\002" +
    "\060\004\000\002\060\004\000\002\061\003\000\002\061" +
    "\004\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\003\000\002\120\003\000\002\120\005" +
    "\000\002\120\005\000\002\120\005\000\002\121\003\000" +
    "\002\121\005\000\002\121\005\000\002\121\005\000\002" +
    "\124\003\000\002\124\005\000\002\124\005\000\002\124" +
    "\005\000\002\124\005\000\002\125\003\000\002\125\005" +
    "\000\002\125\005\000\002\125\005\000\002\125\005\000" +
    "\002\122\003\000\002\122\005\000\002\122\005\000\002" +
    "\122\005\000\002\123\003\000\002\123\005\000\002\123" +
    "\005\000\002\123\005\000\002\062\003\000\002\062\004" +
    "\000\002\062\004\000\002\062\004\000\002\062\004\000" +
    "\002\062\004\000\002\062\004\000\002\063\003\000\002" +
    "\063\004\000\002\063\004\000\002\063\004\000\002\066" +
    "\003\000\002\066\005\000\002\067\003\000\002\067\005" +
    "\000\002\047\003\000\002\047\005\000\002\050\003\000" +
    "\002\050\005\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\074\003\000\002\074\005\000\002\075" +
    "\003\000\002\075\005\000\002\022\003\000\002\022\005" +
    "\000\002\023\003\000\002\023\005\000\002\071\003\000" +
    "\002\071\005\000\002\072\003\000\002\072\005\000\002" +
    "\007\003\000\002\010\003\000\002\010\006\000\002\010" +
    "\006\000\002\010\006\000\002\010\006\000\002\010\006" +
    "\000\002\024\003\000\002\024\005\000\002\025\003\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\126\004\000\002\126" +
    "\004\000\002\126\004\000\002\126\004\000\002\126\004" +
    "\000\002\126\004\000\002\127\003\000\002\127\004\000" +
    "\002\127\004\000\002\127\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\005\004\000\002\005\003\000\002\005\006\000\002\005" +
    "\005" });

  /** Access to production table. */
  @Override
public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u039c\000\002\001\ufff4\000\004\002\u039e\001\002\000" +
    "\076\002\001\035\021\043\016\050\024\065\020\104\031" +
    "\111\027\125\026\134\013\141\043\147\030\153\010\164" +
    "\006\165\054\166\053\167\051\170\047\171\046\172\044" +
    "\173\040\174\036\175\052\176\050\177\045\200\042\201" +
    "\041\202\037\203\034\204\033\205\032\001\uff7c\000\066" +
    "\035\021\043\016\065\020\104\031\125\026\134\013\147" +
    "\030\153\010\164\006\165\054\166\053\167\051\170\047" +
    "\171\046\172\044\173\040\174\036\175\052\176\050\177" +
    "\045\200\042\201\041\202\037\203\034\204\033\205\032" +
    "\001\uff7c\000\002\001\uffdb\000\002\001\uff76\000\010\142" +
    "\076\160\072\207\066\001\002\000\016\035\021\104\031" +
    "\125\026\134\u038b\147\030\153\010\001\002\000\014\057" +
    "\uff7b\067\uff7b\102\uff7b\126\uff7b\133\uff7b\001\uff75\000\004" +
    "\075\u0378\001\ufff6\000\002\001\ufff5\000\014\100\330\142" +
    "\076\160\072\207\066\211\u0375\001\002\000\012\100\330" +
    "\142\076\160\072\207\066\001\002\000\014\100\330\142" +
    "\076\160\072\207\066\211\u0313\001\002\000\002\001\uff79" +
    "\000\002\001\uffda\000\014\057\u02ec\067\061\102\u02ed\126" +
    "\u02ee\133\060\001\002\000\002\001\uffd8\000\002\001\uffd9" +
    "\000\002\001\uff77\000\010\142\076\160\072\207\066\001" +
    "\002\000\002\001\uff74\000\002\001\uff78\000\066\035\021" +
    "\043\016\065\020\104\031\125\026\134\013\147\030\153" +
    "\010\164\006\165\054\166\053\167\051\170\047\171\046" +
    "\172\044\173\040\174\036\175\052\176\050\177\045\200" +
    "\042\201\041\202\037\203\034\204\033\205\032\001\uff7c" +
    "\000\066\035\021\043\016\065\020\104\031\125\026\134" +
    "\013\147\030\153\010\164\006\165\054\166\053\167\051" +
    "\170\047\171\046\172\044\173\040\174\036\175\052\176" +
    "\050\177\045\200\042\201\041\202\037\203\034\204\033" +
    "\205\032\001\uff7c\000\066\035\021\043\016\065\020\104" +
    "\031\125\026\134\013\147\030\153\010\164\006\165\054" +
    "\166\053\167\051\170\047\171\046\172\044\173\040\174" +
    "\036\175\052\176\050\177\045\200\042\201\041\202\037" +
    "\203\034\204\033\205\032\001\uff7c\000\002\001\ufff7\000" +
    "\066\035\021\043\016\065\020\104\031\125\026\134\013" +
    "\147\030\153\010\164\006\165\054\166\053\167\051\170" +
    "\047\171\046\172\044\173\040\174\036\175\052\176\050" +
    "\177\045\200\042\201\041\202\037\203\034\204\033\205" +
    "\032\001\uff7c\000\066\035\021\043\016\065\020\104\031" +
    "\125\026\134\013\147\030\153\010\164\006\165\054\166" +
    "\053\167\051\170\047\171\046\172\044\173\040\174\036" +
    "\175\052\176\050\177\045\200\042\201\041\202\037\203" +
    "\034\204\033\205\032\001\uff7c\000\066\035\021\043\016" +
    "\065\020\104\031\125\026\134\013\147\030\153\010\164" +
    "\006\165\054\166\053\167\051\170\047\171\046\172\044" +
    "\173\040\174\036\175\052\176\050\177\045\200\042\201" +
    "\041\202\037\203\034\204\033\205\032\001\uff7c\000\066" +
    "\035\021\043\016\065\020\104\031\125\026\134\013\147" +
    "\030\153\010\164\006\165\054\166\053\167\051\170\047" +
    "\171\046\172\044\173\040\174\036\175\052\176\050\177" +
    "\045\200\042\201\041\202\037\203\034\204\033\205\032" +
    "\001\uff7c\000\066\035\021\043\016\065\020\104\031\125" +
    "\026\134\013\147\030\153\010\164\006\165\054\166\053" +
    "\167\051\170\047\171\046\172\044\173\040\174\036\175" +
    "\052\176\050\177\045\200\042\201\041\202\037\203\034" +
    "\204\033\205\032\001\uff7c\000\002\001\uffd7\000\066\035" +
    "\021\043\016\065\020\104\031\125\026\134\013\147\030" +
    "\153\010\164\006\165\054\166\053\167\051\170\047\171" +
    "\046\172\044\173\040\174\036\175\052\176\050\177\045" +
    "\200\042\201\041\202\037\203\034\204\033\205\032\001" +
    "\uff7c\000\066\035\021\043\016\065\020\104\031\125\026" +
    "\134\013\147\030\153\010\164\006\165\054\166\053\167" +
    "\051\170\047\171\046\172\044\173\040\174\036\175\052" +
    "\176\050\177\045\200\042\201\041\202\037\203\034\204" +
    "\033\205\032\001\uff7c\000\066\035\021\043\016\065\020" +
    "\104\031\125\026\134\013\147\030\153\010\164\006\165" +
    "\054\166\053\167\051\170\047\171\046\172\044\173\040" +
    "\174\036\175\052\176\050\177\045\200\042\201\041\202" +
    "\037\203\034\204\033\205\032\001\uff7c\000\066\035\021" +
    "\043\016\065\020\104\031\125\026\134\013\147\030\153" +
    "\010\164\006\165\054\166\053\167\051\170\047\171\046" +
    "\172\044\173\040\174\036\175\052\176\050\177\045\200" +
    "\042\201\041\202\037\203\034\204\033\205\032\001\uff7c" +
    "\000\066\035\021\043\016\065\020\104\031\125\026\134" +
    "\013\147\030\153\010\164\006\165\054\166\053\167\051" +
    "\170\047\171\046\172\044\173\040\174\036\175\052\176" +
    "\050\177\045\200\042\201\041\202\037\203\034\204\033" +
    "\205\032\001\uff7c\000\066\035\021\043\016\065\020\104" +
    "\031\125\026\134\013\147\030\153\010\164\006\165\054" +
    "\166\053\167\051\170\047\171\046\172\044\173\040\174" +
    "\036\175\052\176\050\177\045\200\042\201\041\202\037" +
    "\203\034\204\033\205\032\001\uff7c\000\066\035\021\043" +
    "\016\065\020\104\031\125\026\134\013\147\030\153\010" +
    "\164\006\165\054\166\053\167\051\170\047\171\046\172" +
    "\044\173\040\174\036\175\052\176\050\177\045\200\042" +
    "\201\041\202\037\203\034\204\033\205\032\001\uff7c\000" +
    "\066\035\021\043\016\065\020\104\031\125\026\134\013" +
    "\147\030\153\010\164\006\165\054\166\053\167\051\170" +
    "\047\171\046\172\044\173\040\174\036\175\052\176\050" +
    "\177\045\200\042\201\041\202\037\203\034\204\033\205" +
    "\032\001\uff7c\000\066\035\021\043\016\065\020\104\031" +
    "\125\026\134\013\147\030\153\010\164\006\165\054\166" +
    "\053\167\051\170\047\171\046\172\044\173\040\174\036" +
    "\175\052\176\050\177\045\200\042\201\041\202\037\203" +
    "\034\204\033\205\032\001\uff7c\000\006\067\061\133\060" +
    "\001\002\000\004\165\057\001\002\000\002\001\ufff2\000" +
    "\020\114\070\142\064\150\071\155\063\160\072\162\067" +
    "\207\066\001\002\000\020\114\070\142\064\150\071\155" +
    "\063\160\072\162\067\207\066\001\002\000\010\051\u029c" +
    "\101\u029e\105\u029d\001\uff6e\000\002\001\uff6c\000\004\151" +
    "\u015c\001\002\000\004\151\101\001\uff62\000\002\001\uff5f" +
    "\000\002\001\uff6d\000\002\001\uff69\000\002\001\uff6b\000" +
    "\004\151\u0166\001\002\000\004\055\074\001\002\000\010" +
    "\142\076\160\072\207\066\001\002\000\010\051\103\101" +
    "\105\105\104\001\002\000\004\151\077\001\002\000\004" +
    "\207\066\001\002\000\004\151\101\001\uff60\000\004\207" +
    "\102\001\002\000\002\001\uff5e\000\162\031\175\032\221" +
    "\033\225\034\226\036\201\037\251\044\146\047\276\053" +
    "\312\072\306\073\173\077\242\100\202\102\303\103\272" +
    "\104\230\105\204\112\227\113\300\114\070\115\211\124" +
    "\170\125\231\142\255\143\254\150\071\152\236\153\273" +
    "\154\237\155\063\156\253\157\176\160\246\161\212\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\066\052\131\053\110\062" +
    "\134\130\141\134\107\142\076\160\072\164\137\165\136" +
    "\166\135\167\133\170\132\171\130\172\127\173\126\174" +
    "\124\175\122\176\121\177\120\200\117\201\116\202\115" +
    "\203\114\204\113\205\111\207\066\001\uff28\000\066\052" +
    "\131\053\110\062\134\130\141\134\107\142\076\160\072" +
    "\164\137\165\136\166\135\167\133\170\132\171\130\172" +
    "\127\173\126\174\124\175\122\176\121\177\120\200\117" +
    "\201\116\202\115\203\114\204\113\205\111\207\066\001" +
    "\uff28\000\004\137\u0291\001\002\000\012\053\u0286\142\076" +
    "\160\072\207\066\001\002\000\010\142\076\160\072\207" +
    "\066\001\002\000\064\053\u022a\062\u01f3\130\u01f4\134\u0203" +
    "\142\076\160\072\164\137\165\136\166\135\167\133\170" +
    "\132\171\130\172\127\173\126\174\124\175\122\176\121" +
    "\177\120\200\117\201\116\202\115\203\114\204\113\205" +
    "\111\207\066\001\002\000\002\001\uff5d\000\064\053\u022a" +
    "\062\u01f3\130\u01f4\134\u0203\142\076\160\072\164\137\165" +
    "\136\166\135\167\133\170\132\171\130\172\127\173\126" +
    "\174\124\175\122\176\121\177\120\200\117\201\116\202" +
    "\115\203\114\204\113\205\111\207\066\001\002\000\064" +
    "\053\u022a\062\u01f3\130\u01f4\134\u0203\142\076\160\072\164" +
    "\137\165\136\166\135\167\133\170\132\171\130\172\127" +
    "\173\126\174\124\175\122\176\121\177\120\200\117\201" +
    "\116\202\115\203\114\204\113\205\111\207\066\001\002" +
    "\000\064\053\u022a\062\u01f3\130\u01f4\134\u0203\142\076\160" +
    "\072\164\137\165\136\166\135\167\133\170\132\171\130" +
    "\172\127\173\126\174\124\175\122\176\121\177\120\200" +
    "\117\201\116\202\115\203\114\204\113\205\111\207\066" +
    "\001\002\000\064\053\u022a\062\u01f3\130\u01f4\134\u0203\142" +
    "\076\160\072\164\137\165\136\166\135\167\133\170\132" +
    "\171\130\172\127\173\126\174\124\175\122\176\121\177" +
    "\120\200\117\201\116\202\115\203\114\204\113\205\111" +
    "\207\066\001\002\000\064\053\u022a\062\u01f3\130\u01f4\134" +
    "\u0203\142\076\160\072\164\137\165\136\166\135\167\133" +
    "\170\132\171\130\172\127\173\126\174\124\175\122\176" +
    "\121\177\120\200\117\201\116\202\115\203\114\204\113" +
    "\205\111\207\066\001\002\000\064\053\u022a\062\u01f3\130" +
    "\u01f4\134\u0203\142\076\160\072\164\137\165\136\166\135" +
    "\167\133\170\132\171\130\172\127\173\126\174\124\175" +
    "\122\176\121\177\120\200\117\201\116\202\115\203\114" +
    "\204\113\205\111\207\066\001\002\000\064\053\u022a\062" +
    "\u01f3\130\u01f4\134\u0203\142\076\160\072\164\137\165\136" +
    "\166\135\167\133\170\132\171\130\172\127\173\126\174" +
    "\124\175\122\176\121\177\120\200\117\201\116\202\115" +
    "\203\114\204\113\205\111\207\066\001\002\000\064\053" +
    "\u022a\062\u01f3\130\u01f4\134\u0203\142\076\160\072\164\137" +
    "\165\136\166\135\167\133\170\132\171\130\172\127\173" +
    "\126\174\124\175\122\176\121\177\120\200\117\201\116" +
    "\202\115\203\114\204\113\205\111\207\066\001\002\000" +
    "\004\052\u027f\001\uff27\000\064\053\u022a\062\u01f3\130\u01f4" +
    "\134\u0203\142\076\160\072\164\137\165\136\166\135\167" +
    "\133\170\132\171\130\172\127\173\126\174\124\175\122" +
    "\176\121\177\120\200\117\201\116\202\115\203\114\204" +
    "\113\205\111\207\066\001\002\000\002\001\uff39\000\064" +
    "\053\u022a\062\u01f3\130\u01f4\134\u0203\142\076\160\072\164" +
    "\137\165\136\166\135\167\133\170\132\171\130\172\127" +
    "\173\126\174\124\175\122\176\121\177\120\200\117\201" +
    "\116\202\115\203\114\204\113\205\111\207\066\001\002" +
    "\000\064\053\u022a\062\u01f3\130\u01f4\134\u0203\142\076\160" +
    "\072\164\137\165\136\166\135\167\133\170\132\171\130" +
    "\172\127\173\126\174\124\175\122\176\121\177\120\200" +
    "\117\201\116\202\115\203\114\204\113\205\111\207\066" +
    "\001\002\000\064\053\u022a\062\u01f3\130\u01f4\134\u0203\142" +
    "\076\160\072\164\137\165\136\166\135\167\133\170\132" +
    "\171\130\172\127\173\126\174\124\175\122\176\121\177" +
    "\120\200\117\201\116\202\115\203\114\204\113\205\111" +
    "\207\066\001\002\000\066\052\131\053\110\062\134\130" +
    "\141\134\107\142\076\160\072\164\137\165\136\166\135" +
    "\167\133\170\132\171\130\172\127\173\126\174\124\175" +
    "\122\176\121\177\120\200\117\201\116\202\115\203\114" +
    "\204\113\205\111\207\066\001\uff28\000\064\053\u022a\062" +
    "\u01f3\130\u01f4\134\u0203\142\076\160\072\164\137\165\136" +
    "\166\135\167\133\170\132\171\130\172\127\173\126\174" +
    "\124\175\122\176\121\177\120\200\117\201\116\202\115" +
    "\203\114\204\113\205\111\207\066\001\002\000\064\053" +
    "\u022a\062\u01f3\130\u01f4\134\u0203\142\076\160\072\164\137" +
    "\165\136\166\135\167\133\170\132\171\130\172\127\173" +
    "\126\174\124\175\122\176\121\177\120\200\117\201\116" +
    "\202\115\203\114\204\113\205\111\207\066\001\002\000" +
    "\010\142\076\160\072\207\066\001\002\000\064\053\u022a" +
    "\062\u01f3\130\u01f4\134\u0203\142\076\160\072\164\137\165" +
    "\136\166\135\167\133\170\132\171\130\172\127\173\126" +
    "\174\124\175\122\176\121\177\120\200\117\201\116\202" +
    "\115\203\114\204\113\205\111\207\066\001\002\000\064" +
    "\053\u022a\062\u01f3\130\u01f4\134\u0203\142\076\160\072\164" +
    "\137\165\136\166\135\167\133\170\132\171\130\172\127" +
    "\173\126\174\124\175\122\176\121\177\120\200\117\201" +
    "\116\202\115\203\114\204\113\205\111\207\066\001\002" +
    "\000\064\053\u022a\062\u01f3\130\u01f4\134\u0203\142\076\160" +
    "\072\164\137\165\136\166\135\167\133\170\132\171\130" +
    "\172\127\173\126\174\124\175\122\176\121\177\120\200" +
    "\117\201\116\202\115\203\114\204\113\205\111\207\066" +
    "\001\002\000\010\051\u022c\052\143\060\u0275\001\002\000" +
    "\010\142\076\160\072\207\066\001\002\000\010\051\145" +
    "\052\143\060\144\001\002\000\010\142\076\160\072\207" +
    "\066\001\002\000\162\031\175\032\221\033\225\034\226" +
    "\036\201\037\251\044\146\047\276\053\u0272\072\306\073" +
    "\173\077\242\100\202\102\303\103\272\104\230\105\204" +
    "\112\227\113\300\114\070\115\211\124\170\125\231\142" +
    "\255\143\254\150\071\152\236\153\273\154\237\155\063" +
    "\156\253\157\176\160\246\161\212\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\162\031\175\032\221\033\225\034\226\036" +
    "\201\037\251\044\146\047\276\053\244\072\306\073\173" +
    "\077\242\100\202\102\303\103\272\104\230\105\204\112" +
    "\227\113\300\114\070\115\211\124\170\125\231\142\255" +
    "\143\254\150\071\152\236\153\273\154\237\155\063\156" +
    "\253\157\176\160\246\161\212\162\067\164\164\165\163" +
    "\166\162\167\161\170\160\171\157\172\156\173\154\174" +
    "\152\175\271\176\270\177\265\200\264\201\263\202\262" +
    "\203\261\204\260\205\256\207\066\210\224\211\214\001" +
    "\002\000\010\142\076\160\072\207\066\001\002\000\002" +
    "\001\uff06\000\002\001\uff08\000\002\001\uff14\000\162\031" +
    "\175\032\221\033\225\034\226\036\201\037\251\044\146" +
    "\047\276\053\312\072\306\073\173\077\242\100\202\102" +
    "\303\103\272\104\230\105\204\112\227\113\300\114\070" +
    "\115\211\124\170\125\231\142\255\143\254\150\071\152" +
    "\236\153\273\154\237\155\063\156\253\157\176\160\246" +
    "\161\212\162\067\164\164\165\163\166\162\167\161\170" +
    "\160\171\157\172\156\173\154\174\152\175\271\176\270" +
    "\177\265\200\264\201\263\202\262\203\261\204\260\205" +
    "\256\207\066\210\224\211\214\001\002\000\006\041\u0267" +
    "\075\u0266\001\ufefa\000\162\031\175\032\221\033\225\034" +
    "\226\036\201\037\251\044\146\047\276\053\312\072\306" +
    "\073\173\077\242\100\202\102\303\103\272\104\230\105" +
    "\204\112\227\113\300\114\070\115\211\124\170\125\231" +
    "\142\255\143\254\150\071\152\236\153\273\154\237\155" +
    "\063\156\253\157\176\160\246\161\212\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\002\001\uff02\000\162\031\175\032\221" +
    "\033\225\034\226\036\201\037\251\044\146\047\276\053" +
    "\312\072\306\073\173\077\242\100\202\102\303\103\272" +
    "\104\230\105\204\112\227\113\300\114\070\115\211\124" +
    "\170\125\231\142\255\143\254\150\071\152\236\153\273" +
    "\154\237\155\063\156\253\157\176\160\246\161\212\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\162\031\175\032\221\033" +
    "\225\034\226\036\201\037\251\044\146\047\276\053\312" +
    "\072\306\073\173\077\242\100\202\102\303\103\272\104" +
    "\230\105\204\112\227\113\300\114\070\115\211\124\170" +
    "\125\231\142\255\143\254\150\071\152\236\153\273\154" +
    "\237\155\063\156\253\157\176\160\246\161\212\162\067" +
    "\164\164\165\163\166\162\167\161\170\160\171\157\172" +
    "\156\173\154\174\152\175\271\176\270\177\265\200\264" +
    "\201\263\202\262\203\261\204\260\205\256\207\066\210" +
    "\224\211\214\001\002\000\162\031\175\032\221\033\225" +
    "\034\226\036\201\037\251\044\146\047\276\053\312\072" +
    "\306\073\173\077\242\100\202\102\303\103\272\104\230" +
    "\105\204\112\227\113\300\114\070\115\211\124\170\125" +
    "\231\142\255\143\254\150\071\152\236\153\273\154\237" +
    "\155\063\156\253\157\176\160\246\161\212\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\162\031\175\032\221\033\225\034" +
    "\226\036\201\037\251\044\146\047\276\053\312\072\306" +
    "\073\173\077\242\100\202\102\303\103\272\104\230\105" +
    "\204\112\227\113\300\114\070\115\211\124\170\125\231" +
    "\142\255\143\254\150\071\152\236\153\273\154\237\155" +
    "\063\156\253\157\176\160\246\161\212\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\162\031\175\032\221\033\225\034\226" +
    "\036\201\037\251\044\146\047\276\053\312\072\306\073" +
    "\173\077\242\100\202\102\303\103\272\104\230\105\204" +
    "\112\227\113\300\114\070\115\211\124\170\125\231\142" +
    "\255\143\254\150\071\152\236\153\273\154\237\155\063" +
    "\156\253\157\176\160\246\161\212\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\162\031\175\032\221\033\225\034\226\036" +
    "\201\037\251\044\146\047\276\053\312\072\306\073\173" +
    "\077\242\100\202\102\303\103\272\104\230\105\204\112" +
    "\227\113\300\114\070\115\211\124\170\125\231\142\255" +
    "\143\254\150\071\152\236\153\273\154\237\155\063\156" +
    "\253\157\176\160\246\161\212\162\067\164\164\165\163" +
    "\166\162\167\161\170\160\171\157\172\156\173\154\174" +
    "\152\175\271\176\270\177\265\200\264\201\263\202\262" +
    "\203\261\204\260\205\256\207\066\210\224\211\214\001" +
    "\002\000\162\031\175\032\221\033\225\034\226\036\201" +
    "\037\251\044\146\047\276\053\312\072\306\073\173\077" +
    "\242\100\202\102\303\103\272\104\230\105\204\112\227" +
    "\113\300\114\070\115\211\124\170\125\231\142\255\143" +
    "\254\150\071\152\236\153\273\154\237\155\063\156\253" +
    "\157\176\160\246\161\212\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\044\004\u011e\005\u0113\006\u011f\007\u0119\010\u011a\011" +
    "\u0121\012\u011c\013\u0116\014\u0122\015\u0118\016\u0115\017\u011b" +
    "\020\u0114\021\u011d\022\u0117\023\u0123\054\u0262\001\ufe86\000" +
    "\002\001\ufe88\000\002\001\ufeaf\000\064\053\110\062\134" +
    "\130\141\134\107\142\076\160\072\164\137\165\136\166" +
    "\135\167\133\170\132\171\130\172\127\173\126\174\124" +
    "\175\122\176\121\177\120\200\117\201\116\202\115\203" +
    "\114\204\113\205\111\207\066\001\002\000\002\001\ufeb3" +
    "\000\004\132\u025e\001\ufea4\000\002\001\ufe61\000\002\001" +
    "\ufeab\000\002\001\ufe5f\000\146\031\175\032\221\033\225" +
    "\034\226\037\251\044\146\047\276\053\312\072\306\073" +
    "\173\077\242\100\202\101\367\102\303\103\272\105\204" +
    "\112\227\114\070\124\170\142\064\150\071\152\236\154" +
    "\237\155\063\156\253\157\176\160\246\161\212\162\067" +
    "\164\164\165\163\166\162\167\161\170\160\171\157\172" +
    "\156\173\154\174\152\175\271\176\270\177\265\200\264" +
    "\201\263\202\262\203\261\204\260\205\256\207\066\210" +
    "\224\211\214\001\002\000\002\001\ufef4\000\002\001\ufef6" +
    "\000\126\031\175\032\221\033\225\034\226\044\146\047" +
    "\276\053\312\072\306\073\173\077\242\100\202\105\204" +
    "\114\070\142\064\150\071\154\237\155\063\157\176\160" +
    "\246\161\212\162\067\164\164\165\163\166\162\167\161" +
    "\170\160\171\157\172\156\173\154\174\152\175\271\176" +
    "\270\177\265\200\264\201\263\202\262\203\261\204\260" +
    "\205\256\207\066\210\224\211\214\001\002\000\172\031" +
    "\175\032\221\033\225\034\226\036\201\037\251\044\146" +
    "\047\276\053\u01f7\062\u01f3\072\306\073\173\077\242\100" +
    "\202\102\303\103\272\104\230\105\204\112\227\113\300" +
    "\114\070\115\211\124\170\125\231\130\u01f4\134\u0203\136" +
    "\334\142\255\143\254\150\071\152\236\153\273\154\237" +
    "\155\063\156\253\157\176\160\246\161\212\162\067\164" +
    "\u01f2\165\u01f1\166\u01f0\167\u01ef\170\u01ee\171\u01ed\172\u01ec" +
    "\173\u01eb\174\u01ea\175\u0202\176\u0201\177\u0200\200\u01ff\201" +
    "\u01fe\202\u01fd\203\u01fc\204\u01fb\205\u01f9\207\066\210\224" +
    "\211\214\001\002\000\002\001\uff45\000\162\031\175\032" +
    "\221\033\225\034\226\036\201\037\251\044\146\047\276" +
    "\053\312\072\306\073\173\077\242\100\202\102\303\103" +
    "\272\104\230\105\204\112\227\113\300\114\070\115\211" +
    "\124\170\125\231\142\255\143\254\150\071\152\236\153" +
    "\273\154\237\155\063\156\253\157\176\160\246\161\212" +
    "\162\067\164\164\165\163\166\162\167\161\170\160\171" +
    "\157\172\156\173\154\174\152\175\271\176\270\177\265" +
    "\200\264\201\263\202\262\203\261\204\260\205\256\207" +
    "\066\210\224\211\214\001\002\000\004\135\u01e6\001\ufe82" +
    "\000\002\001\ufe84\000\006\055\u01e4\101\372\001\ufe7e\000" +
    "\002\001\ufe80\000\162\031\175\032\221\033\225\034\226" +
    "\036\201\037\251\044\146\047\276\053\312\072\306\073" +
    "\173\077\242\100\202\102\303\103\272\104\230\105\204" +
    "\112\227\113\300\114\070\115\211\124\170\125\231\142" +
    "\255\143\254\150\071\152\236\153\273\154\237\155\063" +
    "\156\253\157\176\160\246\161\212\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\132\031\175\032\221\033\225\037\251\044" +
    "\146\047\276\073\173\100\202\102\303\103\272\105\204" +
    "\112\227\114\070\124\170\142\064\150\071\152\236\154" +
    "\237\155\063\156\253\160\246\161\212\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\002\001\ufe49\000\002\001\ufe62\000\010" +
    "\144\u0133\145\u0131\146\u0132\001\ufec6\000\002\001\ufeda\000" +
    "\032\060\u01c6\070\u01c4\071\u01bd\076\u01bf\106\u01c7\107\u01c0" +
    "\116\u01be\117\u01c3\120\u01c1\121\u01bc\122\u01c5\123\u01c2\001" +
    "\ufeef\000\002\001\ufef2\000\002\001\ufe5e\000\004\127\u01b8" +
    "\001\uff15\000\002\001\uff16\000\002\001\ufe63\000\002\001" +
    "\ufe5d\000\004\101\u01b5\001\002\000\064\053\110\062\134" +
    "\130\141\134\107\142\076\160\072\164\137\165\136\166" +
    "\135\167\133\170\132\171\130\172\127\173\126\174\124" +
    "\175\122\176\121\177\120\200\117\201\116\202\115\203" +
    "\114\204\113\205\111\207\066\001\002\000\126\031\175" +
    "\032\221\033\225\034\226\044\146\047\276\053\312\072" +
    "\306\073\173\077\242\100\202\105\204\114\070\142\064" +
    "\150\071\154\237\155\063\157\176\160\246\161\212\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\126\031\175\032\221\033" +
    "\225\034\226\044\146\047\276\053\312\072\306\073\173" +
    "\077\242\100\202\105\204\114\070\142\064\150\071\154" +
    "\237\155\063\157\176\160\246\161\212\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\004\074\u0175\001\uff0a\000\002\001\uff0c" +
    "\000\002\001\ufe9a\000\002\001\ufe9c\000\064\053\110\062" +
    "\134\130\141\134\107\142\076\160\072\164\137\165\136" +
    "\166\135\167\133\170\132\171\130\172\127\173\126\174" +
    "\124\175\122\176\121\177\120\200\117\201\116\202\115" +
    "\203\114\204\113\205\111\207\066\001\002\000\132\031" +
    "\175\032\221\033\225\037\251\044\146\047\276\073\173" +
    "\100\202\102\303\103\272\105\204\112\227\114\070\124" +
    "\170\142\064\150\071\152\236\154\237\155\063\156\253" +
    "\160\246\161\212\162\067\164\164\165\163\166\162\167" +
    "\161\170\160\171\157\172\156\173\154\174\152\175\271" +
    "\176\270\177\265\200\264\201\263\202\262\203\261\204" +
    "\260\205\256\207\066\210\224\211\214\001\002\000\002" +
    "\001\ufe73\000\002\001\ufe75\000\146\031\175\032\221\033" +
    "\225\034\226\037\251\044\146\047\276\053\312\072\306" +
    "\073\173\077\242\100\202\101\u0103\102\303\103\272\105" +
    "\204\112\227\114\070\124\170\142\064\150\071\152\236" +
    "\154\237\155\063\156\253\157\176\160\246\161\212\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\002\001\ufe67\000\164\031" +
    "\175\032\221\033\225\034\226\036\201\037\251\044\146" +
    "\047\276\053\312\072\306\073\173\077\242\100\202\101" +
    "\313\102\303\103\272\104\230\105\204\112\227\113\300" +
    "\114\070\115\211\124\170\125\231\142\255\143\254\150" +
    "\071\152\236\153\273\154\237\155\063\156\253\157\176" +
    "\160\246\161\212\162\067\164\164\165\163\166\162\167" +
    "\161\170\160\171\157\172\156\173\154\174\152\175\271" +
    "\176\270\177\265\200\264\201\263\202\262\203\261\204" +
    "\260\205\256\207\066\210\224\211\214\001\002\000\010" +
    "\026\u0168\027\u016a\030\u0169\001\ufeb8\000\004\151\u0166\001" +
    "\ufe60\000\002\001\ufebd\000\004\040\u0164\001\ufe9e\000\064" +
    "\053\110\062\134\130\141\134\107\142\076\160\072\164" +
    "\137\165\136\166\135\167\133\170\132\171\130\172\127" +
    "\173\126\174\124\175\122\176\121\177\120\200\117\201" +
    "\116\202\115\203\114\204\113\205\111\207\066\001\002" +
    "\000\002\001\ufea0\000\064\053\110\062\134\130\141\134" +
    "\107\142\076\160\072\164\137\165\136\166\135\167\133" +
    "\170\132\171\130\172\127\173\126\174\124\175\122\176" +
    "\121\177\120\200\117\201\116\202\115\203\114\204\113" +
    "\205\111\207\066\001\002\000\126\031\175\032\221\033" +
    "\225\034\226\044\146\047\276\053\312\072\306\073\173" +
    "\077\242\100\202\105\204\114\070\142\064\150\071\154" +
    "\237\155\063\157\176\160\246\161\212\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\130\031\175\032\221\033\225\034\226" +
    "\044\146\047\276\053\312\072\306\073\173\077\242\100" +
    "\202\105\204\114\070\142\064\150\071\151\u015c\154\237" +
    "\155\063\157\176\160\246\161\212\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\162\031\175\032\221\033\225\034\226\036" +
    "\201\037\251\044\146\047\276\053\312\072\306\073\173" +
    "\077\242\100\202\102\303\103\272\104\230\105\204\112" +
    "\227\113\300\114\070\115\211\124\170\125\231\142\255" +
    "\143\254\150\071\152\236\153\273\154\237\155\063\156" +
    "\253\157\176\160\246\161\212\162\067\164\164\165\163" +
    "\166\162\167\161\170\160\171\157\172\156\173\154\174" +
    "\152\175\271\176\270\177\265\200\264\201\263\202\262" +
    "\203\261\204\260\205\256\207\066\210\224\211\214\001" +
    "\002\000\002\001\uff6e\000\162\031\175\032\221\033\225" +
    "\034\226\036\201\037\251\044\146\047\276\053\312\072" +
    "\306\073\173\077\242\100\202\102\303\103\272\104\230" +
    "\105\204\112\227\113\300\114\070\115\211\124\170\125" +
    "\231\142\255\143\254\150\071\152\236\153\273\154\237" +
    "\155\063\156\253\157\176\160\246\161\212\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\162\031\175\032\221\033\225\034" +
    "\226\036\201\037\251\044\146\047\276\053\312\072\306" +
    "\073\173\077\242\100\202\102\303\103\272\104\230\105" +
    "\204\112\227\113\300\114\070\115\211\124\170\125\231" +
    "\142\255\143\254\150\071\152\236\153\273\154\237\155" +
    "\063\156\253\157\176\160\246\161\212\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\162\031\175\032\221\033\225\034\226" +
    "\036\201\037\251\044\146\047\276\053\312\072\306\073" +
    "\173\077\242\100\202\102\303\103\272\104\230\105\204" +
    "\112\227\113\300\114\070\115\211\124\170\125\231\142" +
    "\255\143\254\150\071\152\236\153\273\154\237\155\063" +
    "\156\253\157\176\160\246\161\212\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\162\031\175\032\221\033\225\034\226\036" +
    "\201\037\251\044\146\047\276\053\312\072\306\073\173" +
    "\077\242\100\202\102\303\103\272\104\230\105\204\112" +
    "\227\113\300\114\070\115\211\124\170\125\231\142\255" +
    "\143\254\150\071\152\236\153\273\154\237\155\063\156" +
    "\253\157\176\160\246\161\212\162\067\164\164\165\163" +
    "\166\162\167\161\170\160\171\157\172\156\173\154\174" +
    "\152\175\271\176\270\177\265\200\264\201\263\202\262" +
    "\203\261\204\260\205\256\207\066\210\224\211\214\001" +
    "\002\000\162\031\175\032\221\033\225\034\226\036\201" +
    "\037\251\044\146\047\276\053\312\072\306\073\173\077" +
    "\242\100\202\102\303\103\272\104\230\105\204\112\227" +
    "\113\300\114\070\115\211\124\170\125\231\142\255\143" +
    "\254\150\071\152\236\153\273\154\237\155\063\156\253" +
    "\157\176\160\246\161\212\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\162\031\175\032\221\033\225\034\226\036\201\037" +
    "\251\044\146\047\276\053\312\072\306\073\173\077\242" +
    "\100\202\102\303\103\272\104\230\105\204\112\227\113" +
    "\300\114\070\115\211\124\170\125\231\142\255\143\254" +
    "\150\071\152\236\153\273\154\237\155\063\156\253\157" +
    "\176\160\246\161\212\162\067\164\164\165\163\166\162" +
    "\167\161\170\160\171\157\172\156\173\154\174\152\175" +
    "\271\176\270\177\265\200\264\201\263\202\262\203\261" +
    "\204\260\205\256\207\066\210\224\211\214\001\002\000" +
    "\002\001\ufe7b\000\002\001\ufe7c\000\162\031\175\032\221" +
    "\033\225\034\226\036\201\037\251\044\146\047\276\053" +
    "\312\072\306\073\173\077\242\100\202\102\303\103\272" +
    "\104\230\105\204\112\227\113\300\114\070\115\211\124" +
    "\170\125\231\142\255\143\254\150\071\152\236\153\273" +
    "\154\237\155\063\156\253\157\176\160\246\161\212\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\162\031\175\032\221\033" +
    "\225\034\226\036\201\037\251\044\146\047\276\053\312" +
    "\072\306\073\173\077\242\100\202\102\303\103\272\104" +
    "\230\105\204\112\227\113\300\114\070\115\211\124\170" +
    "\125\231\142\255\143\254\150\071\152\236\153\273\154" +
    "\237\155\063\156\253\157\176\160\246\161\212\162\067" +
    "\164\164\165\163\166\162\167\161\170\160\171\157\172" +
    "\156\173\154\174\152\175\271\176\270\177\265\200\264" +
    "\201\263\202\262\203\261\204\260\205\256\207\066\210" +
    "\224\211\214\001\002\000\064\053\110\062\134\130\141" +
    "\134\107\142\076\160\072\164\137\165\136\166\135\167" +
    "\133\170\132\171\130\172\127\173\126\174\124\175\122" +
    "\176\121\177\120\200\117\201\116\202\115\203\114\204" +
    "\113\205\111\207\066\001\002\000\126\031\175\032\221" +
    "\033\225\034\226\044\146\047\276\053\312\072\306\073" +
    "\173\077\242\100\202\105\204\114\070\142\064\150\071" +
    "\154\237\155\063\157\176\160\246\161\212\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\002\001\ufefc\000\002\001\uff04\000" +
    "\132\031\175\032\221\033\225\037\251\044\146\047\276" +
    "\073\173\100\202\102\303\103\272\105\204\112\227\114" +
    "\070\124\170\142\064\150\071\152\236\154\237\155\063" +
    "\156\253\160\246\161\212\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\002\001\ufe47\000\126\031\175\032\221\033\225\034" +
    "\226\044\146\047\276\053\312\072\306\073\173\077\242" +
    "\100\202\105\204\114\070\142\064\150\071\154\237\155" +
    "\063\157\176\160\246\161\212\162\067\164\164\165\163" +
    "\166\162\167\161\170\160\171\157\172\156\173\154\174" +
    "\152\175\271\176\270\177\265\200\264\201\263\202\262" +
    "\203\261\204\260\205\256\207\066\210\224\211\214\001" +
    "\002\000\012\024\345\025\343\110\344\131\342\001\ufec1" +
    "\000\002\001\ufec5\000\010\142\076\160\072\207\066\001" +
    "\002\000\002\001\ufefb\000\002\001\uff03\000\144\031\175" +
    "\032\221\033\225\034\226\037\251\044\146\047\276\053" +
    "\312\072\306\073\173\077\242\100\202\102\303\103\272" +
    "\105\204\112\227\114\070\124\170\142\064\150\071\152" +
    "\236\154\237\155\063\156\253\157\176\160\246\161\212" +
    "\162\067\164\164\165\163\166\162\167\161\170\160\171" +
    "\157\172\156\173\154\174\152\175\271\176\270\177\265" +
    "\200\264\201\263\202\262\203\261\204\260\205\256\207" +
    "\066\210\224\211\214\001\002\000\002\001\ufeaa\000\002" +
    "\001\ufea3\000\002\001\ufea7\000\004\101\313\001\002\000" +
    "\162\031\175\032\221\033\225\034\226\036\201\037\251" +
    "\044\146\047\276\053\312\072\306\073\173\077\242\100" +
    "\202\102\303\103\272\104\230\105\204\112\227\113\300" +
    "\114\070\115\211\124\170\125\231\142\255\143\254\150" +
    "\071\152\236\153\273\154\237\155\063\156\253\157\176" +
    "\160\246\161\212\162\067\164\164\165\163\166\162\167" +
    "\161\170\160\171\157\172\156\173\154\174\152\175\271" +
    "\176\270\177\265\200\264\201\263\202\262\203\261\204" +
    "\260\205\256\207\066\210\224\211\214\001\uff1a\000\002" +
    "\001\uff18\000\004\137\321\001\002\000\004\052\317\001" +
    "\uff19\000\162\031\175\032\221\033\225\034\226\036\201" +
    "\037\251\044\146\047\276\053\312\072\306\073\173\077" +
    "\242\100\202\102\303\103\272\104\230\105\204\112\227" +
    "\113\300\114\070\115\211\124\170\125\231\142\255\143" +
    "\254\150\071\152\236\153\273\154\237\155\063\156\253" +
    "\157\176\160\246\161\212\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\002\001\uff17\000\002\001\ufe79\000\004\060\324\001" +
    "\002\000\002\001\uff13\000\162\031\175\032\221\033\225" +
    "\034\226\036\201\037\251\044\146\047\276\053\312\072" +
    "\306\073\173\077\242\100\202\102\303\103\272\104\230" +
    "\105\204\112\227\113\300\114\070\115\211\124\170\125" +
    "\231\142\255\143\254\150\071\152\236\153\273\154\237" +
    "\155\063\156\253\157\176\160\246\161\212\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\010\045\331\052\326\100\330\001" +
    "\002\000\010\142\076\160\072\207\066\001\002\000\002" +
    "\001\uff24\000\164\031\175\032\221\033\225\034\226\036" +
    "\201\037\251\044\146\047\276\053\312\072\306\073\173" +
    "\077\242\100\202\102\303\103\272\104\230\105\204\112" +
    "\227\113\300\114\070\115\211\124\170\125\231\136\334" +
    "\142\255\143\254\150\071\152\236\153\273\154\237\155" +
    "\063\156\253\157\176\160\246\161\212\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\162\031\175\032\221\033\225\034\226" +
    "\036\201\037\251\044\146\047\276\053\312\072\306\073" +
    "\173\077\242\100\202\102\303\103\272\104\230\105\204" +
    "\112\227\113\300\114\070\115\211\124\170\125\231\142" +
    "\255\143\254\150\071\152\236\153\273\154\237\155\063" +
    "\156\253\157\176\160\246\161\212\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\002\001\uff1b\000\002\001\uff1c\000\002\001" +
    "\uff1f\000\002\001\uff1e\000\164\031\175\032\221\033\225" +
    "\034\226\036\201\037\251\044\146\047\276\053\312\072" +
    "\306\073\173\077\242\100\202\102\303\103\272\104\230" +
    "\105\204\112\227\113\300\114\070\115\211\124\170\125" +
    "\231\136\337\142\255\143\254\150\071\152\236\153\273" +
    "\154\237\155\063\156\253\157\176\160\246\161\212\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\002\001\uff20\000\002\001" +
    "\uff1d\000\002\001\uff23\000\144\031\175\032\221\033\225" +
    "\034\226\037\251\044\146\047\355\053\312\072\347\073" +
    "\173\077\350\100\202\102\303\103\272\105\204\112\227" +
    "\114\070\124\170\142\064\150\071\152\236\154\352\155" +
    "\063\156\253\157\360\160\246\161\351\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\144\031\175\032\221\033\225\034\226" +
    "\037\251\044\146\047\355\053\312\072\347\073\173\077" +
    "\350\100\202\102\303\103\272\105\204\112\227\114\070" +
    "\124\170\142\064\150\071\152\236\154\352\155\063\156" +
    "\253\157\360\160\246\161\351\162\067\164\164\165\163" +
    "\166\162\167\161\170\160\171\157\172\156\173\154\174" +
    "\152\175\271\176\270\177\265\200\264\201\263\202\262" +
    "\203\261\204\260\205\256\207\066\210\224\211\214\001" +
    "\002\000\144\031\175\032\221\033\225\034\226\037\251" +
    "\044\146\047\355\053\312\072\347\073\173\077\350\100" +
    "\202\102\303\103\272\105\204\112\227\114\070\124\170" +
    "\142\064\150\071\152\236\154\352\155\063\156\253\157" +
    "\360\160\246\161\351\162\067\164\164\165\163\166\162" +
    "\167\161\170\160\171\157\172\156\173\154\174\152\175" +
    "\271\176\270\177\265\200\264\201\263\202\262\203\261" +
    "\204\260\205\256\207\066\210\224\211\214\001\002\000" +
    "\144\031\175\032\221\033\225\034\226\037\251\044\146" +
    "\047\355\053\312\072\347\073\173\077\350\100\202\102" +
    "\303\103\272\105\204\112\227\114\070\124\170\142\064" +
    "\150\071\152\236\154\352\155\063\156\253\157\360\160" +
    "\246\161\351\162\067\164\164\165\163\166\162\167\161" +
    "\170\160\171\157\172\156\173\154\174\152\175\271\176" +
    "\270\177\265\200\264\201\263\202\262\203\261\204\260" +
    "\205\256\207\066\210\224\211\214\001\002\000\004\040" +
    "\u0110\001\ufe9e\000\126\031\175\032\221\033\225\034\226" +
    "\044\146\047\355\053\312\072\347\073\173\077\350\100" +
    "\202\105\204\114\070\142\064\150\071\154\352\155\063" +
    "\157\360\160\246\161\351\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\130\031\175\032\221\033\225\034\226\044\146\047" +
    "\355\053\312\072\347\073\173\077\350\100\202\101\u0103" +
    "\105\204\114\070\142\064\150\071\154\352\155\063\157" +
    "\360\160\246\161\351\162\067\164\164\165\163\166\162" +
    "\167\161\170\160\171\157\172\156\173\154\174\152\175" +
    "\271\176\270\177\265\200\264\201\263\202\262\203\261" +
    "\204\260\205\256\207\066\210\224\211\214\001\002\000" +
    "\114\031\175\032\221\033\225\044\146\047\355\073\173" +
    "\100\202\105\204\114\070\142\064\150\071\154\352\155" +
    "\063\160\246\161\351\162\067\164\164\165\163\166\162" +
    "\167\161\170\160\171\157\172\156\173\154\174\152\175" +
    "\271\176\270\177\265\200\264\201\263\202\262\203\261" +
    "\204\260\205\256\207\066\210\224\211\214\001\002\000" +
    "\114\031\175\032\221\033\225\044\146\047\355\073\173" +
    "\100\202\105\204\114\070\142\064\150\071\154\352\155" +
    "\063\160\246\161\351\162\067\164\164\165\163\166\162" +
    "\167\161\170\160\171\157\172\156\173\154\174\152\175" +
    "\271\176\270\177\265\200\264\201\263\202\262\203\261" +
    "\204\260\205\256\207\066\210\224\211\214\001\002\000" +
    "\044\004\u011e\005\u0113\006\u011f\007\u0119\010\u011a\011\u0121" +
    "\012\u011c\013\u0116\014\u0122\015\u0118\016\u0115\017\u011b\020" +
    "\u0114\021\u011d\022\u0117\023\u0123\054\u0112\001\ufe86\000\004" +
    "\132\u010e\001\ufea4\000\114\031\175\032\221\033\225\044" +
    "\146\047\355\073\173\100\202\105\204\114\070\142\064" +
    "\150\071\154\352\155\063\160\246\161\351\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\010\026\u0107\027\u0109\030\u0108\001" +
    "\ufeb5\000\006\055\373\101\372\001\ufe7e\000\130\031\175" +
    "\032\221\033\225\034\226\044\146\047\355\053\312\072" +
    "\347\073\173\077\350\100\202\101\367\105\204\114\070" +
    "\142\064\150\071\154\352\155\063\157\360\160\246\161" +
    "\351\162\067\164\164\165\163\166\162\167\161\170\160" +
    "\171\157\172\156\173\154\174\152\175\271\176\270\177" +
    "\265\200\264\201\263\202\262\203\261\204\260\205\256" +
    "\207\066\210\224\211\214\001\002\000\004\135\363\001" +
    "\ufe82\000\002\001\ufeba\000\124\031\175\032\221\033\225" +
    "\034\226\044\146\047\355\053\312\073\173\077\364\100" +
    "\202\105\204\114\070\142\064\150\071\154\352\155\063" +
    "\157\366\160\246\161\351\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\004\101\u0103\001\002\000\006\055\373\101\372\001" +
    "\ufe7d\000\004\101\367\001\002\000\162\031\175\032\221" +
    "\033\225\034\226\036\201\037\251\044\146\047\276\053" +
    "\312\072\306\073\173\077\242\100\202\102\303\103\272" +
    "\104\230\105\204\112\227\113\300\114\070\115\211\124" +
    "\170\125\231\142\255\143\254\150\071\152\236\153\273" +
    "\154\237\155\063\156\253\157\176\160\246\161\212\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\uff1a\000\004\137\371\001\002\000" +
    "\002\001\ufe76\000\162\031\175\032\221\033\225\034\226" +
    "\036\201\037\251\044\146\047\276\053\312\072\306\073" +
    "\173\077\242\100\202\102\303\103\272\104\230\105\204" +
    "\112\227\113\300\114\070\115\211\124\170\125\231\142" +
    "\255\143\254\150\071\152\236\153\273\154\237\155\063" +
    "\156\253\157\176\160\246\161\212\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\uff1a\000\124\031\175\032\221\033\225\034\377\044" +
    "\146\047\355\053\376\073\173\077\374\100\202\105\204" +
    "\114\070\142\064\150\071\154\352\155\063\157\u0100\160" +
    "\246\161\351\162\067\164\164\165\163\166\162\167\161" +
    "\170\160\171\157\172\156\173\154\174\152\175\271\176" +
    "\270\177\265\200\264\201\263\202\262\203\261\204\260" +
    "\205\256\207\066\210\224\211\214\001\002\000\002\001" +
    "\ufe6f\000\002\001\ufe72\000\002\001\ufe71\000\002\001\ufe70" +
    "\000\002\001\ufe6e\000\004\137\u0102\001\002\000\002\001" +
    "\ufe7a\000\162\031\175\032\221\033\225\034\226\036\201" +
    "\037\251\044\146\047\276\053\312\072\306\073\173\077" +
    "\242\100\202\102\303\103\272\104\230\105\204\112\227" +
    "\113\300\114\070\115\211\124\170\125\231\142\255\143" +
    "\254\150\071\152\236\153\273\154\237\155\063\156\253" +
    "\157\176\160\246\161\212\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\uff1a" +
    "\000\004\137\u0105\001\002\000\002\001\ufe77\000\002\001" +
    "\ufea2\000\126\031\175\032\221\033\225\034\226\044\146" +
    "\047\355\053\312\072\347\073\173\077\350\100\202\105" +
    "\204\114\070\142\064\150\071\154\352\155\063\157\360" +
    "\160\246\161\351\162\067\164\164\165\163\166\162\167" +
    "\161\170\160\171\157\172\156\173\154\174\152\175\271" +
    "\176\270\177\265\200\264\201\263\202\262\203\261\204" +
    "\260\205\256\207\066\210\224\211\214\001\002\000\126" +
    "\031\175\032\221\033\225\034\226\044\146\047\355\053" +
    "\312\072\347\073\173\077\350\100\202\105\204\114\070" +
    "\142\064\150\071\154\352\155\063\157\360\160\246\161" +
    "\351\162\067\164\164\165\163\166\162\167\161\170\160" +
    "\171\157\172\156\173\154\174\152\175\271\176\270\177" +
    "\265\200\264\201\263\202\262\203\261\204\260\205\256" +
    "\207\066\210\224\211\214\001\002\000\126\031\175\032" +
    "\221\033\225\034\226\044\146\047\355\053\312\072\347" +
    "\073\173\077\350\100\202\105\204\114\070\142\064\150" +
    "\071\154\352\155\063\157\360\160\246\161\351\162\067" +
    "\164\164\165\163\166\162\167\161\170\160\171\157\172" +
    "\156\173\154\174\152\175\271\176\270\177\265\200\264" +
    "\201\263\202\262\203\261\204\260\205\256\207\066\210" +
    "\224\211\214\001\002\000\002\001\ufead\000\002\001\ufeac" +
    "\000\002\001\ufeae\000\002\001\ufe64\000\124\031\175\032" +
    "\221\033\225\034\226\044\146\047\355\053\312\073\173" +
    "\077\364\100\202\105\204\114\070\142\064\150\071\154" +
    "\352\155\063\157\366\160\246\161\351\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\004\040\u0110\001\ufe9d\000\124\031\175" +
    "\032\221\033\225\034\226\044\146\047\355\053\312\073" +
    "\173\077\364\100\202\105\204\114\070\142\064\150\071" +
    "\154\352\155\063\157\366\160\246\161\351\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\002\001\ufe99\000\124\031\175\032" +
    "\221\033\225\034\226\044\146\047\355\053\312\073\173" +
    "\077\364\100\202\105\204\114\070\142\064\150\071\154" +
    "\352\155\063\157\366\160\246\161\351\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\002\001\ufe97\000\002\001\ufe8c\000\002" +
    "\001\ufe8e\000\002\001\ufe91\000\002\001\ufe8a\000\002\001" +
    "\ufe8f\000\002\001\ufe95\000\002\001\ufe94\000\002\001\ufe8d" +
    "\000\002\001\ufe92\000\002\001\ufe8b\000\002\001\ufe98\000" +
    "\002\001\ufe96\000\124\031\175\032\221\033\225\034\226" +
    "\044\146\047\355\053\312\073\173\077\364\100\202\105" +
    "\204\114\070\142\064\150\071\154\352\155\063\157\366" +
    "\160\246\161\351\162\067\164\164\165\163\166\162\167" +
    "\161\170\160\171\157\172\156\173\154\174\152\175\271" +
    "\176\270\177\265\200\264\201\263\202\262\203\261\204" +
    "\260\205\256\207\066\210\224\211\214\001\002\000\002" +
    "\001\ufe93\000\002\001\ufe90\000\002\001\ufe89\000\002\001" +
    "\ufe85\000\004\135\363\001\ufe81\000\002\001\ufe65\000\002" +
    "\001\ufe66\000\002\001\ufea1\000\010\026\u0107\027\u0109\030" +
    "\u0108\001\ufeb6\000\002\001\ufebb\000\010\026\u0107\027\u0109" +
    "\030\u0108\001\ufeb4\000\002\001\ufeb9\000\010\026\u0107\027" +
    "\u0109\030\u0108\001\ufeb7\000\002\001\ufebc\000\010\144\u0133" +
    "\145\u0131\146\u0132\001\ufecc\000\002\001\ufee0\000\144\031" +
    "\175\032\221\033\225\034\226\037\251\044\146\047\355" +
    "\053\312\072\347\073\173\077\350\100\202\102\303\103" +
    "\272\105\204\112\227\114\070\124\170\142\064\150\071" +
    "\152\236\154\352\155\063\156\253\157\360\160\246\161" +
    "\351\162\067\164\164\165\163\166\162\167\161\170\160" +
    "\171\157\172\156\173\154\174\152\175\271\176\270\177" +
    "\265\200\264\201\263\202\262\203\261\204\260\205\256" +
    "\207\066\210\224\211\214\001\002\000\144\031\175\032" +
    "\221\033\225\034\226\037\251\044\146\047\355\053\312" +
    "\072\347\073\173\077\350\100\202\102\303\103\272\105" +
    "\204\112\227\114\070\124\170\142\064\150\071\152\236" +
    "\154\352\155\063\156\253\157\360\160\246\161\351\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\144\031\175\032\221\033" +
    "\225\034\226\037\251\044\146\047\355\053\312\072\347" +
    "\073\173\077\350\100\202\102\303\103\272\105\204\112" +
    "\227\114\070\124\170\142\064\150\071\152\236\154\352" +
    "\155\063\156\253\157\360\160\246\161\351\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\010\026\u0107\027\u0109\030\u0108\001" +
    "\ufeb8\000\012\024\u013a\025\u0138\110\u0139\131\u0137\001\ufec0" +
    "\000\002\001\ufec4\000\126\031\175\032\221\033\225\034" +
    "\226\044\146\047\355\053\312\072\347\073\173\077\350" +
    "\100\202\105\204\114\070\142\064\150\071\154\352\155" +
    "\063\157\360\160\246\161\351\162\067\164\164\165\163" +
    "\166\162\167\161\170\160\171\157\172\156\173\154\174" +
    "\152\175\271\176\270\177\265\200\264\201\263\202\262" +
    "\203\261\204\260\205\256\207\066\210\224\211\214\001" +
    "\002\000\126\031\175\032\221\033\225\034\226\044\146" +
    "\047\355\053\312\072\347\073\173\077\350\100\202\105" +
    "\204\114\070\142\064\150\071\154\352\155\063\157\360" +
    "\160\246\161\351\162\067\164\164\165\163\166\162\167" +
    "\161\170\160\171\157\172\156\173\154\174\152\175\271" +
    "\176\270\177\265\200\264\201\263\202\262\203\261\204" +
    "\260\205\256\207\066\210\224\211\214\001\002\000\126" +
    "\031\175\032\221\033\225\034\226\044\146\047\355\053" +
    "\312\072\347\073\173\077\350\100\202\105\204\114\070" +
    "\142\064\150\071\154\352\155\063\157\360\160\246\161" +
    "\351\162\067\164\164\165\163\166\162\167\161\170\160" +
    "\171\157\172\156\173\154\174\152\175\271\176\270\177" +
    "\265\200\264\201\263\202\262\203\261\204\260\205\256" +
    "\207\066\210\224\211\214\001\002\000\126\031\175\032" +
    "\221\033\225\034\226\044\146\047\355\053\312\072\347" +
    "\073\173\077\350\100\202\105\204\114\070\142\064\150" +
    "\071\154\352\155\063\157\360\160\246\161\351\162\067" +
    "\164\164\165\163\166\162\167\161\170\160\171\157\172" +
    "\156\173\154\174\152\175\271\176\270\177\265\200\264" +
    "\201\263\202\262\203\261\204\260\205\256\207\066\210" +
    "\224\211\214\001\002\000\012\024\u013a\025\u0138\110\u0139" +
    "\131\u0137\001\ufebe\000\002\001\ufec2\000\012\024\u013a\025" +
    "\u0138\110\u0139\131\u0137\001\ufebf\000\002\001\ufec3\000\002" +
    "\001\ufe68\000\002\001\ufe6b\000\010\144\u0133\145\u0131\146" +
    "\u0132\001\ufecb\000\002\001\ufedf\000\010\045\331\052\u0145" +
    "\100\330\001\002\000\002\001\uff29\000\064\053\110\062" +
    "\134\130\141\134\107\142\076\160\072\164\137\165\136" +
    "\166\135\167\133\170\132\171\130\172\127\173\126\174" +
    "\124\175\122\176\121\177\120\200\117\201\116\202\115" +
    "\203\114\204\113\205\111\207\066\001\002\000\002\001" +
    "\uff0f\000\002\001\uff2a\000\004\175\u0149\001\002\000\002" +
    "\001\ufe52\000\004\176\u014b\001\002\000\002\001\ufe51\000" +
    "\004\177\u014d\001\002\000\002\001\ufe50\000\004\200\u014f" +
    "\001\002\000\002\001\ufe4f\000\004\201\u0151\001\002\000" +
    "\002\001\ufe4e\000\004\202\u0153\001\002\000\002\001\ufe4d" +
    "\000\004\203\u0155\001\002\000\002\001\ufe4c\000\004\204" +
    "\u0157\001\002\000\002\001\ufe4b\000\004\205\u0159\001\002" +
    "\000\002\001\ufe4a\000\010\144\u0133\145\u0131\146\u0132\001" +
    "\ufec7\000\002\001\ufedb\000\006\150\u015d\207\066\001\002" +
    "\000\002\001\uff6a\000\010\144\u0133\145\u0131\146\u0132\001" +
    "\ufec8\000\002\001\ufedc\000\010\045\331\052\u0145\100\330" +
    "\001\002\000\002\001\uff0d\000\010\045\331\052\u0145\100" +
    "\330\001\002\000\002\001\uff12\000\142\031\175\032\221" +
    "\033\225\034\226\037\251\044\146\047\355\053\312\073" +
    "\173\077\364\100\202\102\303\103\272\105\204\112\227" +
    "\114\070\124\170\142\064\150\071\152\236\154\352\155" +
    "\063\156\253\157\366\160\246\161\351\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\002\001\ufe9b\000\004\207\066\001\002" +
    "\000\004\151\101\001\uff61\000\144\031\175\032\221\033" +
    "\225\034\226\037\251\044\146\047\355\053\312\072\347" +
    "\073\173\077\350\100\202\102\303\103\272\105\204\112" +
    "\227\114\070\124\170\142\064\150\071\152\236\154\352" +
    "\155\063\156\253\157\360\160\246\161\351\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\144\031\175\032\221\033\225\034" +
    "\226\037\251\044\146\047\355\053\312\072\347\073\173" +
    "\077\350\100\202\102\303\103\272\105\204\112\227\114" +
    "\070\124\170\142\064\150\071\152\236\154\352\155\063" +
    "\156\253\157\360\160\246\161\351\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\144\031\175\032\221\033\225\034\226\037" +
    "\251\044\146\047\355\053\312\072\347\073\173\077\350" +
    "\100\202\102\303\103\272\105\204\112\227\114\070\124" +
    "\170\142\064\150\071\152\236\154\352\155\063\156\253" +
    "\157\360\160\246\161\351\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\002\001\ufeb1\000\002\001\ufeb0\000\002\001\ufeb2\000" +
    "\002\001\uff3f\000\002\001\ufea8\000\002\001\ufea5\000\002" +
    "\001\ufe69\000\002\001\ufe6c\000\010\045\331\052\u0145\100" +
    "\330\001\002\000\002\001\uff10\000\162\031\175\032\221" +
    "\033\225\034\226\036\u0179\037\251\044\146\047\355\053" +
    "\312\072\347\073\173\077\350\100\202\102\303\103\272" +
    "\104\u017d\105\204\112\227\113\u0182\114\070\115\u017a\124" +
    "\170\125\u017e\142\u0180\143\u017f\150\071\152\236\153\u0181" +
    "\154\352\155\063\156\253\157\360\160\246\161\351\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\002\001\uff05\000\002\001" +
    "\uff07\000\006\041\u01a8\075\u01a7\001\ufefa\000\126\031\175" +
    "\032\221\033\225\034\226\044\146\047\355\053\312\072" +
    "\347\073\173\077\350\100\202\105\204\114\070\142\064" +
    "\150\071\154\352\155\063\157\360\160\246\161\351\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\144\031\175\032\221\033" +
    "\225\034\226\036\u0179\044\146\047\355\053\312\072\347" +
    "\073\173\077\350\100\202\104\u017d\105\204\113\u0182\114" +
    "\070\115\u017a\125\u017e\142\u0180\143\u017f\150\071\153\u0181" +
    "\154\352\155\063\157\360\160\246\161\351\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\010\144\u0187\145\u0185\146\u0186\001" +
    "\ufec6\000\032\060\u0197\070\u0195\071\u0190\076\u018e\106\u0198" +
    "\107\u0191\116\u018f\117\u0193\120\u0192\121\u018d\122\u0196\123" +
    "\u0194\001\ufeef\000\126\031\175\032\221\033\225\034\226" +
    "\044\146\047\355\053\312\072\347\073\173\077\350\100" +
    "\202\105\204\114\070\142\064\150\071\154\352\155\063" +
    "\157\360\160\246\161\351\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\126\031\175\032\221\033\225\034\226\044\146\047" +
    "\355\053\312\072\347\073\173\077\350\100\202\105\204" +
    "\114\070\142\064\150\071\154\352\155\063\157\360\160" +
    "\246\161\351\162\067\164\164\165\163\166\162\167\161" +
    "\170\160\171\157\172\156\173\154\174\152\175\271\176" +
    "\270\177\265\200\264\201\263\202\262\203\261\204\260" +
    "\205\256\207\066\210\224\211\214\001\002\000\126\031" +
    "\175\032\221\033\225\034\226\044\146\047\355\053\312" +
    "\072\347\073\173\077\350\100\202\105\204\114\070\142" +
    "\064\150\071\154\352\155\063\157\360\160\246\161\351" +
    "\162\067\164\164\165\163\166\162\167\161\170\160\171" +
    "\157\172\156\173\154\174\152\175\271\176\270\177\265" +
    "\200\264\201\263\202\262\203\261\204\260\205\256\207" +
    "\066\210\224\211\214\001\002\000\130\031\175\032\221" +
    "\033\225\034\226\044\146\047\355\053\312\072\347\073" +
    "\173\077\350\100\202\105\204\114\070\142\064\150\071" +
    "\151\u015c\154\352\155\063\157\360\160\246\161\351\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\126\031\175\032\221\033" +
    "\225\034\226\044\146\047\355\053\312\072\347\073\173" +
    "\077\350\100\202\105\204\114\070\142\064\150\071\154" +
    "\352\155\063\157\360\160\246\161\351\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\126\031\175\032\221\033\225\034\226" +
    "\044\146\047\355\053\312\072\347\073\173\077\350\100" +
    "\202\105\204\114\070\142\064\150\071\154\352\155\063" +
    "\157\360\160\246\161\351\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\012\024\u013a\025\u0138\110\u0139\131\u0137\001\ufec1\000" +
    "\010\144\u0187\145\u0185\146\u0186\001\ufecc\000\126\031\175" +
    "\032\221\033\225\034\226\044\146\047\355\053\312\072" +
    "\347\073\173\077\350\100\202\105\204\114\070\142\064" +
    "\150\071\154\352\155\063\157\360\160\246\161\351\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\126\031\175\032\221\033" +
    "\225\034\226\044\146\047\355\053\312\072\347\073\173" +
    "\077\350\100\202\105\204\114\070\142\064\150\071\154" +
    "\352\155\063\157\360\160\246\161\351\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\126\031\175\032\221\033\225\034\226" +
    "\044\146\047\355\053\312\072\347\073\173\077\350\100" +
    "\202\105\204\114\070\142\064\150\071\154\352\155\063" +
    "\157\360\160\246\161\351\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\010\144\u0187\145\u0185\146\u0186\001\ufecb\000\010\144" +
    "\u0187\145\u0185\146\u0186\001\ufec7\000\010\144\u0187\145\u0185" +
    "\146\u0186\001\ufec8\000\010\144\u0187\145\u0185\146\u0186\001" +
    "\ufec9\000\010\144\u0187\145\u0185\146\u0186\001\ufeca\000\126" +
    "\031\175\032\221\033\225\034\226\044\146\047\355\053" +
    "\312\072\347\073\173\077\350\100\202\105\204\114\070" +
    "\142\064\150\071\154\352\155\063\157\360\160\246\161" +
    "\351\162\067\164\164\165\163\166\162\167\161\170\160" +
    "\171\157\172\156\173\154\174\152\175\271\176\270\177" +
    "\265\200\264\201\263\202\262\203\261\204\260\205\256" +
    "\207\066\210\224\211\214\001\002\000\126\031\175\032" +
    "\221\033\225\034\226\044\146\047\355\053\312\072\347" +
    "\073\173\077\350\100\202\105\204\114\070\142\064\150" +
    "\071\154\352\155\063\157\360\160\246\161\351\162\067" +
    "\164\164\165\163\166\162\167\161\170\160\171\157\172" +
    "\156\173\154\174\152\175\271\176\270\177\265\200\264" +
    "\201\263\202\262\203\261\204\260\205\256\207\066\210" +
    "\224\211\214\001\002\000\126\031\175\032\221\033\225" +
    "\034\226\044\146\047\355\053\312\072\347\073\173\077" +
    "\350\100\202\105\204\114\070\142\064\150\071\154\352" +
    "\155\063\157\360\160\246\161\351\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\126\031\175\032\221\033\225\034\226\044" +
    "\146\047\355\053\312\072\347\073\173\077\350\100\202" +
    "\105\204\114\070\142\064\150\071\154\352\155\063\157" +
    "\360\160\246\161\351\162\067\164\164\165\163\166\162" +
    "\167\161\170\160\171\157\172\156\173\154\174\152\175" +
    "\271\176\270\177\265\200\264\201\263\202\262\203\261" +
    "\204\260\205\256\207\066\210\224\211\214\001\002\000" +
    "\126\031\175\032\221\033\225\034\226\044\146\047\355" +
    "\053\312\072\347\073\173\077\350\100\202\105\204\114" +
    "\070\142\064\150\071\154\352\155\063\157\360\160\246" +
    "\161\351\162\067\164\164\165\163\166\162\167\161\170" +
    "\160\171\157\172\156\173\154\174\152\175\271\176\270" +
    "\177\265\200\264\201\263\202\262\203\261\204\260\205" +
    "\256\207\066\210\224\211\214\001\002\000\126\031\175" +
    "\032\221\033\225\034\226\044\146\047\355\053\312\072" +
    "\347\073\173\077\350\100\202\105\204\114\070\142\064" +
    "\150\071\154\352\155\063\157\360\160\246\161\351\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\126\031\175\032\221\033" +
    "\225\034\226\044\146\047\355\053\312\072\347\073\173" +
    "\077\350\100\202\105\204\114\070\142\064\150\071\154" +
    "\352\155\063\157\360\160\246\161\351\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\126\031\175\032\221\033\225\034\226" +
    "\044\146\047\355\053\312\072\347\073\173\077\350\100" +
    "\202\105\204\114\070\142\064\150\071\154\352\155\063" +
    "\157\360\160\246\161\351\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\126\031\175\032\221\033\225\034\226\044\146\047" +
    "\355\053\312\072\347\073\173\077\350\100\202\105\204" +
    "\114\070\142\064\150\071\154\352\155\063\157\360\160" +
    "\246\161\351\162\067\164\164\165\163\166\162\167\161" +
    "\170\160\171\157\172\156\173\154\174\152\175\271\176" +
    "\270\177\265\200\264\201\263\202\262\203\261\204\260" +
    "\205\256\207\066\210\224\211\214\001\002\000\126\031" +
    "\175\032\221\033\225\034\226\044\146\047\355\053\312" +
    "\072\347\073\173\077\350\100\202\105\204\114\070\142" +
    "\064\150\071\154\352\155\063\157\360\160\246\161\351" +
    "\162\067\164\164\165\163\166\162\167\161\170\160\171" +
    "\157\172\156\173\154\174\152\175\271\176\270\177\265" +
    "\200\264\201\263\202\262\203\261\204\260\205\256\207" +
    "\066\210\224\211\214\001\002\000\126\031\175\032\221" +
    "\033\225\034\226\044\146\047\355\053\312\072\347\073" +
    "\173\077\350\100\202\105\204\114\070\142\064\150\071" +
    "\154\352\155\063\157\360\160\246\161\351\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\126\031\175\032\221\033\225\034" +
    "\226\044\146\047\355\053\312\072\347\073\173\077\350" +
    "\100\202\105\204\114\070\142\064\150\071\154\352\155" +
    "\063\157\360\160\246\161\351\162\067\164\164\165\163" +
    "\166\162\167\161\170\160\171\157\172\156\173\154\174" +
    "\152\175\271\176\270\177\265\200\264\201\263\202\262" +
    "\203\261\204\260\205\256\207\066\210\224\211\214\001" +
    "\002\000\010\144\u0187\145\u0185\146\u0186\001\ufed7\000\010" +
    "\144\u0187\145\u0185\146\u0186\001\ufed8\000\010\144\u0187\145" +
    "\u0185\146\u0186\001\ufed1\000\010\144\u0187\145\u0185\146\u0186" +
    "\001\ufed6\000\010\144\u0187\145\u0185\146\u0186\001\ufecf\000" +
    "\010\144\u0187\145\u0185\146\u0186\001\ufed0\000\010\144\u0187" +
    "\145\u0185\146\u0186\001\ufece\000\010\144\u0187\145\u0185\146" +
    "\u0186\001\ufed5\000\010\144\u0187\145\u0185\146\u0186\001\ufed4" +
    "\000\010\144\u0187\145\u0185\146\u0186\001\ufed2\000\010\144" +
    "\u0187\145\u0185\146\u0186\001\ufed9\000\010\144\u0187\145\u0185" +
    "\146\u0186\001\ufed3\000\002\001\ufeee\000\010\144\u0187\145" +
    "\u0185\146\u0186\001\ufecd\000\144\031\175\032\221\033\225" +
    "\034\226\036\u0179\044\146\047\355\053\312\072\347\073" +
    "\173\077\350\100\202\104\u017d\105\204\113\u0182\114\070" +
    "\115\u017a\125\u017e\142\u0180\143\u017f\150\071\153\u0181\154" +
    "\352\155\063\157\360\160\246\161\351\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\144\031\175\032\221\033\225\034\226" +
    "\036\u0179\044\146\047\355\053\312\072\347\073\173\077" +
    "\350\100\202\104\u017d\105\204\113\u0182\114\070\115\u017a" +
    "\125\u017e\142\u0180\143\u017f\150\071\153\u0181\154\352\155" +
    "\063\157\360\160\246\161\351\162\067\164\164\165\163" +
    "\166\162\167\161\170\160\171\157\172\156\173\154\174" +
    "\152\175\271\176\270\177\265\200\264\201\263\202\262" +
    "\203\261\204\260\205\256\207\066\210\224\211\214\001" +
    "\002\000\002\001\ufef3\000\002\001\ufef7\000\004\056\u01ac" +
    "\001\ufefc\000\144\031\175\032\221\033\225\034\226\036" +
    "\u0179\044\146\047\355\053\312\072\347\073\173\077\350" +
    "\100\202\104\u017d\105\204\113\u0182\114\070\115\u017a\125" +
    "\u017e\142\u0180\143\u017f\150\071\153\u0181\154\352\155\063" +
    "\157\360\160\246\161\351\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\002\001\ufef8\000\002\001\ufef9\000\010\144\u0133\145" +
    "\u0131\146\u0132\001\ufec9\000\002\001\ufedd\000\010\144\u0133" +
    "\145\u0131\146\u0132\001\ufeca\000\002\001\ufede\000\010\045" +
    "\331\052\u0145\100\330\001\002\000\002\001\uff11\000\162" +
    "\031\175\032\221\033\225\034\226\036\201\037\251\044" +
    "\146\047\276\053\312\072\306\073\173\077\242\100\202" +
    "\102\303\103\272\104\230\105\204\112\227\113\300\114" +
    "\070\115\211\124\170\125\231\142\255\143\254\150\071" +
    "\152\236\153\273\154\237\155\063\156\253\157\176\160" +
    "\246\161\212\162\067\164\164\165\163\166\162\167\161" +
    "\170\160\171\157\172\156\173\154\174\152\175\271\176" +
    "\270\177\265\200\264\201\263\202\262\203\261\204\260" +
    "\205\256\207\066\210\224\211\214\001\uff1a\000\004\137" +
    "\u01b7\001\002\000\002\001\ufe78\000\162\031\175\032\221" +
    "\033\225\034\226\036\u0179\037\251\044\146\047\355\053" +
    "\312\072\347\073\173\077\350\100\202\102\303\103\272" +
    "\104\u017d\105\204\112\227\113\u0182\114\070\115\u017a\124" +
    "\170\125\u017e\142\u0180\143\u017f\150\071\152\236\153\u0181" +
    "\154\352\155\063\156\253\157\360\160\246\161\351\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\002\001\uff0b\000\004\074" +
    "\u01bb\001\uff09\000\144\031\175\032\221\033\225\034\226" +
    "\036\u0179\044\146\047\355\053\312\072\347\073\173\077" +
    "\350\100\202\104\u017d\105\204\113\u0182\114\070\115\u017a" +
    "\125\u017e\142\u0180\143\u017f\150\071\153\u0181\154\352\155" +
    "\063\157\360\160\246\161\351\162\067\164\164\165\163" +
    "\166\162\167\161\170\160\171\157\172\156\173\154\174" +
    "\152\175\271\176\270\177\265\200\264\201\263\202\262" +
    "\203\261\204\260\205\256\207\066\210\224\211\214\001" +
    "\002\000\126\031\175\032\221\033\225\034\226\044\146" +
    "\047\276\053\312\072\306\073\173\077\242\100\202\105" +
    "\204\114\070\142\064\150\071\154\237\155\063\157\176" +
    "\160\246\161\212\162\067\164\164\165\163\166\162\167" +
    "\161\170\160\171\157\172\156\173\154\174\152\175\271" +
    "\176\270\177\265\200\264\201\263\202\262\203\261\204" +
    "\260\205\256\207\066\210\224\211\214\001\002\000\126" +
    "\031\175\032\221\033\225\034\226\044\146\047\276\053" +
    "\312\072\306\073\173\077\242\100\202\105\204\114\070" +
    "\142\064\150\071\154\237\155\063\157\176\160\246\161" +
    "\212\162\067\164\164\165\163\166\162\167\161\170\160" +
    "\171\157\172\156\173\154\174\152\175\271\176\270\177" +
    "\265\200\264\201\263\202\262\203\261\204\260\205\256" +
    "\207\066\210\224\211\214\001\002\000\126\031\175\032" +
    "\221\033\225\034\226\044\146\047\276\053\312\072\306" +
    "\073\173\077\242\100\202\105\204\114\070\142\064\150" +
    "\071\154\237\155\063\157\176\160\246\161\212\162\067" +
    "\164\164\165\163\166\162\167\161\170\160\171\157\172" +
    "\156\173\154\174\152\175\271\176\270\177\265\200\264" +
    "\201\263\202\262\203\261\204\260\205\256\207\066\210" +
    "\224\211\214\001\002\000\126\031\175\032\221\033\225" +
    "\034\226\044\146\047\276\053\312\072\306\073\173\077" +
    "\242\100\202\105\204\114\070\142\064\150\071\154\237" +
    "\155\063\157\176\160\246\161\212\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\126\031\175\032\221\033\225\034\226\044" +
    "\146\047\276\053\312\072\306\073\173\077\242\100\202" +
    "\105\204\114\070\142\064\150\071\154\237\155\063\157" +
    "\176\160\246\161\212\162\067\164\164\165\163\166\162" +
    "\167\161\170\160\171\157\172\156\173\154\174\152\175" +
    "\271\176\270\177\265\200\264\201\263\202\262\203\261" +
    "\204\260\205\256\207\066\210\224\211\214\001\002\000" +
    "\126\031\175\032\221\033\225\034\226\044\146\047\276" +
    "\053\312\072\306\073\173\077\242\100\202\105\204\114" +
    "\070\142\064\150\071\154\237\155\063\157\176\160\246" +
    "\161\212\162\067\164\164\165\163\166\162\167\161\170" +
    "\160\171\157\172\156\173\154\174\152\175\271\176\270" +
    "\177\265\200\264\201\263\202\262\203\261\204\260\205" +
    "\256\207\066\210\224\211\214\001\002\000\126\031\175" +
    "\032\221\033\225\034\226\044\146\047\276\053\312\072" +
    "\306\073\173\077\242\100\202\105\204\114\070\142\064" +
    "\150\071\154\237\155\063\157\176\160\246\161\212\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\126\031\175\032\221\033" +
    "\225\034\226\044\146\047\276\053\312\072\306\073\173" +
    "\077\242\100\202\105\204\114\070\142\064\150\071\154" +
    "\237\155\063\157\176\160\246\161\212\162\067\164\164" +
    "\165\163\166\162\167\161\170\160\171\157\172\156\173" +
    "\154\174\152\175\271\176\270\177\265\200\264\201\263" +
    "\202\262\203\261\204\260\205\256\207\066\210\224\211" +
    "\214\001\002\000\126\031\175\032\221\033\225\034\226" +
    "\044\146\047\276\053\312\072\306\073\173\077\242\100" +
    "\202\105\204\114\070\142\064\150\071\154\237\155\063" +
    "\157\176\160\246\161\212\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\126\031\175\032\221\033\225\034\226\044\146\047" +
    "\276\053\312\072\306\073\173\077\242\100\202\105\204" +
    "\114\070\142\064\150\071\154\237\155\063\157\176\160" +
    "\246\161\212\162\067\164\164\165\163\166\162\167\161" +
    "\170\160\171\157\172\156\173\154\174\152\175\271\176" +
    "\270\177\265\200\264\201\263\202\262\203\261\204\260" +
    "\205\256\207\066\210\224\211\214\001\002\000\126\031" +
    "\175\032\221\033\225\034\226\044\146\047\276\053\312" +
    "\072\306\073\173\077\242\100\202\105\204\114\070\142" +
    "\064\150\071\154\237\155\063\157\176\160\246\161\212" +
    "\162\067\164\164\165\163\166\162\167\161\170\160\171" +
    "\157\172\156\173\154\174\152\175\271\176\270\177\265" +
    "\200\264\201\263\202\262\203\261\204\260\205\256\207" +
    "\066\210\224\211\214\001\002\000\126\031\175\032\221" +
    "\033\225\034\226\044\146\047\276\053\312\072\306\073" +
    "\173\077\242\100\202\105\204\114\070\142\064\150\071" +
    "\154\237\155\063\157\176\160\246\161\212\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\010\144\u0133\145\u0131\146\u0132\001" +
    "\ufed7\000\002\001\ufeeb\000\010\144\u0133\145\u0131\146\u0132" +
    "\001\ufed8\000\002\001\ufeec\000\010\144\u0133\145\u0131\146" +
    "\u0132\001\ufed1\000\002\001\ufee5\000\010\144\u0133\145\u0131" +
    "\146\u0132\001\ufed6\000\002\001\ufeea\000\010\144\u0133\145" +
    "\u0131\146\u0132\001\ufed0\000\002\001\ufee4\000\010\144\u0133" +
    "\145\u0131\146\u0132\001\ufecf\000\002\001\ufee3\000\010\144" +
    "\u0133\145\u0131\146\u0132\001\ufece\000\002\001\ufee2\000\010" +
    "\144\u0133\145\u0131\146\u0132\001\ufed5\000\002\001\ufee9\000" +
    "\010\144\u0133\145\u0131\146\u0132\001\ufed9\000\002\001\ufeed" +
    "\000\010\144\u0133\145\u0131\146\u0132\001\ufed2\000\002\001" +
    "\ufee6\000\010\144\u0133\145\u0131\146\u0132\001\ufed4\000\002" +
    "\001\ufee8\000\010\144\u0133\145\u0131\146\u0132\001\ufed3\000" +
    "\002\001\ufee7\000\002\001\ufe6a\000\002\001\ufe6d\000\002" +
    "\001\ufef1\000\002\001\ufef0\000\142\031\175\032\221\033" +
    "\225\034\377\037\251\044\146\047\355\053\376\073\173" +
    "\077\374\100\202\102\303\103\272\105\204\112\227\114" +
    "\070\124\170\142\064\150\071\152\236\154\352\155\063" +
    "\156\253\157\u0100\160\246\161\351\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\002\001\ufe74\000\142\031\175\032\221\033" +
    "\225\034\226\037\251\044\146\047\355\053\312\073\173" +
    "\077\364\100\202\102\303\103\272\105\204\112\227\114" +
    "\070\124\170\142\064\150\071\152\236\154\352\155\063" +
    "\156\253\157\366\160\246\161\351\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\002\001\ufe7f\000\004\140\u01e9\001\002\000" +
    "\002\001\ufe5c\000\170\031\175\032\221\033\225\034\226" +
    "\036\201\037\251\044\146\047\276\053\u01f7\062\u01f3\072" +
    "\306\073\173\077\242\100\202\102\303\103\272\104\230" +
    "\105\204\112\227\113\300\114\070\115\211\124\170\125" +
    "\231\130\u01f4\134\u0203\142\255\143\254\150\071\152\236" +
    "\153\273\154\237\155\063\156\253\157\176\160\246\161" +
    "\212\162\067\164\u01f2\165\u01f1\166\u01f0\167\u01ef\170\u01ee" +
    "\171\u01ed\172\u01ec\173\u01eb\174\u01ea\175\u0202\176\u0201\177" +
    "\u0200\200\u01ff\201\u01fe\202\u01fd\203\u01fc\204\u01fb\205\u01f9" +
    "\207\066\210\224\211\214\001\002\000\170\031\175\032" +
    "\221\033\225\034\226\036\201\037\251\044\146\047\276" +
    "\053\u01f7\062\u01f3\072\306\073\173\077\242\100\202\102" +
    "\303\103\272\104\230\105\204\112\227\113\300\114\070" +
    "\115\211\124\170\125\231\130\u01f4\134\u0203\142\255\143" +
    "\254\150\071\152\236\153\273\154\237\155\063\156\253" +
    "\157\176\160\246\161\212\162\067\164\u01f2\165\u01f1\166" +
    "\u01f0\167\u01ef\170\u01ee\171\u01ed\172\u01ec\173\u01eb\174\u01ea" +
    "\175\u0202\176\u0201\177\u0200\200\u01ff\201\u01fe\202\u01fd\203" +
    "\u01fc\204\u01fb\205\u01f9\207\066\210\224\211\214\001\002" +
    "\000\170\031\175\032\221\033\225\034\226\036\201\037" +
    "\251\044\146\047\276\053\u01f7\062\u01f3\072\306\073\173" +
    "\077\242\100\202\102\303\103\272\104\230\105\204\112" +
    "\227\113\300\114\070\115\211\124\170\125\231\130\u01f4" +
    "\134\u0203\142\255\143\254\150\071\152\236\153\273\154" +
    "\237\155\063\156\253\157\176\160\246\161\212\162\067" +
    "\164\u01f2\165\u01f1\166\u01f0\167\u01ef\170\u01ee\171\u01ed\172" +
    "\u01ec\173\u01eb\174\u01ea\175\u0202\176\u0201\177\u0200\200\u01ff" +
    "\201\u01fe\202\u01fd\203\u01fc\204\u01fb\205\u01f9\207\066\210" +
    "\224\211\214\001\002\000\170\031\175\032\221\033\225" +
    "\034\226\036\201\037\251\044\146\047\276\053\u01f7\062" +
    "\u01f3\072\306\073\173\077\242\100\202\102\303\103\272" +
    "\104\230\105\204\112\227\113\300\114\070\115\211\124" +
    "\170\125\231\130\u01f4\134\u0203\142\255\143\254\150\071" +
    "\152\236\153\273\154\237\155\063\156\253\157\176\160" +
    "\246\161\212\162\067\164\u01f2\165\u01f1\166\u01f0\167\u01ef" +
    "\170\u01ee\171\u01ed\172\u01ec\173\u01eb\174\u01ea\175\u0202\176" +
    "\u0201\177\u0200\200\u01ff\201\u01fe\202\u01fd\203\u01fc\204\u01fb" +
    "\205\u01f9\207\066\210\224\211\214\001\002\000\170\031" +
    "\175\032\221\033\225\034\226\036\201\037\251\044\146" +
    "\047\276\053\u01f7\062\u01f3\072\306\073\173\077\242\100" +
    "\202\102\303\103\272\104\230\105\204\112\227\113\300" +
    "\114\070\115\211\124\170\125\231\130\u01f4\134\u0203\142" +
    "\255\143\254\150\071\152\236\153\273\154\237\155\063" +
    "\156\253\157\176\160\246\161\212\162\067\164\u01f2\165" +
    "\u01f1\166\u01f0\167\u01ef\170\u01ee\171\u01ed\172\u01ec\173\u01eb" +
    "\174\u01ea\175\u0202\176\u0201\177\u0200\200\u01ff\201\u01fe\202" +
    "\u01fd\203\u01fc\204\u01fb\205\u01f9\207\066\210\224\211\214" +
    "\001\002\000\170\031\175\032\221\033\225\034\226\036" +
    "\201\037\251\044\146\047\276\053\u01f7\062\u01f3\072\306" +
    "\073\173\077\242\100\202\102\303\103\272\104\230\105" +
    "\204\112\227\113\300\114\070\115\211\124\170\125\231" +
    "\130\u01f4\134\u0203\142\255\143\254\150\071\152\236\153" +
    "\273\154\237\155\063\156\253\157\176\160\246\161\212" +
    "\162\067\164\u01f2\165\u01f1\166\u01f0\167\u01ef\170\u01ee\171" +
    "\u01ed\172\u01ec\173\u01eb\174\u01ea\175\u0202\176\u0201\177\u0200" +
    "\200\u01ff\201\u01fe\202\u01fd\203\u01fc\204\u01fb\205\u01f9\207" +
    "\066\210\224\211\214\001\002\000\170\031\175\032\221" +
    "\033\225\034\226\036\201\037\251\044\146\047\276\053" +
    "\u01f7\062\u01f3\072\306\073\173\077\242\100\202\102\303" +
    "\103\272\104\230\105\204\112\227\113\300\114\070\115" +
    "\211\124\170\125\231\130\u01f4\134\u0203\142\255\143\254" +
    "\150\071\152\236\153\273\154\237\155\063\156\253\157" +
    "\176\160\246\161\212\162\067\164\u01f2\165\u01f1\166\u01f0" +
    "\167\u01ef\170\u01ee\171\u01ed\172\u01ec\173\u01eb\174\u01ea\175" +
    "\u0202\176\u0201\177\u0200\200\u01ff\201\u01fe\202\u01fd\203\u01fc" +
    "\204\u01fb\205\u01f9\207\066\210\224\211\214\001\002\000" +
    "\170\031\175\032\221\033\225\034\226\036\201\037\251" +
    "\044\146\047\276\053\u01f7\062\u01f3\072\306\073\173\077" +
    "\242\100\202\102\303\103\272\104\230\105\204\112\227" +
    "\113\300\114\070\115\211\124\170\125\231\130\u01f4\134" +
    "\u0203\142\255\143\254\150\071\152\236\153\273\154\237" +
    "\155\063\156\253\157\176\160\246\161\212\162\067\164" +
    "\u01f2\165\u01f1\166\u01f0\167\u01ef\170\u01ee\171\u01ed\172\u01ec" +
    "\173\u01eb\174\u01ea\175\u0202\176\u0201\177\u0200\200\u01ff\201" +
    "\u01fe\202\u01fd\203\u01fc\204\u01fb\205\u01f9\207\066\210\224" +
    "\211\214\001\002\000\170\031\175\032\221\033\225\034" +
    "\226\036\201\037\251\044\146\047\276\053\u01f7\062\u01f3" +
    "\072\306\073\173\077\242\100\202\102\303\103\272\104" +
    "\230\105\204\112\227\113\300\114\070\115\211\124\170" +
    "\125\231\130\u01f4\134\u0203\142\255\143\254\150\071\152" +
    "\236\153\273\154\237\155\063\156\253\157\176\160\246" +
    "\161\212\162\067\164\u01f2\165\u01f1\166\u01f0\167\u01ef\170" +
    "\u01ee\171\u01ed\172\u01ec\173\u01eb\174\u01ea\175\u0202\176\u0201" +
    "\177\u0200\200\u01ff\201\u01fe\202\u01fd\203\u01fc\204\u01fb\205" +
    "\u01f9\207\066\210\224\211\214\001\002\000\010\142\076" +
    "\160\072\207\066\001\002\000\010\142\076\160\072\207" +
    "\066\001\002\000\006\051\u022c\052\143\001\002\000\012" +
    "\045\331\052\u0226\100\330\136\u0228\001\002\000\012\101" +
    "\313\142\076\160\072\207\066\001\002\000\002\001\uff2b" +
    "\000\170\031\175\032\221\033\225\034\226\036\201\037" +
    "\251\044\146\047\276\053\u01f7\062\u01f3\072\306\073\173" +
    "\077\242\100\202\102\303\103\272\104\230\105\204\112" +
    "\227\113\300\114\070\115\211\124\170\125\231\130\u01f4" +
    "\134\u0203\142\255\143\254\150\071\152\236\153\273\154" +
    "\237\155\063\156\253\157\176\160\246\161\212\162\067" +
    "\164\u01f2\165\u01f1\166\u01f0\167\u01ef\170\u01ee\171\u01ed\172" +
    "\u01ec\173\u01eb\174\u01ea\175\u0202\176\u0201\177\u0200\200\u01ff" +
    "\201\u01fe\202\u01fd\203\u01fc\204\u01fb\205\u01f9\207\066\210" +
    "\224\211\214\001\002\000\006\051\uff5d\052\uff5d\001\uff6e" +
    "\000\170\031\175\032\221\033\225\034\226\036\201\037" +
    "\251\044\146\047\276\053\u01f7\062\u01f3\072\306\073\173" +
    "\077\242\100\202\102\303\103\272\104\230\105\204\112" +
    "\227\113\300\114\070\115\211\124\170\125\231\130\u01f4" +
    "\134\u0203\142\255\143\254\150\071\152\236\153\273\154" +
    "\237\155\063\156\253\157\176\160\246\161\212\162\067" +
    "\164\u01f2\165\u01f1\166\u01f0\167\u01ef\170\u01ee\171\u01ed\172" +
    "\u01ec\173\u01eb\174\u01ea\175\u0202\176\u0201\177\u0200\200\u01ff" +
    "\201\u01fe\202\u01fd\203\u01fc\204\u01fb\205\u01f9\207\066\210" +
    "\224\211\214\001\002\000\170\031\175\032\221\033\225" +
    "\034\226\036\201\037\251\044\146\047\276\053\u01f7\062" +
    "\u01f3\072\306\073\173\077\242\100\202\102\303\103\272" +
    "\104\230\105\204\112\227\113\300\114\070\115\211\124" +
    "\170\125\231\130\u01f4\134\u0203\142\255\143\254\150\071" +
    "\152\236\153\273\154\237\155\063\156\253\157\176\160" +
    "\246\161\212\162\067\164\u01f2\165\u01f1\166\u01f0\167\u01ef" +
    "\170\u01ee\171\u01ed\172\u01ec\173\u01eb\174\u01ea\175\u0202\176" +
    "\u0201\177\u0200\200\u01ff\201\u01fe\202\u01fd\203\u01fc\204\u01fb" +
    "\205\u01f9\207\066\210\224\211\214\001\002\000\170\031" +
    "\175\032\221\033\225\034\226\036\201\037\251\044\146" +
    "\047\276\053\u01f7\062\u01f3\072\306\073\173\077\242\100" +
    "\202\102\303\103\272\104\230\105\204\112\227\113\300" +
    "\114\070\115\211\124\170\125\231\130\u01f4\134\u0203\142" +
    "\255\143\254\150\071\152\236\153\273\154\237\155\063" +
    "\156\253\157\176\160\246\161\212\162\067\164\u01f2\165" +
    "\u01f1\166\u01f0\167\u01ef\170\u01ee\171\u01ed\172\u01ec\173\u01eb" +
    "\174\u01ea\175\u0202\176\u0201\177\u0200\200\u01ff\201\u01fe\202" +
    "\u01fd\203\u01fc\204\u01fb\205\u01f9\207\066\210\224\211\214" +
    "\001\002\000\170\031\175\032\221\033\225\034\226\036" +
    "\201\037\251\044\146\047\276\053\u01f7\062\u01f3\072\306" +
    "\073\173\077\242\100\202\102\303\103\272\104\230\105" +
    "\204\112\227\113\300\114\070\115\211\124\170\125\231" +
    "\130\u01f4\134\u0203\142\255\143\254\150\071\152\236\153" +
    "\273\154\237\155\063\156\253\157\176\160\246\161\212" +
    "\162\067\164\u01f2\165\u01f1\166\u01f0\167\u01ef\170\u01ee\171" +
    "\u01ed\172\u01ec\173\u01eb\174\u01ea\175\u0202\176\u0201\177\u0200" +
    "\200\u01ff\201\u01fe\202\u01fd\203\u01fc\204\u01fb\205\u01f9\207" +
    "\066\210\224\211\214\001\002\000\170\031\175\032\221" +
    "\033\225\034\226\036\201\037\251\044\146\047\276\053" +
    "\u01f7\062\u01f3\072\306\073\173\077\242\100\202\102\303" +
    "\103\272\104\230\105\204\112\227\113\300\114\070\115" +
    "\211\124\170\125\231\130\u01f4\134\u0203\142\255\143\254" +
    "\150\071\152\236\153\273\154\237\155\063\156\253\157" +
    "\176\160\246\161\212\162\067\164\u01f2\165\u01f1\166\u01f0" +
    "\167\u01ef\170\u01ee\171\u01ed\172\u01ec\173\u01eb\174\u01ea\175" +
    "\u0202\176\u0201\177\u0200\200\u01ff\201\u01fe\202\u01fd\203\u01fc" +
    "\204\u01fb\205\u01f9\207\066\210\224\211\214\001\002\000" +
    "\170\031\175\032\221\033\225\034\226\036\201\037\251" +
    "\044\146\047\276\053\u01f7\062\u01f3\072\306\073\173\077" +
    "\242\100\202\102\303\103\272\104\230\105\204\112\227" +
    "\113\300\114\070\115\211\124\170\125\231\130\u01f4\134" +
    "\u0203\142\255\143\254\150\071\152\236\153\273\154\237" +
    "\155\063\156\253\157\176\160\246\161\212\162\067\164" +
    "\u01f2\165\u01f1\166\u01f0\167\u01ef\170\u01ee\171\u01ed\172\u01ec" +
    "\173\u01eb\174\u01ea\175\u0202\176\u0201\177\u0200\200\u01ff\201" +
    "\u01fe\202\u01fd\203\u01fc\204\u01fb\205\u01f9\207\066\210\224" +
    "\211\214\001\002\000\170\031\175\032\221\033\225\034" +
    "\226\036\201\037\251\044\146\047\276\053\u01f7\062\u01f3" +
    "\072\306\073\173\077\242\100\202\102\303\103\272\104" +
    "\230\105\204\112\227\113\300\114\070\115\211\124\170" +
    "\125\231\130\u01f4\134\u0203\142\255\143\254\150\071\152" +
    "\236\153\273\154\237\155\063\156\253\157\176\160\246" +
    "\161\212\162\067\164\u01f2\165\u01f1\166\u01f0\167\u01ef\170" +
    "\u01ee\171\u01ed\172\u01ec\173\u01eb\174\u01ea\175\u0202\176\u0201" +
    "\177\u0200\200\u01ff\201\u01fe\202\u01fd\203\u01fc\204\u01fb\205" +
    "\u01f9\207\066\210\224\211\214\001\002\000\170\031\175" +
    "\032\221\033\225\034\226\036\201\037\251\044\146\047" +
    "\276\053\u01f7\062\u01f3\072\306\073\173\077\242\100\202" +
    "\102\303\103\272\104\230\105\204\112\227\113\300\114" +
    "\070\115\211\124\170\125\231\130\u01f4\134\u0203\142\255" +
    "\143\254\150\071\152\236\153\273\154\237\155\063\156" +
    "\253\157\176\160\246\161\212\162\067\164\u01f2\165\u01f1" +
    "\166\u01f0\167\u01ef\170\u01ee\171\u01ed\172\u01ec\173\u01eb\174" +
    "\u01ea\175\u0202\176\u0201\177\u0200\200\u01ff\201\u01fe\202\u01fd" +
    "\203\u01fc\204\u01fb\205\u01f9\207\066\210\224\211\214\001" +
    "\002\000\012\053\u0204\142\076\160\072\207\066\001\002" +
    "\000\010\142\076\160\072\207\066\001\002\000\006\051" +
    "\u0206\052\143\001\002\000\162\031\175\032\221\033\225" +
    "\034\226\036\201\037\251\044\146\047\276\053\u0208\072" +
    "\306\073\173\077\242\100\202\102\303\103\272\104\230" +
    "\105\204\112\227\113\300\114\070\115\211\124\170\125" +
    "\231\142\255\143\254\150\071\152\236\153\273\154\237" +
    "\155\063\156\253\157\176\160\246\161\212\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\002\001\uff41\000\164\031\175\032" +
    "\221\033\225\034\226\036\201\037\251\044\146\047\276" +
    "\053\312\072\306\073\173\077\242\100\202\101\313\102" +
    "\303\103\272\104\230\105\204\112\227\113\300\114\070" +
    "\115\211\124\170\125\231\142\255\143\254\150\071\152" +
    "\236\153\273\154\237\155\063\156\253\157\176\160\246" +
    "\161\212\162\067\164\164\165\163\166\162\167\161\170" +
    "\160\171\157\172\156\173\154\174\152\175\271\176\270" +
    "\177\265\200\264\201\263\202\262\203\261\204\260\205" +
    "\256\207\066\210\224\211\214\001\002\000\002\001\uff3b" +
    "\000\006\051\u020b\052\143\001\002\000\162\031\175\032" +
    "\221\033\225\034\226\036\201\037\251\044\146\047\276" +
    "\053\u020d\072\306\073\173\077\242\100\202\102\303\103" +
    "\272\104\230\105\204\112\227\113\300\114\070\115\211" +
    "\124\170\125\231\142\255\143\254\150\071\152\236\153" +
    "\273\154\237\155\063\156\253\157\176\160\246\161\212" +
    "\162\067\164\164\165\163\166\162\167\161\170\160\171" +
    "\157\172\156\173\154\174\152\175\271\176\270\177\265" +
    "\200\264\201\263\202\262\203\261\204\260\205\256\207" +
    "\066\210\224\211\214\001\002\000\002\001\uff42\000\164" +
    "\031\175\032\221\033\225\034\226\036\201\037\251\044" +
    "\146\047\276\053\312\072\306\073\173\077\242\100\202" +
    "\101\313\102\303\103\272\104\230\105\204\112\227\113" +
    "\300\114\070\115\211\124\170\125\231\142\255\143\254" +
    "\150\071\152\236\153\273\154\237\155\063\156\253\157" +
    "\176\160\246\161\212\162\067\164\164\165\163\166\162" +
    "\167\161\170\160\171\157\172\156\173\154\174\152\175" +
    "\271\176\270\177\265\200\264\201\263\202\262\203\261" +
    "\204\260\205\256\207\066\210\224\211\214\001\002\000" +
    "\002\001\uff3c\000\004\175\u0210\001\002\000\002\001\uff4e" +
    "\000\004\176\u0212\001\002\000\002\001\uff4d\000\004\177" +
    "\u0214\001\002\000\002\001\uff4c\000\004\200\u0216\001\002" +
    "\000\002\001\uff4b\000\004\201\u0218\001\002\000\002\001" +
    "\uff4a\000\004\202\u021a\001\002\000\002\001\uff49\000\004" +
    "\203\u021c\001\002\000\002\001\uff48\000\004\204\u021e\001" +
    "\002\000\002\001\uff47\000\004\205\u0220\001\002\000\002" +
    "\001\uff46\000\006\051\u0222\052\143\001\002\000\162\031" +
    "\175\032\221\033\225\034\226\036\201\037\251\044\146" +
    "\047\276\053\u0224\072\306\073\173\077\242\100\202\102" +
    "\303\103\272\104\230\105\204\112\227\113\300\114\070" +
    "\115\211\124\170\125\231\142\255\143\254\150\071\152" +
    "\236\153\273\154\237\155\063\156\253\157\176\160\246" +
    "\161\212\162\067\164\164\165\163\166\162\167\161\170" +
    "\160\171\157\172\156\173\154\174\152\175\271\176\270" +
    "\177\265\200\264\201\263\202\262\203\261\204\260\205" +
    "\256\207\066\210\224\211\214\001\002\000\002\001\uff43" +
    "\000\164\031\175\032\221\033\225\034\226\036\201\037" +
    "\251\044\146\047\276\053\312\072\306\073\173\077\242" +
    "\100\202\101\313\102\303\103\272\104\230\105\204\112" +
    "\227\113\300\114\070\115\211\124\170\125\231\142\255" +
    "\143\254\150\071\152\236\153\273\154\237\155\063\156" +
    "\253\157\176\160\246\161\212\162\067\164\164\165\163" +
    "\166\162\167\161\170\160\171\157\172\156\173\154\174" +
    "\152\175\271\176\270\177\265\200\264\201\263\202\262" +
    "\203\261\204\260\205\256\207\066\210\224\211\214\001" +
    "\002\000\002\001\uff3d\000\064\053\u022a\062\u01f3\130\u01f4" +
    "\134\u0203\142\076\160\072\164\137\165\136\166\135\167" +
    "\133\170\132\171\130\172\127\173\126\174\124\175\122" +
    "\176\121\177\120\200\117\201\116\202\115\203\114\204" +
    "\113\205\111\207\066\001\002\000\004\136\u0229\001\002" +
    "\000\002\001\ufe45\000\002\001\ufe46\000\010\142\076\160" +
    "\072\207\066\001\002\000\002\001\uff2c\000\162\031\175" +
    "\032\221\033\225\034\226\036\201\037\251\044\146\047" +
    "\276\053\u022e\072\306\073\173\077\242\100\202\102\303" +
    "\103\272\104\230\105\204\112\227\113\300\114\070\115" +
    "\211\124\170\125\231\142\255\143\254\150\071\152\236" +
    "\153\273\154\237\155\063\156\253\157\176\160\246\161" +
    "\212\162\067\164\164\165\163\166\162\167\161\170\160" +
    "\171\157\172\156\173\154\174\152\175\271\176\270\177" +
    "\265\200\264\201\263\202\262\203\261\204\260\205\256" +
    "\207\066\210\224\211\214\001\002\000\002\001\uff40\000" +
    "\164\031\175\032\221\033\225\034\226\036\201\037\251" +
    "\044\146\047\276\053\312\072\306\073\173\077\242\100" +
    "\202\101\313\102\303\103\272\104\230\105\204\112\227" +
    "\113\300\114\070\115\211\124\170\125\231\142\255\143" +
    "\254\150\071\152\236\153\273\154\237\155\063\156\253" +
    "\157\176\160\246\161\212\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\002\001\uff3a\000\006\051\145\052\143\001\002\000" +
    "\006\051\u0232\052\143\001\002\000\162\031\175\032\221" +
    "\033\225\034\226\036\201\037\251\044\146\047\276\053" +
    "\u0234\072\306\073\173\077\242\100\202\102\303\103\272" +
    "\104\230\105\204\112\227\113\300\114\070\115\211\124" +
    "\170\125\231\142\255\143\254\150\071\152\236\153\273" +
    "\154\237\155\063\156\253\157\176\160\246\161\212\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\002\001\uff44\000\164\031" +
    "\175\032\221\033\225\034\226\036\201\037\251\044\146" +
    "\047\276\053\312\072\306\073\173\077\242\100\202\101" +
    "\313\102\303\103\272\104\230\105\204\112\227\113\300" +
    "\114\070\115\211\124\170\125\231\142\255\143\254\150" +
    "\071\152\236\153\273\154\237\155\063\156\253\157\176" +
    "\160\246\161\212\162\067\164\164\165\163\166\162\167" +
    "\161\170\160\171\157\172\156\173\154\174\152\175\271" +
    "\176\270\177\265\200\264\201\263\202\262\203\261\204" +
    "\260\205\256\207\066\210\224\211\214\001\002\000\002" +
    "\001\uff3e\000\004\164\u0239\001\002\000\004\164\u0238\001" +
    "\002\000\002\001\uff57\000\002\001\ufe5b\000\004\165\u023d" +
    "\001\002\000\004\165\u023c\001\002\000\002\001\uff56\000" +
    "\002\001\ufe5a\000\004\166\u0241\001\002\000\004\166\u0240" +
    "\001\002\000\002\001\uff55\000\002\001\ufe59\000\004\167" +
    "\u0245\001\002\000\004\167\u0244\001\002\000\002\001\uff54" +
    "\000\002\001\ufe58\000\004\170\u0249\001\002\000\004\170" +
    "\u0248\001\002\000\002\001\uff53\000\002\001\ufe57\000\004" +
    "\171\u024d\001\002\000\004\171\u024c\001\002\000\002\001" +
    "\uff52\000\002\001\ufe56\000\004\172\u0251\001\002\000\004" +
    "\172\u0250\001\002\000\002\001\uff51\000\002\001\ufe55\000" +
    "\004\173\u0255\001\002\000\004\173\u0254\001\002\000\002" +
    "\001\uff50\000\002\001\ufe54\000\004\174\u0259\001\002\000" +
    "\004\174\u0258\001\002\000\002\001\uff4f\000\002\001\ufe53" +
    "\000\010\144\u0133\145\u0131\146\u0132\001\ufecd\000\002\001" +
    "\ufee1\000\002\001\ufea9\000\002\001\ufea6\000\142\031\175" +
    "\032\221\033\225\034\226\037\251\044\146\047\355\053" +
    "\312\073\173\077\364\100\202\102\303\103\272\105\204" +
    "\112\227\114\070\124\170\142\064\150\071\152\236\154" +
    "\352\155\063\156\253\157\366\160\246\161\351\162\067" +
    "\164\164\165\163\166\162\167\161\170\160\171\157\172" +
    "\156\173\154\174\152\175\271\176\270\177\265\200\264" +
    "\201\263\202\262\203\261\204\260\205\256\207\066\210" +
    "\224\211\214\001\002\000\002\001\ufe9f\000\010\045\331" +
    "\052\u0145\100\330\001\002\000\002\001\uff0e\000\142\031" +
    "\175\032\221\033\225\034\226\037\251\044\146\047\355" +
    "\053\312\073\173\077\364\100\202\102\303\103\272\105" +
    "\204\112\227\114\070\124\170\142\064\150\071\152\236" +
    "\154\352\155\063\156\253\157\366\160\246\161\351\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\142\031\175\032\221\033" +
    "\225\034\226\037\251\044\146\047\355\053\312\073\173" +
    "\077\364\100\202\102\303\103\272\105\204\112\227\114" +
    "\070\124\170\142\064\150\071\152\236\154\352\155\063" +
    "\156\253\157\366\160\246\161\351\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\002\001\ufe87\000\002\001\ufe83\000\162\031" +
    "\175\032\221\033\225\034\226\036\201\037\251\044\146" +
    "\047\276\053\312\072\306\073\173\077\242\100\202\102" +
    "\303\103\272\104\230\105\204\112\227\113\300\114\070" +
    "\115\211\124\170\125\231\142\255\143\254\150\071\152" +
    "\236\153\273\154\237\155\063\156\253\157\176\160\246" +
    "\161\212\162\067\164\164\165\163\166\162\167\161\170" +
    "\160\171\157\172\156\173\154\174\152\175\271\176\270" +
    "\177\265\200\264\201\263\202\262\203\261\204\260\205" +
    "\256\207\066\210\224\211\214\001\002\000\162\031\175" +
    "\032\221\033\225\034\226\036\u0179\037\251\044\146\047" +
    "\355\053\312\072\347\073\173\077\350\100\202\102\303" +
    "\103\272\104\u017d\105\204\112\227\113\u0182\114\070\115" +
    "\u017a\124\170\125\u017e\142\u0180\143\u017f\150\071\152\236" +
    "\153\u0181\154\352\155\063\156\253\157\360\160\246\161" +
    "\351\162\067\164\164\165\163\166\162\167\161\170\160" +
    "\171\157\172\156\173\154\174\152\175\271\176\270\177" +
    "\265\200\264\201\263\202\262\203\261\204\260\205\256" +
    "\207\066\210\224\211\214\001\002\000\002\001\ufef5\000" +
    "\002\001\ufeff\000\002\001\ufefd\000\004\056\u026c\001\ufefc" +
    "\000\162\031\175\032\221\033\225\034\226\036\201\037" +
    "\251\044\146\047\276\053\312\072\306\073\173\077\242" +
    "\100\202\102\303\103\272\104\230\105\204\112\227\113" +
    "\300\114\070\115\211\124\170\125\231\142\255\143\254" +
    "\150\071\152\236\153\273\154\237\155\063\156\253\157" +
    "\176\160\246\161\212\162\067\164\164\165\163\166\162" +
    "\167\161\170\160\171\157\172\156\173\154\174\152\175" +
    "\271\176\270\177\265\200\264\201\263\202\262\203\261" +
    "\204\260\205\256\207\066\210\224\211\214\001\002\000" +
    "\002\001\ufefe\000\002\001\uff01\000\002\001\uff00\000\002" +
    "\001\ufe48\000\002\001\uff38\000\164\031\175\032\221\033" +
    "\225\034\226\036\201\037\251\044\146\047\276\053\312" +
    "\072\306\073\173\077\242\100\202\101\313\102\303\103" +
    "\272\104\230\105\204\112\227\113\300\114\070\115\211" +
    "\124\170\125\231\142\255\143\254\150\071\152\236\153" +
    "\273\154\237\155\063\156\253\157\176\160\246\161\212" +
    "\162\067\164\164\165\163\166\162\167\161\170\160\171" +
    "\157\172\156\173\154\174\152\175\271\176\270\177\265" +
    "\200\264\201\263\202\262\203\261\204\260\205\256\207" +
    "\066\210\224\211\214\001\002\000\002\001\uff32\000\002" +
    "\001\uff5c\000\162\031\175\032\221\033\225\034\226\036" +
    "\201\037\251\044\146\047\276\053\u0277\072\306\073\173" +
    "\077\242\100\202\102\303\103\272\104\230\105\204\112" +
    "\227\113\300\114\070\115\211\124\170\125\231\142\255" +
    "\143\254\150\071\152\236\153\273\154\237\155\063\156" +
    "\253\157\176\160\246\161\212\162\067\164\164\165\163" +
    "\166\162\167\161\170\160\171\157\172\156\173\154\174" +
    "\152\175\271\176\270\177\265\200\264\201\263\202\262" +
    "\203\261\204\260\205\256\207\066\210\224\211\214\001" +
    "\002\000\002\001\uff33\000\164\031\175\032\221\033\225" +
    "\034\226\036\201\037\251\044\146\047\276\053\312\072" +
    "\306\073\173\077\242\100\202\101\313\102\303\103\272" +
    "\104\230\105\204\112\227\113\300\114\070\115\211\124" +
    "\170\125\231\142\255\143\254\150\071\152\236\153\273" +
    "\154\237\155\063\156\253\157\176\160\246\161\212\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\002\001\uff2d\000\010\051" +
    "\u0232\052\143\060\u027a\001\002\000\162\031\175\032\221" +
    "\033\225\034\226\036\201\037\251\044\146\047\276\053" +
    "\u027c\072\306\073\173\077\242\100\202\102\303\103\272" +
    "\104\230\105\204\112\227\113\300\114\070\115\211\124" +
    "\170\125\231\142\255\143\254\150\071\152\236\153\273" +
    "\154\237\155\063\156\253\157\176\160\246\161\212\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\002\001\uff37\000\164\031" +
    "\175\032\221\033\225\034\226\036\201\037\251\044\146" +
    "\047\276\053\312\072\306\073\173\077\242\100\202\101" +
    "\313\102\303\103\272\104\230\105\204\112\227\113\300" +
    "\114\070\115\211\124\170\125\231\142\255\143\254\150" +
    "\071\152\236\153\273\154\237\155\063\156\253\157\176" +
    "\160\246\161\212\162\067\164\164\165\163\166\162\167" +
    "\161\170\160\171\157\172\156\173\154\174\152\175\271" +
    "\176\270\177\265\200\264\201\263\202\262\203\261\204" +
    "\260\205\256\207\066\210\224\211\214\001\002\000\002" +
    "\001\uff31\000\002\001\uff25\000\066\052\131\053\110\062" +
    "\134\130\141\134\107\142\076\160\072\164\137\165\136" +
    "\166\135\167\133\170\132\171\130\172\127\173\126\174" +
    "\124\175\122\176\121\177\120\200\117\201\116\202\115" +
    "\203\114\204\113\205\111\207\066\001\uff28\000\002\001" +
    "\uff26\000\010\051\u0222\052\143\060\u0282\001\002\000\162" +
    "\031\175\032\221\033\225\034\226\036\201\037\251\044" +
    "\146\047\276\053\u0284\072\306\073\173\077\242\100\202" +
    "\102\303\103\272\104\230\105\204\112\227\113\300\114" +
    "\070\115\211\124\170\125\231\142\255\143\254\150\071" +
    "\152\236\153\273\154\237\155\063\156\253\157\176\160" +
    "\246\161\212\162\067\164\164\165\163\166\162\167\161" +
    "\170\160\171\157\172\156\173\154\174\152\175\271\176" +
    "\270\177\265\200\264\201\263\202\262\203\261\204\260" +
    "\205\256\207\066\210\224\211\214\001\002\000\002\001" +
    "\uff36\000\164\031\175\032\221\033\225\034\226\036\201" +
    "\037\251\044\146\047\276\053\312\072\306\073\173\077" +
    "\242\100\202\101\313\102\303\103\272\104\230\105\204" +
    "\112\227\113\300\114\070\115\211\124\170\125\231\142" +
    "\255\143\254\150\071\152\236\153\273\154\237\155\063" +
    "\156\253\157\176\160\246\161\212\162\067\164\164\165" +
    "\163\166\162\167\161\170\160\171\157\172\156\173\154" +
    "\174\152\175\271\176\270\177\265\200\264\201\263\202" +
    "\262\203\261\204\260\205\256\207\066\210\224\211\214" +
    "\001\002\000\002\001\uff30\000\010\142\076\160\072\207" +
    "\066\001\002\000\010\051\u0206\052\143\060\u0288\001\002" +
    "\000\162\031\175\032\221\033\225\034\226\036\201\037" +
    "\251\044\146\047\276\053\u028a\072\306\073\173\077\242" +
    "\100\202\102\303\103\272\104\230\105\204\112\227\113" +
    "\300\114\070\115\211\124\170\125\231\142\255\143\254" +
    "\150\071\152\236\153\273\154\237\155\063\156\253\157" +
    "\176\160\246\161\212\162\067\164\164\165\163\166\162" +
    "\167\161\170\160\171\157\172\156\173\154\174\152\175" +
    "\271\176\270\177\265\200\264\201\263\202\262\203\261" +
    "\204\260\205\256\207\066\210\224\211\214\001\002\000" +
    "\002\001\uff34\000\164\031\175\032\221\033\225\034\226" +
    "\036\201\037\251\044\146\047\276\053\312\072\306\073" +
    "\173\077\242\100\202\101\313\102\303\103\272\104\230" +
    "\105\204\112\227\113\300\114\070\115\211\124\170\125" +
    "\231\142\255\143\254\150\071\152\236\153\273\154\237" +
    "\155\063\156\253\157\176\160\246\161\212\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\002\001\uff2e\000\010\051\u020b\052" +
    "\143\060\u028d\001\002\000\162\031\175\032\221\033\225" +
    "\034\226\036\201\037\251\044\146\047\276\053\u028f\072" +
    "\306\073\173\077\242\100\202\102\303\103\272\104\230" +
    "\105\204\112\227\113\300\114\070\115\211\124\170\125" +
    "\231\142\255\143\254\150\071\152\236\153\273\154\237" +
    "\155\063\156\253\157\176\160\246\161\212\162\067\164" +
    "\164\165\163\166\162\167\161\170\160\171\157\172\156" +
    "\173\154\174\152\175\271\176\270\177\265\200\264\201" +
    "\263\202\262\203\261\204\260\205\256\207\066\210\224" +
    "\211\214\001\002\000\002\001\uff35\000\164\031\175\032" +
    "\221\033\225\034\226\036\201\037\251\044\146\047\276" +
    "\053\312\072\306\073\173\077\242\100\202\101\313\102" +
    "\303\103\272\104\230\105\204\112\227\113\300\114\070" +
    "\115\211\124\170\125\231\142\255\143\254\150\071\152" +
    "\236\153\273\154\237\155\063\156\253\157\176\160\246" +
    "\161\212\162\067\164\164\165\163\166\162\167\161\170" +
    "\160\171\157\172\156\173\154\174\152\175\271\176\270" +
    "\177\265\200\264\201\263\202\262\203\261\204\260\205" +
    "\256\207\066\210\224\211\214\001\002\000\002\001\uff2f" +
    "\000\004\051\u0292\001\002\000\162\031\175\032\221\033" +
    "\225\034\226\036\201\037\251\044\146\047\276\053\312" +
    "\072\306\073\173\077\242\100\202\102\303\103\272\104" +
    "\230\105\204\112\227\113\300\114\070\115\211\124\170" +
    "\125\231\142\255\143\254\150\071\152\236\153\273\154" +
    "\237\155\063\156\253\157\176\160\246\161\212\162\067" +
    "\164\164\165\163\166\162\167\161\170\160\171\157\172" +
    "\156\173\154\174\152\175\271\176\270\177\265\200\264" +
    "\201\263\202\262\203\261\204\260\205\256\207\066\210" +
    "\224\211\214\001\002\000\004\100\330\001\002\000\002" +
    "\001\uff84\000\004\140\u0296\001\002\000\004\051\u0297\001" +
    "\002\000\162\031\175\032\221\033\225\034\226\036\201" +
    "\037\251\044\146\047\276\053\312\072\306\073\173\077" +
    "\242\100\202\102\303\103\272\104\230\105\204\112\227" +
    "\113\300\114\070\115\211\124\170\125\231\142\255\143" +
    "\254\150\071\152\236\153\273\154\237\155\063\156\253" +
    "\157\176\160\246\161\212\162\067\164\164\165\163\166" +
    "\162\167\161\170\160\171\157\172\156\173\154\174\152" +
    "\175\271\176\270\177\265\200\264\201\263\202\262\203" +
    "\261\204\260\205\256\207\066\210\224\211\214\001\002" +
    "\000\004\100\330\001\002\000\002\001\uff85\000\004\100" +
    "\330\001\002\000\002\001\uff83\000\162\031\175\032\221" +
    "\033\225\034\226\036\201\037\251\044\146\047\276\053" +
    "\312\072\306\073\173\077\242\100\202\102\303\103\272" +
    "\104\230\105\204\112\227\113\300\114\070\115\211\124" +
    "\170\125\231\142\255\143\254\150\071\152\236\153\273" +
    "\154\237\155\063\156\253\157\176\160\246\161\212\162" +
    "\067\164\164\165\163\166\162\167\161\170\160\171\157" +
    "\172\156\173\154\174\152\175\271\176\270\177\265\200" +
    "\264\201\263\202\262\203\261\204\260\205\256\207\066" +
    "\210\224\211\214\001\002\000\066\052\131\053\110\062" +
    "\134\130\141\134\107\142\076\160\072\164\137\165\136" +
    "\166\135\167\133\170\132\171\130\172\127\173\126\174" +
    "\124\175\122\176\121\177\120\200\117\201\116\202\115" +
    "\203\114\204\113\205\111\207\066\001\uff28\000\066\052" +
    "\131\053\110\062\134\130\141\134\107\142\076\160\072" +
    "\164\137\165\136\166\135\167\133\170\132\171\130\172" +
    "\127\173\126\174\124\175\122\176\121\177\120\200\117" +
    "\201\116\202\115\203\114\204\113\205\111\207\066\001" +
    "\uff28\000\004\137\u02a0\001\002\000\004\051\u02a1\001\002" +
    "\000\162\031\175\032\221\033\225\034\226\036\201\037" +
    "\251\044\146\047\276\053\312\072\306\073\173\077\242" +
    "\100\202\102\303\103\272\104\230\105\204\112\227\113" +
    "\300\114\070\115\211\124\170\125\231\142\255\143\254" +
    "\150\071\152\236\153\273\154\237\155\063\156\253\157" +
    "\176\160\246\161\212\162\067\164\164\165\163\166\162" +
    "\167\161\170\160\171\157\172\156\173\154\174\152\175" +
    "\271\176\270\177\265\200\264\201\263\202\262\203\261" +
    "\204\260\205\256\207\066\210\224\211\214\001\002\000" +
    "\004\100\330\001\002\000\002\001\uff87\000\004\140\u02a5" +
    "\001\002\000\004\051\u02a6\001\002\000\162\031\175\032" +
    "\221\033\225\034\226\036\201\037\251\044\146\047\276" +
    "\053\312\072\306\073\173\077\242\100\202\102\303\103" +
    "\272\104\230\105\204\112\227\113\300\114\070\115\211" +
    "\124\170\125\231\142\255\143\254\150\071\152\236\153" +
    "\273\154\237\155\063\156\253\157\176\160\246\161\212" +
    "\162\067\164\164\165\163\166\162\167\161\170\160\171" +
    "\157\172\156\173\154\174\152\175\271\176\270\177\265" +
    "\200\264\201\263\202\262\203\261\204\260\205\256\207" +
    "\066\210\224\211\214\001\002\000\004\100\330\001\002" +
    "\000\002\001\uff88\000\004\100\330\001\002\000\002\001" +
    "\uff86\000\010\100\330\101\u02ba\105\u02b9\001\uff6e\000\004" +
    "\055\u02ad\001\002\000\010\142\076\160\072\207\066\001" +
    "\002\000\010\100\330\101\u02b1\105\u02b0\001\002\000\002" +
    "\001\uff7d\000\066\052\131\053\110\062\134\130\141\134" +
    "\107\142\076\160\072\164\137\165\136\166\135\167\133" +
    "\170\132\171\130\172\127\173\126\174\124\175\122\176" +
    "\121\177\120\200\117\201\116\202\115\203\114\204\113" +
    "\205\111\207\066\001\uff28\000\066\052\131\053\110\062" +
    "\134\130\141\134\107\142\076\160\072\164\137\165\136" +
    "\166\135\167\133\170\132\171\130\172\127\173\126\174" +
    "\124\175\122\176\121\177\120\200\117\201\116\202\115" +
    "\203\114\204\113\205\111\207\066\001\uff28\000\004\137" +
    "\u02b3\001\002\000\004\100\330\001\002\000\002\001\uff7e" +
    "\000\004\140\u02b6\001\002\000\004\100\330\001\002\000" +
    "\002\001\uff7f\000\002\001\uff80\000\066\052\131\053\110" +
    "\062\134\130\141\134\107\142\076\160\072\164\137\165" +
    "\136\166\135\167\133\170\132\171\130\172\127\173\126" +
    "\174\124\175\122\176\121\177\120\200\117\201\116\202" +
    "\115\203\114\204\113\205\111\207\066\001\uff28\000\066" +
    "\052\131\053\110\062\134\130\141\134\107\142\076\160" +
    "\072\164\137\165\136\166\135\167\133\170\132\171\130" +
    "\172\127\173\126\174\124\175\122\176\121\177\120\200" +
    "\117\201\116\202\115\203\114\204\113\205\111\207\066" +
    "\001\uff28\000\004\137\u02bc\001\002\000\004\100\330\001" +
    "\002\000\002\001\uff81\000\004\140\u02bf\001\002\000\004" +
    "\100\330\001\002\000\002\001\uff82\000\004\166\u02c2\001" +
    "\002\000\002\001\ufff1\000\004\175\u02c4\001\002\000\002" +
    "\001\uffea\000\004\167\u02c6\001\002\000\002\001\ufff0\000" +
    "\004\176\u02c8\001\002\000\002\001\uffe9\000\004\170\u02ca" +
    "\001\002\000\002\001\uffef\000\004\171\u02cc\001\002\000" +
    "\002\001\uffee\000\004\177\u02ce\001\002\000\002\001\uffe8" +
    "\000\004\172\u02d0\001\002\000\002\001\uffed\000\004\200" +
    "\u02d2\001\002\000\002\001\uffe7\000\004\201\u02d4\001\002" +
    "\000\002\001\uffe6\000\004\173\u02d6\001\002\000\002\001" +
    "\uffec\000\004\202\u02d8\001\002\000\002\001\uffe5\000\004" +
    "\174\u02da\001\002\000\002\001\uffeb\000\004\203\u02dc\001" +
    "\002\000\002\001\uffe4\000\004\204\u02de\001\002\000\002" +
    "\001\uffe3\000\004\205\u02e0\001\002\000\002\001\uffe2\000" +
    "\004\101\u02e2\001\uffff\000\012\061\u02e4\142\076\160\072" +
    "\207\066\001\002\000\002\001\uff5b\000\010\142\076\160" +
    "\072\207\066\001\002\000\006\052\u02e6\137\u02e7\001\002" +
    "\000\012\061\u02e9\142\076\160\072\207\066\001\002\000" +
    "\002\001\ufffe\000\002\001\uff59\000\010\142\076\160\072" +
    "\207\066\001\002\000\002\001\uff58\000\002\001\uff5a\000" +
    "\010\142\076\160\072\207\066\001\002\000\010\142\076" +
    "\160\072\207\066\001\002\000\010\142\076\160\072\207" +
    "\066\001\002\000\006\042\u02f0\101\u02f1\001\ufffd\000\010" +
    "\142\076\160\072\207\066\001\002\000\020\114\070\142" +
    "\064\150\071\155\063\160\072\162\067\207\066\001\uff68" +
    "\000\004\137\u02f7\001\002\000\004\052\u02f5\001\uff67\000" +
    "\002\001\uff66\000\020\114\070\142\064\150\071\155\063" +
    "\160\072\162\067\207\066\001\002\000\002\001\uff65\000" +
    "\004\042\u02f8\001\ufffb\000\010\142\076\160\072\207\066" +
    "\001\002\000\002\001\ufffa\000\002\001\ufffc\000\012\060" +
    "\u02fc\100\330\101\u0300\105\u02ff\001\002\000\162\031\175" +
    "\032\221\033\225\034\226\036\201\037\251\044\146\047" +
    "\276\053\312\072\306\073\173\077\242\100\202\102\303" +
    "\103\272\104\230\105\204\112\227\113\300\114\070\115" +
    "\211\124\170\125\231\142\255\143\254\150\071\152\236" +
    "\153\273\154\237\155\063\156\253\157\176\160\246\161" +
    "\212\162\067\164\164\165\163\166\162\167\161\170\160" +
    "\171\157\172\156\173\154\174\152\175\271\176\270\177" +
    "\265\200\264\201\263\202\262\203\261\204\260\205\256" +
    "\207\066\210\224\211\214\001\002\000\002\001\uff8b\000" +
    "\002\001\uff8a\000\012\140\u0306\142\076\160\072\207\066" +
    "\001\002\000\012\137\u0302\142\076\160\072\207\066\001" +
    "\002\000\006\052\143\137\u0304\001\002\000\006\060\u02fc" +
    "\100\330\001\002\000\002\001\uff8c\000\006\060\u02fc\100" +
    "\330\001\002\000\002\001\uff8d\000\006\060\u02fc\100\330" +
    "\001\002\000\006\052\143\140\u0308\001\002\000\006\060" +
    "\u02fc\100\330\001\002\000\002\001\uff8f\000\002\001\uff8e" +
    "\000\002\001\uff89\000\004\100\u030d\001\002\000\012\136" +
    "\u030f\142\076\160\072\207\066\001\002\000\006\052\143" +
    "\136\u0310\001\002\000\002\001\ufff8\000\002\001\ufff9\000" +
    "\004\100\330\001\002\000\002\001\uffe1\000\004\100\330" +
    "\001\002\000\002\001\uffdf\000\002\001\uffe0\000\014\100" +
    "\330\142\076\160\072\163\u0318\207\066\001\uffc9\000\004" +
    "\163\u0318\001\uffc9\000\050\061\u0352\164\u0351\165\u0350\166" +
    "\u034f\167\u034e\170\u034d\171\u034c\172\u034b\173\u034a\174\u0349" +
    "\175\u0348\176\u0347\177\u0346\200\u0345\201\u0344\202\u0343\203" +
    "\u0342\204\u0341\205\u0340\001\002\000\004\066\u031b\001\uffc5" +
    "\000\004\063\u033d\001\uffce\000\006\061\u031c\210\u031f\001" +
    "\002\000\004\210\u0334\001\002\000\022\077\u032d\114\u0332" +
    "\142\u0330\150\u0333\155\u032f\160\072\162\u0331\207\066\001" +
    "\002\000\004\052\u032a\001\uffc6\000\030\046\u0322\051\u0321" +
    "\055\u0323\077\uff93\114\uff93\142\uff93\150\uff93\155\uff93\160" +
    "\uff93\162\uff93\207\uff93\001\uffc8\000\002\001\uffa0\000\004" +
    "\210\u032c\001\002\000\006\061\u031c\210\u0329\001\002\000" +
    "\004\055\u0324\001\002\000\004\210\u0325\001\002\000\004" +
    "\051\u0326\001\uff92\000\004\210\u0327\001\002\000\002\001" +
    "\uff91\000\004\052\u032a\001\uffc7\000\006\051\u0321\055\u0323" +
    "\001\uff93\000\006\061\u031c\210\u0329\001\002\000\002\001" +
    "\uff9f\000\002\001\uff90\000\002\001\uff9c\000\002\001\uff9e" +
    "\000\002\001\uff99\000\004\151\077\001\uff9b\000\002\001" +
    "\uff9a\000\002\001\uff98\000\002\001\uff9d\000\006\051\u0335" +
    "\055\u0336\001\uff97\000\004\210\u033b\001\002\000\004\055" +
    "\u0337\001\002\000\004\210\u0338\001\002\000\004\051\u0339" +
    "\001\uff96\000\004\210\u033a\001\002\000\002\001\uff95\000" +
    "\002\001\uff94\000\002\001\uffd5\000\004\210\u033e\001\002" +
    "\000\002\001\uffcd\000\004\052\u0355\001\uffca\000\002\001" +
    "\uffb3\000\002\001\uffb4\000\002\001\uffb5\000\002\001\uffb6" +
    "\000\002\001\uffb7\000\002\001\uffb8\000\002\001\uffb9\000" +
    "\002\001\uffba\000\002\001\uffbb\000\002\001\uffbc\000\002" +
    "\001\uffbd\000\002\001\uffbe\000\002\001\uffbf\000\002\001" +
    "\uffc0\000\002\001\uffc1\000\002\001\uffc2\000\002\001\uffc3" +
    "\000\002\001\uffc4\000\050\164\u0351\165\u0350\166\u034f\167" +
    "\u034e\170\u034d\171\u034c\172\u034b\173\u034a\174\u0349\175\u0348" +
    "\176\u0347\177\u0346\200\u0345\201\u0344\202\u0343\203\u0342\204" +
    "\u0341\205\u0340\206\u0354\001\002\000\004\052\u0355\001\uffcc" +
    "\000\002\001\uffcb\000\046\164\u0367\165\u0366\166\u0365\167" +
    "\u0364\170\u0363\171\u0362\172\u0361\173\u0360\174\u035f\175\u035e" +
    "\176\u035d\177\u035c\200\u035b\201\u035a\202\u0359\203\u0358\204" +
    "\u0357\205\u0356\001\002\000\002\001\uffa1\000\002\001\uffa2" +
    "\000\002\001\uffa3\000\002\001\uffa4\000\002\001\uffa5\000" +
    "\002\001\uffa6\000\002\001\uffa7\000\002\001\uffa8\000\002" +
    "\001\uffa9\000\002\001\uffaa\000\002\001\uffab\000\002\001" +
    "\uffac\000\002\001\uffad\000\002\001\uffae\000\002\001\uffaf" +
    "\000\002\001\uffb0\000\002\001\uffb1\000\002\001\uffb2\000" +
    "\004\163\u0318\001\uffc9\000\004\163\u0318\001\uffc9\000\004" +
    "\066\u031b\001\uffc5\000\004\063\u033d\001\uffce\000\002\001" +
    "\uffd1\000\004\066\u031b\001\uffc5\000\004\063\u033d\001\uffce" +
    "\000\002\001\uffd6\000\004\066\u031b\001\uffc5\000\004\063" +
    "\u033d\001\uffce\000\002\001\uffd2\000\004\100\330\001\002" +
    "\000\002\001\uffde\000\004\100\330\001\002\000\002\001" +
    "\uffdc\000\002\001\uffdd\000\006\050\024\141\043\001\002" +
    "\000\012\100\330\142\076\160\072\207\066\001\002\000" +
    "\014\100\330\142\076\160\072\163\u0318\207\066\001\uffc9" +
    "\000\004\163\u0318\001\uffc9\000\004\066\u031b\001\uffc5\000" +
    "\004\063\u033d\001\uffce\000\002\001\uffd3\000\004\163\u0318" +
    "\001\uffc9\000\004\163\u0318\001\uffc9\000\004\066\u031b\001" +
    "\uffc5\000\004\063\u033d\001\uffce\000\002\001\uffcf\000\004" +
    "\066\u031b\001\uffc5\000\004\063\u033d\001\uffce\000\002\001" +
    "\uffd4\000\004\066\u031b\001\uffc5\000\004\063\u033d\001\uffce" +
    "\000\002\001\uffd0\000\002\001\uff73\000\002\001\uff75\000" +
    "\012\052\143\060\u038f\064\u038e\076\u038d\001\uff6f\000\020" +
    "\114\070\142\064\150\071\155\063\160\072\162\067\207" +
    "\066\001\002\000\020\114\070\142\064\150\071\155\063" +
    "\160\072\162\067\207\066\001\002\000\020\114\070\142" +
    "\064\150\071\155\063\160\072\162\067\207\066\001\002" +
    "\000\004\100\u0391\001\002\000\066\052\131\053\110\062" +
    "\134\130\141\134\107\142\076\160\072\164\137\165\136" +
    "\166\135\167\133\170\132\171\130\172\127\173\126\174" +
    "\124\175\122\176\121\177\120\200\117\201\116\202\115" +
    "\203\114\204\113\205\111\207\066\001\uff28\000\004\136" +
    "\u0393\001\002\000\004\100\330\001\uff22\000\002\001\uff7a" +
    "\000\002\001\uff21\000\004\131\u0398\001\uff70\000\002\001" +
    "\uff64\000\020\114\070\142\064\150\071\155\063\160\072" +
    "\162\067\207\066\001\002\000\002\001\uff63\000\002\001" +
    "\uff72\000\004\131\u0398\001\uff71\000\004\164\u039d\001\002" +
    "\000\002\001\ufff3\000\002\001\000" });

  /** Access to parse-action table. */
  @Override
public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u039c\000\006\110\003\111\004\001\001\000\002\001" +
    "\001\000\026\013\013\014\016\040\021\052\034\070\024" +
    "\100\006\102\011\103\010\112\014\130\022\001\001\000" +
    "\020\040\021\070\024\100\006\102\011\103\010\112\u039b" +
    "\130\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\054\111\055\064\056\u038b\001\001\000\006\102\011" +
    "\103\u0389\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\u0373\054\u0372\055\064\001\001" +
    "\000\010\032\u0316\054\u0315\055\064\001\001\000\010\032" +
    "\u0311\054\u0310\055\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\054\u02e0\055\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\040\021\070" +
    "\024\100\006\102\011\103\010\112\u02de\130\054\001\001" +
    "\000\020\040\021\070\024\100\006\102\011\103\010\112" +
    "\u02dc\130\054\001\001\000\020\040\021\070\024\100\006" +
    "\102\011\103\010\112\u02da\130\054\001\001\000\002\001" +
    "\001\000\020\040\021\070\024\100\006\102\011\103\010" +
    "\112\u02d8\130\054\001\001\000\020\040\021\070\024\100" +
    "\006\102\011\103\010\112\u02d6\130\054\001\001\000\020" +
    "\040\021\070\024\100\006\102\011\103\010\112\u02d4\130" +
    "\054\001\001\000\020\040\021\070\024\100\006\102\011" +
    "\103\010\112\u02d2\130\054\001\001\000\020\040\021\070" +
    "\024\100\006\102\011\103\010\112\u02d0\130\054\001\001" +
    "\000\002\001\001\000\020\040\021\070\024\100\006\102" +
    "\011\103\010\112\u02ce\130\054\001\001\000\020\040\021" +
    "\070\024\100\006\102\011\103\010\112\u02cc\130\054\001" +
    "\001\000\020\040\021\070\024\100\006\102\011\103\010" +
    "\112\u02ca\130\054\001\001\000\020\040\021\070\024\100" +
    "\006\102\011\103\010\112\u02c8\130\054\001\001\000\020" +
    "\040\021\070\024\100\006\102\011\103\010\112\u02c6\130" +
    "\054\001\001\000\020\040\021\070\024\100\006\102\011" +
    "\103\010\112\u02c4\130\054\001\001\000\020\040\021\070" +
    "\024\100\006\102\011\103\010\112\u02c2\130\054\001\001" +
    "\000\020\040\021\070\024\100\006\102\011\103\010\112" +
    "\u02c0\130\054\001\001\000\020\040\021\070\024\100\006" +
    "\102\011\103\010\112\055\130\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\054\u02aa" +
    "\055\064\104\u02ab\001\001\000\010\054\061\055\064\104" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\054\074\055\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\140\002\154\003\152\005\242\006\150\007\207\010\206" +
    "\011\217\012\216\022\165\023\164\024\266\025\265\026" +
    "\232\027\231\031\u0299\032\276\041\147\042\146\043\274" +
    "\044\273\045\304\046\303\047\251\050\247\054\256\055" +
    "\064\060\177\061\176\062\170\063\166\064\222\065\221" +
    "\066\173\067\171\071\205\072\204\074\234\075\233\104" +
    "\212\120\215\121\214\122\246\123\244\124\301\125\300" +
    "\126\240\127\237\001\001\000\016\015\124\016\122\020" +
    "\u0294\054\111\055\064\056\137\001\001\000\016\015\124" +
    "\016\122\020\105\054\111\055\064\056\137\001\001\000" +
    "\002\001\001\000\010\054\111\055\064\056\u0286\001\001" +
    "\000\010\054\111\055\064\056\u0280\001\001\000\012\015" +
    "\u021e\054\111\055\064\056\u01f4\001\001\000\002\001\001" +
    "\000\012\015\u021c\054\111\055\064\056\u01f4\001\001\000" +
    "\012\015\u021a\054\111\055\064\056\u01f4\001\001\000\012" +
    "\015\u0218\054\111\055\064\056\u01f4\001\001\000\012\015" +
    "\u0216\054\111\055\064\056\u01f4\001\001\000\012\015\u0214" +
    "\054\111\055\064\056\u01f4\001\001\000\012\015\u0212\054" +
    "\111\055\064\056\u01f4\001\001\000\012\015\u0210\054\111" +
    "\055\064\056\u01f4\001\001\000\012\015\u020e\054\111\055" +
    "\064\056\u01f4\001\001\000\002\001\001\000\012\015\u0256" +
    "\054\111\055\064\056\u01f4\001\001\000\002\001\001\000" +
    "\012\015\u0252\054\111\055\064\056\u01f4\001\001\000\012" +
    "\015\u024e\054\111\055\064\056\u01f4\001\001\000\012\015" +
    "\u024a\054\111\055\064\056\u01f4\001\001\000\016\015\124" +
    "\016\122\020\u027d\054\111\055\064\056\137\001\001\000" +
    "\012\015\u0246\054\111\055\064\056\u01f4\001\001\000\012" +
    "\015\u0242\054\111\055\064\056\u01f4\001\001\000\010\054" +
    "\111\055\064\056\u0278\001\001\000\012\015\u023e\054\111" +
    "\055\064\056\u01f4\001\001\000\012\015\u023a\054\111\055" +
    "\064\056\u01f4\001\001\000\012\015\u0236\054\111\055\064" +
    "\056\u01f4\001\001\000\002\001\001\000\010\054\111\055" +
    "\064\056\141\001\001\000\002\001\001\000\006\054\u0273" +
    "\055\064\001\001\000\140\002\154\003\152\005\242\006" +
    "\150\007\207\010\206\011\217\012\216\022\165\023\164" +
    "\024\266\025\265\026\232\027\231\031\u0270\032\276\041" +
    "\147\042\146\043\274\044\273\045\304\046\303\047\251" +
    "\050\247\054\256\055\064\060\177\061\176\062\170\063" +
    "\166\064\222\065\221\066\173\067\171\071\205\072\204" +
    "\074\234\075\233\104\212\120\215\121\214\122\246\123" +
    "\244\124\301\125\300\126\240\127\237\001\001\000\140" +
    "\002\154\003\152\005\242\006\150\007\207\010\206\011" +
    "\217\012\216\022\165\023\164\024\266\025\265\026\232" +
    "\027\231\031\202\032\276\041\147\042\146\043\274\044" +
    "\273\045\304\046\303\047\251\050\247\054\256\055\064" +
    "\060\177\061\176\062\170\063\166\064\222\065\221\066" +
    "\173\067\171\071\205\072\204\074\234\075\233\104\212" +
    "\120\215\121\214\122\246\123\244\124\301\125\300\126" +
    "\240\127\237\001\001\000\006\054\u026f\055\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\140\002\154\003\152\005\242\006\150\007\207\010\206" +
    "\011\217\012\216\022\165\023\164\024\266\025\265\026" +
    "\232\027\231\031\u0255\032\276\041\147\042\146\043\274" +
    "\044\273\045\304\046\303\047\251\050\247\054\256\055" +
    "\064\060\177\061\176\062\170\063\166\064\222\065\221" +
    "\066\173\067\171\071\205\072\204\074\234\075\233\104" +
    "\212\120\215\121\214\122\246\123\244\124\301\125\300" +
    "\126\240\127\237\001\001\000\002\001\001\000\140\002" +
    "\154\003\152\005\242\006\150\007\207\010\206\011\217" +
    "\012\216\022\165\023\164\024\266\025\265\026\232\027" +
    "\231\031\u0251\032\276\041\147\042\146\043\274\044\273" +
    "\045\304\046\303\047\251\050\247\054\256\055\064\060" +
    "\177\061\176\062\170\063\166\064\222\065\221\066\173" +
    "\067\171\071\205\072\204\074\234\075\233\104\212\120" +
    "\215\121\214\122\246\123\244\124\301\125\300\126\240" +
    "\127\237\001\001\000\002\001\001\000\140\002\154\003" +
    "\152\005\242\006\150\007\207\010\206\011\217\012\216" +
    "\022\165\023\164\024\266\025\265\026\232\027\231\031" +
    "\u024d\032\276\041\147\042\146\043\274\044\273\045\304" +
    "\046\303\047\251\050\247\054\256\055\064\060\177\061" +
    "\176\062\170\063\166\064\222\065\221\066\173\067\171" +
    "\071\205\072\204\074\234\075\233\104\212\120\215\121" +
    "\214\122\246\123\244\124\301\125\300\126\240\127\237" +
    "\001\001\000\140\002\154\003\152\005\242\006\150\007" +
    "\207\010\206\011\217\012\216\022\165\023\164\024\266" +
    "\025\265\026\232\027\231\031\u0249\032\276\041\147\042" +
    "\146\043\274\044\273\045\304\046\303\047\251\050\247" +
    "\054\256\055\064\060\177\061\176\062\170\063\166\064" +
    "\222\065\221\066\173\067\171\071\205\072\204\074\234" +
    "\075\233\104\212\120\215\121\214\122\246\123\244\124" +
    "\301\125\300\126\240\127\237\001\001\000\140\002\154" +
    "\003\152\005\242\006\150\007\207\010\206\011\217\012" +
    "\216\022\165\023\164\024\266\025\265\026\232\027\231" +
    "\031\u0245\032\276\041\147\042\146\043\274\044\273\045" +
    "\304\046\303\047\251\050\247\054\256\055\064\060\177" +
    "\061\176\062\170\063\166\064\222\065\221\066\173\067" +
    "\171\071\205\072\204\074\234\075\233\104\212\120\215" +
    "\121\214\122\246\123\244\124\301\125\300\126\240\127" +
    "\237\001\001\000\140\002\154\003\152\005\242\006\150" +
    "\007\207\010\206\011\217\012\216\022\165\023\164\024" +
    "\266\025\265\026\232\027\231\031\u0241\032\276\041\147" +
    "\042\146\043\274\044\273\045\304\046\303\047\251\050" +
    "\247\054\256\055\064\060\177\061\176\062\170\063\166" +
    "\064\222\065\221\066\173\067\171\071\205\072\204\074" +
    "\234\075\233\104\212\120\215\121\214\122\246\123\244" +
    "\124\301\125\300\126\240\127\237\001\001\000\140\002" +
    "\154\003\152\005\242\006\150\007\207\010\206\011\217" +
    "\012\216\022\165\023\164\024\266\025\265\026\232\027" +
    "\231\031\u023d\032\276\041\147\042\146\043\274\044\273" +
    "\045\304\046\303\047\251\050\247\054\256\055\064\060" +
    "\177\061\176\062\170\063\166\064\222\065\221\066\173" +
    "\067\171\071\205\072\204\074\234\075\233\104\212\120" +
    "\215\121\214\122\246\123\244\124\301\125\300\126\240" +
    "\127\237\001\001\000\140\002\154\003\152\005\242\006" +
    "\150\007\207\010\206\011\217\012\216\022\165\023\164" +
    "\024\266\025\265\026\232\027\231\031\u0239\032\276\041" +
    "\147\042\146\043\274\044\273\045\304\046\303\047\251" +
    "\050\247\054\256\055\064\060\177\061\176\062\170\063" +
    "\166\064\222\065\221\066\173\067\171\071\205\072\204" +
    "\074\234\075\233\104\212\120\215\121\214\122\246\123" +
    "\244\124\301\125\300\126\240\127\237\001\001\000\140" +
    "\002\154\003\152\005\242\006\150\007\207\010\206\011" +
    "\217\012\216\022\165\023\164\024\266\025\265\026\232" +
    "\027\231\031\u0235\032\276\041\147\042\146\043\274\044" +
    "\273\045\304\046\303\047\251\050\247\054\256\055\064" +
    "\060\177\061\176\062\170\063\166\064\222\065\221\066" +
    "\173\067\171\071\205\072\204\074\234\075\233\104\212" +
    "\120\215\121\214\122\246\123\244\124\301\125\300\126" +
    "\240\127\237\001\001\000\004\073\u0262\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\124\016\u0143\017" +
    "\u025f\054\111\055\064\056\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\005\242\006\u025b\007\207\010\206" +
    "\022\165\023\164\024\266\025\265\032\276\047\251\050" +
    "\247\054\256\055\064\062\u025c\063\u0105\066\173\067\171" +
    "\071\205\072\204\074\234\075\233\104\212\126\240\127" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\005\242\007\207\010\206\022\165\023\164\024\266\025" +
    "\265\032\276\047\251\050\247\054\256\055\064\062\170" +
    "\063\166\066\173\067\171\071\205\072\204\074\234\075" +
    "\233\104\212\120\u025a\121\u0259\122\246\123\244\124\301" +
    "\125\300\126\240\127\237\001\001\000\150\002\154\003" +
    "\152\005\242\006\150\007\207\010\206\011\217\012\216" +
    "\015\u01f7\021\u01f5\022\165\023\164\024\266\025\265\026" +
    "\232\027\231\031\334\032\276\034\335\041\147\042\146" +
    "\043\274\044\273\045\304\046\303\047\251\050\247\054" +
    "\u01f9\055\064\056\u01f4\060\177\061\176\062\170\063\166" +
    "\064\222\065\221\066\173\067\171\071\205\072\204\074" +
    "\234\075\233\104\212\120\215\121\214\122\246\123\244" +
    "\124\301\125\300\126\240\127\237\001\001\000\002\001" +
    "\001\000\140\002\154\003\152\005\242\006\150\007\207" +
    "\010\206\011\217\012\216\022\165\023\164\024\266\025" +
    "\265\026\232\027\231\031\u01e7\032\276\041\147\042\146" +
    "\043\274\044\273\045\304\046\303\047\251\050\247\054" +
    "\256\055\064\060\177\061\176\062\170\063\166\064\222" +
    "\065\221\066\173\067\171\071\205\072\204\074\234\075" +
    "\233\104\212\120\215\121\214\122\246\123\244\124\301" +
    "\125\300\126\240\127\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\005\242\006\u01e1\007\207\010\206\011\217\012\216\022" +
    "\165\023\164\024\266\025\265\032\276\047\251\050\247" +
    "\054\256\055\064\060\u01e2\061\u01a4\062\170\063\166\066" +
    "\173\067\171\071\205\072\204\074\234\075\233\104\212" +
    "\120\215\121\214\122\246\123\244\124\301\125\300\126" +
    "\240\127\237\001\001\000\022\005\242\006\u01e0\032\276" +
    "\054\256\055\064\104\212\126\u01df\127\u0126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\015\124\016" +
    "\u0143\017\u01b2\054\111\055\064\056\137\001\001\000\074" +
    "\005\242\007\207\010\206\022\165\023\164\024\266\025" +
    "\265\032\276\047\251\050\247\054\256\055\064\062\170" +
    "\063\166\066\173\067\171\071\205\072\204\074\234\075" +
    "\233\104\212\120\u01b1\121\u01b0\122\246\123\244\124\301" +
    "\125\300\126\240\127\237\001\001\000\074\005\242\007" +
    "\207\010\206\022\165\023\164\024\266\025\265\032\276" +
    "\047\251\050\247\054\256\055\064\062\170\063\166\066" +
    "\173\067\171\071\205\072\204\074\234\075\233\104\212" +
    "\120\u01af\121\u01ae\122\246\123\244\124\301\125\300\126" +
    "\240\127\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\015\124\016" +
    "\u0143\017\u0172\054\111\055\064\056\137\001\001\000\022" +
    "\005\242\006\u0171\032\276\054\256\055\064\104\212\126" +
    "\u0170\127\u0125\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\005\242\006\u016e\007\207\010\206\022\165\023" +
    "\164\024\266\025\265\032\276\047\251\050\247\054\256" +
    "\055\064\062\u016f\063\u0127\066\173\067\171\071\205\072" +
    "\204\074\234\075\233\104\212\126\240\127\237\001\001" +
    "\000\002\001\001\000\140\002\154\003\152\005\242\006" +
    "\150\007\207\010\206\011\217\012\216\022\165\023\164" +
    "\024\266\025\265\026\232\027\231\031\u016d\032\276\041" +
    "\147\042\146\043\274\044\273\045\304\046\303\047\251" +
    "\050\247\054\256\055\064\060\177\061\176\062\170\063" +
    "\166\064\222\065\221\066\173\067\171\071\205\072\204" +
    "\074\234\075\233\104\212\120\215\121\214\122\246\123" +
    "\244\124\301\125\300\126\240\127\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\015\124\016\u0143\017\u0161\054\111\055\064" +
    "\056\137\001\001\000\002\001\001\000\016\015\124\016" +
    "\u0143\017\u015f\054\111\055\064\056\137\001\001\000\074" +
    "\005\242\007\207\010\206\022\165\023\164\024\266\025" +
    "\265\032\276\047\251\050\247\054\256\055\064\062\170" +
    "\063\166\066\173\067\171\071\205\072\204\074\234\075" +
    "\233\104\212\120\u015e\121\u015d\122\246\123\244\124\301" +
    "\125\300\126\240\127\237\001\001\000\074\005\242\007" +
    "\207\010\206\022\165\023\164\024\266\025\265\032\276" +
    "\047\251\050\247\054\256\055\064\062\170\063\166\066" +
    "\173\067\171\071\205\072\204\074\234\075\233\104\212" +
    "\120\u015a\121\u0159\122\246\123\244\124\301\125\300\126" +
    "\240\127\237\001\001\000\140\002\154\003\152\005\242" +
    "\006\150\007\207\010\206\011\217\012\216\022\165\023" +
    "\164\024\266\025\265\026\232\027\231\031\u0157\032\276" +
    "\041\147\042\146\043\274\044\273\045\304\046\303\047" +
    "\251\050\247\054\256\055\064\060\177\061\176\062\170" +
    "\063\166\064\222\065\221\066\173\067\171\071\205\072" +
    "\204\074\234\075\233\104\212\120\215\121\214\122\246" +
    "\123\244\124\301\125\300\126\240\127\237\001\001\000" +
    "\002\001\001\000\140\002\154\003\152\005\242\006\150" +
    "\007\207\010\206\011\217\012\216\022\165\023\164\024" +
    "\266\025\265\026\232\027\231\031\u0155\032\276\041\147" +
    "\042\146\043\274\044\273\045\304\046\303\047\251\050" +
    "\247\054\256\055\064\060\177\061\176\062\170\063\166" +
    "\064\222\065\221\066\173\067\171\071\205\072\204\074" +
    "\234\075\233\104\212\120\215\121\214\122\246\123\244" +
    "\124\301\125\300\126\240\127\237\001\001\000\140\002" +
    "\154\003\152\005\242\006\150\007\207\010\206\011\217" +
    "\012\216\022\165\023\164\024\266\025\265\026\232\027" +
    "\231\031\u0153\032\276\041\147\042\146\043\274\044\273" +
    "\045\304\046\303\047\251\050\247\054\256\055\064\060" +
    "\177\061\176\062\170\063\166\064\222\065\221\066\173" +
    "\067\171\071\205\072\204\074\234\075\233\104\212\120" +
    "\215\121\214\122\246\123\244\124\301\125\300\126\240" +
    "\127\237\001\001\000\140\002\154\003\152\005\242\006" +
    "\150\007\207\010\206\011\217\012\216\022\165\023\164" +
    "\024\266\025\265\026\232\027\231\031\u0151\032\276\041" +
    "\147\042\146\043\274\044\273\045\304\046\303\047\251" +
    "\050\247\054\256\055\064\060\177\061\176\062\170\063" +
    "\166\064\222\065\221\066\173\067\171\071\205\072\204" +
    "\074\234\075\233\104\212\120\215\121\214\122\246\123" +
    "\244\124\301\125\300\126\240\127\237\001\001\000\140" +
    "\002\154\003\152\005\242\006\150\007\207\010\206\011" +
    "\217\012\216\022\165\023\164\024\266\025\265\026\232" +
    "\027\231\031\u014f\032\276\041\147\042\146\043\274\044" +
    "\273\045\304\046\303\047\251\050\247\054\256\055\064" +
    "\060\177\061\176\062\170\063\166\064\222\065\221\066" +
    "\173\067\171\071\205\072\204\074\234\075\233\104\212" +
    "\120\215\121\214\122\246\123\244\124\301\125\300\126" +
    "\240\127\237\001\001\000\140\002\154\003\152\005\242" +
    "\006\150\007\207\010\206\011\217\012\216\022\165\023" +
    "\164\024\266\025\265\026\232\027\231\031\u014d\032\276" +
    "\041\147\042\146\043\274\044\273\045\304\046\303\047" +
    "\251\050\247\054\256\055\064\060\177\061\176\062\170" +
    "\063\166\064\222\065\221\066\173\067\171\071\205\072" +
    "\204\074\234\075\233\104\212\120\215\121\214\122\246" +
    "\123\244\124\301\125\300\126\240\127\237\001\001\000" +
    "\140\002\154\003\152\005\242\006\150\007\207\010\206" +
    "\011\217\012\216\022\165\023\164\024\266\025\265\026" +
    "\232\027\231\031\u014b\032\276\041\147\042\146\043\274" +
    "\044\273\045\304\046\303\047\251\050\247\054\256\055" +
    "\064\060\177\061\176\062\170\063\166\064\222\065\221" +
    "\066\173\067\171\071\205\072\204\074\234\075\233\104" +
    "\212\120\215\121\214\122\246\123\244\124\301\125\300" +
    "\126\240\127\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\140\002\154\003\152\005\242\006\150\007\207" +
    "\010\206\011\217\012\216\022\165\023\164\024\266\025" +
    "\265\026\232\027\231\031\u0149\032\276\041\147\042\146" +
    "\043\274\044\273\045\304\046\303\047\251\050\247\054" +
    "\256\055\064\060\177\061\176\062\170\063\166\064\222" +
    "\065\221\066\173\067\171\071\205\072\204\074\234\075" +
    "\233\104\212\120\215\121\214\122\246\123\244\124\301" +
    "\125\300\126\240\127\237\001\001\000\140\002\154\003" +
    "\152\005\242\006\150\007\207\010\206\011\217\012\216" +
    "\022\165\023\164\024\266\025\265\026\232\027\231\031" +
    "\u0147\032\276\041\147\042\146\043\274\044\273\045\304" +
    "\046\303\047\251\050\247\054\256\055\064\060\177\061" +
    "\176\062\170\063\166\064\222\065\221\066\173\067\171" +
    "\071\205\072\204\074\234\075\233\104\212\120\215\121" +
    "\214\122\246\123\244\124\301\125\300\126\240\127\237" +
    "\001\001\000\016\015\124\016\u0143\017\u0142\054\111\055" +
    "\064\056\137\001\001\000\074\005\242\007\207\010\206" +
    "\022\165\023\164\024\266\025\265\032\276\047\251\050" +
    "\247\054\256\055\064\062\170\063\166\066\173\067\171" +
    "\071\205\072\204\074\234\075\233\104\212\120\u0141\121" +
    "\u0140\122\246\123\244\124\301\125\300\126\240\127\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\242\006\u013f\032\276\054\256\055\064\104\212\126\u013e" +
    "\127\u010c\001\001\000\002\001\001\000\074\005\242\007" +
    "\207\010\206\022\165\023\164\024\266\025\265\032\276" +
    "\047\251\050\247\054\256\055\064\062\170\063\166\066" +
    "\173\067\171\071\205\072\204\074\234\075\233\104\212" +
    "\120\u012f\121\u012e\122\246\123\244\124\301\125\300\126" +
    "\240\127\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\051\322\054\321\055\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\005\242\006\306\007\207" +
    "\010\206\022\165\023\164\024\266\025\265\032\276\047" +
    "\251\050\247\054\256\055\064\062\310\063\307\066\173" +
    "\067\171\071\205\072\204\074\234\075\233\104\212\126" +
    "\240\127\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\144\002\154\003" +
    "\152\005\242\006\150\007\207\010\206\011\217\012\216" +
    "\022\165\023\164\024\266\025\265\026\232\027\231\031" +
    "\313\032\276\036\314\037\315\041\147\042\146\043\274" +
    "\044\273\045\304\046\303\047\251\050\247\054\256\055" +
    "\064\060\177\061\176\062\170\063\166\064\222\065\221" +
    "\066\173\067\171\071\205\072\204\074\234\075\233\104" +
    "\212\120\215\121\214\122\246\123\244\124\301\125\300" +
    "\126\240\127\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\140\002\154\003\152\005\242" +
    "\006\150\007\207\010\206\011\217\012\216\022\165\023" +
    "\164\024\266\025\265\026\232\027\231\031\317\032\276" +
    "\041\147\042\146\043\274\044\273\045\304\046\303\047" +
    "\251\050\247\054\256\055\064\060\177\061\176\062\170" +
    "\063\166\064\222\065\221\066\173\067\171\071\205\072" +
    "\204\074\234\075\233\104\212\120\215\121\214\122\246" +
    "\123\244\124\301\125\300\126\240\127\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\140\002\154\003\152\005\242\006\150\007" +
    "\207\010\206\011\217\012\216\022\165\023\164\024\266" +
    "\025\265\026\232\027\231\031\324\032\276\041\147\042" +
    "\146\043\274\044\273\045\304\046\303\047\251\050\247" +
    "\054\256\055\064\060\177\061\176\062\170\063\166\064" +
    "\222\065\221\066\173\067\171\071\205\072\204\074\234" +
    "\075\233\104\212\120\215\121\214\122\246\123\244\124" +
    "\301\125\300\126\240\127\237\001\001\000\006\032\331" +
    "\035\326\001\001\000\010\051\340\054\321\055\064\001" +
    "\001\000\002\001\001\000\142\002\154\003\152\005\242" +
    "\006\150\007\207\010\206\011\217\012\216\022\165\023" +
    "\164\024\266\025\265\026\232\027\231\031\334\032\276" +
    "\034\335\041\147\042\146\043\274\044\273\045\304\046" +
    "\303\047\251\050\247\054\256\055\064\060\177\061\176" +
    "\062\170\063\166\064\222\065\221\066\173\067\171\071" +
    "\205\072\204\074\234\075\233\104\212\120\215\121\214" +
    "\122\246\123\244\124\301\125\300\126\240\127\237\001" +
    "\001\000\140\002\154\003\152\005\242\006\150\007\207" +
    "\010\206\011\217\012\216\022\165\023\164\024\266\025" +
    "\265\026\232\027\231\031\332\032\276\041\147\042\146" +
    "\043\274\044\273\045\304\046\303\047\251\050\247\054" +
    "\256\055\064\060\177\061\176\062\170\063\166\064\222" +
    "\065\221\066\173\067\171\071\205\072\204\074\234\075" +
    "\233\104\212\120\215\121\214\122\246\123\244\124\301" +
    "\125\300\126\240\127\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\140" +
    "\002\154\003\152\005\242\006\150\007\207\010\206\011" +
    "\217\012\216\022\165\023\164\024\266\025\265\026\232" +
    "\027\231\031\337\032\276\041\147\042\146\043\274\044" +
    "\273\045\304\046\303\047\251\050\247\054\256\055\064" +
    "\060\177\061\176\062\170\063\166\064\222\065\221\066" +
    "\173\067\171\071\205\072\204\074\234\075\233\104\212" +
    "\120\215\121\214\122\246\123\244\124\301\125\300\126" +
    "\240\127\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\242\006\u012d\010\356\023" +
    "\352\025\265\032\276\050\345\054\256\055\064\063\166" +
    "\067\353\072\360\075\233\104\212\123\u012c\127\237\001" +
    "\001\000\042\005\242\006\u012b\010\356\023\352\025\265" +
    "\032\276\050\345\054\256\055\064\063\166\067\353\072" +
    "\360\075\233\104\212\123\u012a\127\237\001\001\000\042" +
    "\005\242\006\u0129\010\356\023\352\025\265\032\276\050" +
    "\345\054\256\055\064\063\166\067\353\072\360\075\233" +
    "\104\212\123\u0128\127\237\001\001\000\042\005\242\006" +
    "\361\010\356\023\352\025\265\032\276\050\345\054\256" +
    "\055\064\063\166\067\353\072\360\075\233\104\212\123" +
    "\355\127\237\001\001\000\002\001\001\000\036\005\242" +
    "\010\356\023\352\025\265\032\276\050\345\054\256\055" +
    "\064\063\307\067\353\072\360\075\233\104\212\127\237" +
    "\001\001\000\036\005\242\010\356\023\352\025\265\032" +
    "\276\050\345\054\256\055\064\063\u0127\067\353\072\360" +
    "\075\233\104\212\127\237\001\001\000\016\005\242\032" +
    "\276\054\256\055\064\104\212\127\u0126\001\001\000\016" +
    "\005\242\032\276\054\256\055\064\104\212\127\u0125\001" +
    "\001\000\004\073\u011f\001\001\000\002\001\001\000\016" +
    "\005\242\032\276\054\256\055\064\104\212\127\u010c\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\242" +
    "\010\356\023\352\025\265\032\276\050\345\054\256\055" +
    "\064\063\u0105\067\353\072\360\075\233\104\212\127\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\242\010\364\025\265\032\276\054\256\055\064\104\212" +
    "\127\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\144\002\154\003\152\005\242\006\150" +
    "\007\207\010\206\011\217\012\216\022\165\023\164\024" +
    "\266\025\265\026\232\027\231\031\313\032\276\036\367" +
    "\037\315\041\147\042\146\043\274\044\273\045\304\046" +
    "\303\047\251\050\247\054\256\055\064\060\177\061\176" +
    "\062\170\063\166\064\222\065\221\066\173\067\171\071" +
    "\205\072\204\074\234\075\233\104\212\120\215\121\214" +
    "\122\246\123\244\124\301\125\300\126\240\127\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\144\002\154" +
    "\003\152\005\242\006\150\007\207\010\206\011\217\012" +
    "\216\022\165\023\164\024\266\025\265\026\232\027\231" +
    "\031\313\032\276\036\u0100\037\315\041\147\042\146\043" +
    "\274\044\273\045\304\046\303\047\251\050\247\054\256" +
    "\055\064\060\177\061\176\062\170\063\166\064\222\065" +
    "\221\066\173\067\171\071\205\072\204\074\234\075\233" +
    "\104\212\120\215\121\214\122\246\123\244\124\301\125" +
    "\300\126\240\127\237\001\001\000\016\005\242\032\276" +
    "\054\256\055\064\104\212\127\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\144\002\154\003\152\005\242\006\150\007\207\010\206" +
    "\011\217\012\216\022\165\023\164\024\266\025\265\026" +
    "\232\027\231\031\313\032\276\036\u0103\037\315\041\147" +
    "\042\146\043\274\044\273\045\304\046\303\047\251\050" +
    "\247\054\256\055\064\060\177\061\176\062\170\063\166" +
    "\064\222\065\221\066\173\067\171\071\205\072\204\074" +
    "\234\075\233\104\212\120\215\121\214\122\246\123\244" +
    "\124\301\125\300\126\240\127\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\242" +
    "\010\356\023\352\025\265\032\276\050\345\054\256\055" +
    "\064\063\u010b\067\353\072\360\075\233\104\212\127\237" +
    "\001\001\000\036\005\242\010\356\023\352\025\265\032" +
    "\276\050\345\054\256\055\064\063\u010a\067\353\072\360" +
    "\075\233\104\212\127\237\001\001\000\036\005\242\010" +
    "\356\023\352\025\265\032\276\050\345\054\256\055\064" +
    "\063\u0109\067\353\072\360\075\233\104\212\127\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\242\010\356\023\352\025" +
    "\265\032\276\050\u010e\054\256\055\064\072\360\075\233" +
    "\104\212\127\237\001\001\000\002\001\001\000\030\005" +
    "\242\010\356\023\352\025\265\032\276\054\256\055\064" +
    "\072\360\075\u0110\104\212\127\237\001\001\000\002\001" +
    "\001\000\024\005\242\010\356\025\265\032\276\054\256" +
    "\055\064\072\u0124\104\212\127\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\242\010\356\023\352\025\265\032\276\054\256\055\064" +
    "\072\360\075\u0123\104\212\127\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\242" +
    "\006\u013d\010\356\023\352\025\265\032\276\050\345\054" +
    "\256\055\064\063\166\067\353\072\360\075\233\104\212" +
    "\123\u0133\125\u013c\127\237\001\001\000\044\005\242\006" +
    "\u013b\010\356\023\352\025\265\032\276\050\345\054\256" +
    "\055\064\063\166\067\353\072\360\075\233\104\212\123" +
    "\u0133\125\u013a\127\237\001\001\000\044\005\242\006\u0135" +
    "\010\356\023\352\025\265\032\276\050\345\054\256\055" +
    "\064\063\166\067\353\072\360\075\233\104\212\123\u0133" +
    "\125\u0134\127\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\005\242\010\356\023\352" +
    "\025\265\032\276\050\345\054\256\055\064\063\166\067" +
    "\353\072\360\075\233\104\212\123\u012c\127\237\001\001" +
    "\000\040\005\242\010\356\023\352\025\265\032\276\050" +
    "\345\054\256\055\064\063\166\067\353\072\360\075\233" +
    "\104\212\123\u012a\127\237\001\001\000\040\005\242\010" +
    "\356\023\352\025\265\032\276\050\345\054\256\055\064" +
    "\063\166\067\353\072\360\075\233\104\212\123\u0128\127" +
    "\237\001\001\000\040\005\242\010\356\023\352\025\265" +
    "\032\276\050\345\054\256\055\064\063\166\067\353\072" +
    "\360\075\233\104\212\123\355\127\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\331\035\u0145\001\001\000" +
    "\002\001\001\000\014\015\124\016\u0146\054\111\055\064" +
    "\056\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\331\035\u0160\001" +
    "\001\000\002\001\001\000\006\032\331\035\u0162\001\001" +
    "\000\002\001\001\000\032\005\242\006\u0164\010\356\023" +
    "\352\025\265\032\276\054\256\055\064\072\360\075\u0110" +
    "\104\212\127\237\001\001\000\002\001\001\000\004\055" +
    "\u0166\001\001\000\002\001\001\000\040\005\242\006\u016c" +
    "\010\356\023\352\025\265\032\276\050\345\054\256\055" +
    "\064\063\u010b\067\353\072\360\075\233\104\212\127\237" +
    "\001\001\000\040\005\242\006\u016b\010\356\023\352\025" +
    "\265\032\276\050\345\054\256\055\064\063\u010a\067\353" +
    "\072\360\075\233\104\212\127\237\001\001\000\040\005" +
    "\242\006\u016a\010\356\023\352\025\265\032\276\050\345" +
    "\054\256\055\064\063\u0109\067\353\072\360\075\233\104" +
    "\212\127\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\331\035\u0173\001\001\000\002\001\001\000\062\003" +
    "\u0177\005\242\006\u0176\010\356\012\u017b\023\352\025\265" +
    "\032\276\042\u0175\044\273\046\303\050\345\054\256\055" +
    "\064\061\176\063\166\067\353\072\360\075\233\104\212" +
    "\121\u017a\123\u0133\125\u0182\127\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\242" +
    "\010\356\023\352\025\265\032\276\050\345\054\256\055" +
    "\064\063\166\067\353\072\360\075\233\104\212\121\u01a5" +
    "\123\u0133\125\u0182\127\237\001\001\000\050\005\242\010" +
    "\356\012\u017b\023\352\025\265\032\276\050\345\054\256" +
    "\055\064\061\u01a4\063\166\067\353\072\360\075\233\104" +
    "\212\121\u017a\123\u0133\125\u0182\127\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\005\242\010\356\023" +
    "\352\025\265\032\276\050\345\054\256\055\064\063\166" +
    "\067\353\072\360\075\233\104\212\121\u018b\123\u0133\125" +
    "\u0182\127\237\001\001\000\044\005\242\010\356\023\352" +
    "\025\265\032\276\050\345\054\256\055\064\063\166\067" +
    "\353\072\360\075\233\104\212\121\u018a\123\u0133\125\u0182" +
    "\127\237\001\001\000\044\005\242\010\356\023\352\025" +
    "\265\032\276\050\345\054\256\055\064\063\166\067\353" +
    "\072\360\075\233\104\212\121\u0189\123\u0133\125\u0182\127" +
    "\237\001\001\000\044\005\242\010\356\023\352\025\265" +
    "\032\276\050\345\054\256\055\064\063\166\067\353\072" +
    "\360\075\233\104\212\121\u0188\123\u0133\125\u0182\127\237" +
    "\001\001\000\044\005\242\010\356\023\352\025\265\032" +
    "\276\050\345\054\256\055\064\063\166\067\353\072\360" +
    "\075\233\104\212\121\u0187\123\u0133\125\u0182\127\237\001" +
    "\001\000\044\005\242\010\356\023\352\025\265\032\276" +
    "\050\345\054\256\055\064\063\166\067\353\072\360\075" +
    "\233\104\212\121\u0183\123\u0133\125\u0182\127\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\242\010" +
    "\356\023\352\025\265\032\276\050\345\054\256\055\064" +
    "\063\166\067\353\072\360\075\233\104\212\123\u0133\125" +
    "\u013c\127\237\001\001\000\042\005\242\010\356\023\352" +
    "\025\265\032\276\050\345\054\256\055\064\063\166\067" +
    "\353\072\360\075\233\104\212\123\u0133\125\u013a\127\237" +
    "\001\001\000\042\005\242\010\356\023\352\025\265\032" +
    "\276\050\345\054\256\055\064\063\166\067\353\072\360" +
    "\075\233\104\212\123\u0133\125\u0134\127\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\005\242\010\356\023" +
    "\352\025\265\032\276\050\345\054\256\055\064\063\166" +
    "\067\353\072\360\075\233\104\212\121\u01a3\123\u0133\125" +
    "\u0182\127\237\001\001\000\044\005\242\010\356\023\352" +
    "\025\265\032\276\050\345\054\256\055\064\063\166\067" +
    "\353\072\360\075\233\104\212\121\u01a2\123\u0133\125\u0182" +
    "\127\237\001\001\000\044\005\242\010\356\023\352\025" +
    "\265\032\276\050\345\054\256\055\064\063\166\067\353" +
    "\072\360\075\233\104\212\121\u01a1\123\u0133\125\u0182\127" +
    "\237\001\001\000\044\005\242\010\356\023\352\025\265" +
    "\032\276\050\345\054\256\055\064\063\166\067\353\072" +
    "\360\075\233\104\212\121\u01a0\123\u0133\125\u0182\127\237" +
    "\001\001\000\044\005\242\010\356\023\352\025\265\032" +
    "\276\050\345\054\256\055\064\063\166\067\353\072\360" +
    "\075\233\104\212\121\u019f\123\u0133\125\u0182\127\237\001" +
    "\001\000\044\005\242\010\356\023\352\025\265\032\276" +
    "\050\345\054\256\055\064\063\166\067\353\072\360\075" +
    "\233\104\212\121\u019e\123\u0133\125\u0182\127\237\001\001" +
    "\000\044\005\242\010\356\023\352\025\265\032\276\050" +
    "\345\054\256\055\064\063\166\067\353\072\360\075\233" +
    "\104\212\121\u019d\123\u0133\125\u0182\127\237\001\001\000" +
    "\044\005\242\010\356\023\352\025\265\032\276\050\345" +
    "\054\256\055\064\063\166\067\353\072\360\075\233\104" +
    "\212\121\u019c\123\u0133\125\u0182\127\237\001\001\000\044" +
    "\005\242\010\356\023\352\025\265\032\276\050\345\054" +
    "\256\055\064\063\166\067\353\072\360\075\233\104\212" +
    "\121\u019b\123\u0133\125\u0182\127\237\001\001\000\044\005" +
    "\242\010\356\023\352\025\265\032\276\050\345\054\256" +
    "\055\064\063\166\067\353\072\360\075\233\104\212\121" +
    "\u019a\123\u0133\125\u0182\127\237\001\001\000\044\005\242" +
    "\010\356\023\352\025\265\032\276\050\345\054\256\055" +
    "\064\063\166\067\353\072\360\075\233\104\212\121\u0199" +
    "\123\u0133\125\u0182\127\237\001\001\000\044\005\242\010" +
    "\356\023\352\025\265\032\276\050\345\054\256\055\064" +
    "\063\166\067\353\072\360\075\233\104\212\121\u0198\123" +
    "\u0133\125\u0182\127\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\u0177\005\242\010\356\012\u017b\023\352\025\265\032" +
    "\276\042\u01a9\044\u01aa\046\303\050\345\054\256\055\064" +
    "\061\176\063\166\067\353\072\360\075\233\104\212\121" +
    "\u017a\123\u0133\125\u0182\127\237\001\001\000\050\005\242" +
    "\010\356\012\u017b\023\352\025\265\032\276\050\345\054" +
    "\256\055\064\061\u01a8\063\166\067\353\072\360\075\233" +
    "\104\212\121\u017a\123\u0133\125\u0182\127\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\003\u0177\005\242\010\356\012\u017b\023\352\025\265\032" +
    "\276\044\u01ad\046\u01ac\050\345\054\256\055\064\061\176" +
    "\063\166\067\353\072\360\075\233\104\212\121\u017a\123" +
    "\u0133\125\u0182\127\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\331\035\u01b3\001\001" +
    "\000\002\001\001\000\144\002\154\003\152\005\242\006" +
    "\150\007\207\010\206\011\217\012\216\022\165\023\164" +
    "\024\266\025\265\026\232\027\231\031\313\032\276\036" +
    "\u01b5\037\315\041\147\042\146\043\274\044\273\045\304" +
    "\046\303\047\251\050\247\054\256\055\064\060\177\061" +
    "\176\062\170\063\166\064\222\065\221\066\173\067\171" +
    "\071\205\072\204\074\234\075\233\104\212\120\215\121" +
    "\214\122\246\123\244\124\301\125\300\126\240\127\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\003" +
    "\u0177\005\242\006\u01b8\010\356\012\u017b\023\352\025\265" +
    "\027\u01b9\032\276\042\146\044\273\046\303\050\345\054" +
    "\256\055\064\061\176\063\166\067\353\072\360\075\233" +
    "\104\212\121\u017a\123\u0133\125\u0182\127\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\003\u0177\005\242" +
    "\010\356\012\u017b\023\352\025\265\032\276\042\u0175\044" +
    "\273\046\303\050\345\054\256\055\064\061\176\063\166" +
    "\067\353\072\360\075\233\104\212\121\u017a\123\u0133\125" +
    "\u0182\127\237\001\001\000\074\005\242\007\207\010\206" +
    "\022\165\023\164\024\266\025\265\032\276\047\251\050" +
    "\247\054\256\055\064\062\170\063\166\066\173\067\171" +
    "\071\205\072\204\074\234\075\233\104\212\120\u01de\121" +
    "\u01dd\122\246\123\244\124\301\125\300\126\240\127\237" +
    "\001\001\000\074\005\242\007\207\010\206\022\165\023" +
    "\164\024\266\025\265\032\276\047\251\050\247\054\256" +
    "\055\064\062\170\063\166\066\173\067\171\071\205\072" +
    "\204\074\234\075\233\104\212\120\u01dc\121\u01db\122\246" +
    "\123\244\124\301\125\300\126\240\127\237\001\001\000" +
    "\074\005\242\007\207\010\206\022\165\023\164\024\266" +
    "\025\265\032\276\047\251\050\247\054\256\055\064\062" +
    "\170\063\166\066\173\067\171\071\205\072\204\074\234" +
    "\075\233\104\212\120\u01da\121\u01d9\122\246\123\244\124" +
    "\301\125\300\126\240\127\237\001\001\000\074\005\242" +
    "\007\207\010\206\022\165\023\164\024\266\025\265\032" +
    "\276\047\251\050\247\054\256\055\064\062\170\063\166" +
    "\066\173\067\171\071\205\072\204\074\234\075\233\104" +
    "\212\120\u01d8\121\u01d7\122\246\123\244\124\301\125\300" +
    "\126\240\127\237\001\001\000\074\005\242\007\207\010" +
    "\206\022\165\023\164\024\266\025\265\032\276\047\251" +
    "\050\247\054\256\055\064\062\170\063\166\066\173\067" +
    "\171\071\205\072\204\074\234\075\233\104\212\120\u01d6" +
    "\121\u01d5\122\246\123\244\124\301\125\300\126\240\127" +
    "\237\001\001\000\074\005\242\007\207\010\206\022\165" +
    "\023\164\024\266\025\265\032\276\047\251\050\247\054" +
    "\256\055\064\062\170\063\166\066\173\067\171\071\205" +
    "\072\204\074\234\075\233\104\212\120\u01d4\121\u01d3\122" +
    "\246\123\244\124\301\125\300\126\240\127\237\001\001" +
    "\000\074\005\242\007\207\010\206\022\165\023\164\024" +
    "\266\025\265\032\276\047\251\050\247\054\256\055\064" +
    "\062\170\063\166\066\173\067\171\071\205\072\204\074" +
    "\234\075\233\104\212\120\u01d2\121\u01d1\122\246\123\244" +
    "\124\301\125\300\126\240\127\237\001\001\000\074\005" +
    "\242\007\207\010\206\022\165\023\164\024\266\025\265" +
    "\032\276\047\251\050\247\054\256\055\064\062\170\063" +
    "\166\066\173\067\171\071\205\072\204\074\234\075\233" +
    "\104\212\120\u01d0\121\u01cf\122\246\123\244\124\301\125" +
    "\300\126\240\127\237\001\001\000\074\005\242\007\207" +
    "\010\206\022\165\023\164\024\266\025\265\032\276\047" +
    "\251\050\247\054\256\055\064\062\170\063\166\066\173" +
    "\067\171\071\205\072\204\074\234\075\233\104\212\120" +
    "\u01ce\121\u01cd\122\246\123\244\124\301\125\300\126\240" +
    "\127\237\001\001\000\074\005\242\007\207\010\206\022" +
    "\165\023\164\024\266\025\265\032\276\047\251\050\247" +
    "\054\256\055\064\062\170\063\166\066\173\067\171\071" +
    "\205\072\204\074\234\075\233\104\212\120\u01cc\121\u01cb" +
    "\122\246\123\244\124\301\125\300\126\240\127\237\001" +
    "\001\000\074\005\242\007\207\010\206\022\165\023\164" +
    "\024\266\025\265\032\276\047\251\050\247\054\256\055" +
    "\064\062\170\063\166\066\173\067\171\071\205\072\204" +
    "\074\234\075\233\104\212\120\u01ca\121\u01c9\122\246\123" +
    "\244\124\301\125\300\126\240\127\237\001\001\000\074" +
    "\005\242\007\207\010\206\022\165\023\164\024\266\025" +
    "\265\032\276\047\251\050\247\054\256\055\064\062\170" +
    "\063\166\066\173\067\171\071\205\072\204\074\234\075" +
    "\233\104\212\120\u01c8\121\u01c7\122\246\123\244\124\301" +
    "\125\300\126\240\127\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\242\006\u01e4\032\276\054\256" +
    "\055\064\104\212\127\374\001\001\000\002\001\001\000" +
    "\024\005\242\006\u01e6\010\364\025\265\032\276\054\256" +
    "\055\064\104\212\127\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\144\002\154\003\152" +
    "\005\242\006\150\007\207\010\206\011\217\012\216\015" +
    "\u0256\022\165\023\164\024\266\025\265\026\232\027\231" +
    "\031\u0255\032\276\041\147\042\146\043\274\044\273\045" +
    "\304\046\303\047\251\050\247\054\u01f9\055\064\056\u01f4" +
    "\060\177\061\176\062\170\063\166\064\222\065\221\066" +
    "\173\067\171\071\205\072\204\074\234\075\233\104\212" +
    "\120\215\121\214\122\246\123\244\124\301\125\300\126" +
    "\240\127\237\001\001\000\144\002\154\003\152\005\242" +
    "\006\150\007\207\010\206\011\217\012\216\015\u0252\022" +
    "\165\023\164\024\266\025\265\026\232\027\231\031\u0251" +
    "\032\276\041\147\042\146\043\274\044\273\045\304\046" +
    "\303\047\251\050\247\054\u01f9\055\064\056\u01f4\060\177" +
    "\061\176\062\170\063\166\064\222\065\221\066\173\067" +
    "\171\071\205\072\204\074\234\075\233\104\212\120\215" +
    "\121\214\122\246\123\244\124\301\125\300\126\240\127" +
    "\237\001\001\000\144\002\154\003\152\005\242\006\150" +
    "\007\207\010\206\011\217\012\216\015\u024e\022\165\023" +
    "\164\024\266\025\265\026\232\027\231\031\u024d\032\276" +
    "\041\147\042\146\043\274\044\273\045\304\046\303\047" +
    "\251\050\247\054\u01f9\055\064\056\u01f4\060\177\061\176" +
    "\062\170\063\166\064\222\065\221\066\173\067\171\071" +
    "\205\072\204\074\234\075\233\104\212\120\215\121\214" +
    "\122\246\123\244\124\301\125\300\126\240\127\237\001" +
    "\001\000\144\002\154\003\152\005\242\006\150\007\207" +
    "\010\206\011\217\012\216\015\u024a\022\165\023\164\024" +
    "\266\025\265\026\232\027\231\031\u0249\032\276\041\147" +
    "\042\146\043\274\044\273\045\304\046\303\047\251\050" +
    "\247\054\u01f9\055\064\056\u01f4\060\177\061\176\062\170" +
    "\063\166\064\222\065\221\066\173\067\171\071\205\072" +
    "\204\074\234\075\233\104\212\120\215\121\214\122\246" +
    "\123\244\124\301\125\300\126\240\127\237\001\001\000" +
    "\144\002\154\003\152\005\242\006\150\007\207\010\206" +
    "\011\217\012\216\015\u0246\022\165\023\164\024\266\025" +
    "\265\026\232\027\231\031\u0245\032\276\041\147\042\146" +
    "\043\274\044\273\045\304\046\303\047\251\050\247\054" +
    "\u01f9\055\064\056\u01f4\060\177\061\176\062\170\063\166" +
    "\064\222\065\221\066\173\067\171\071\205\072\204\074" +
    "\234\075\233\104\212\120\215\121\214\122\246\123\244" +
    "\124\301\125\300\126\240\127\237\001\001\000\144\002" +
    "\154\003\152\005\242\006\150\007\207\010\206\011\217" +
    "\012\216\015\u0242\022\165\023\164\024\266\025\265\026" +
    "\232\027\231\031\u0241\032\276\041\147\042\146\043\274" +
    "\044\273\045\304\046\303\047\251\050\247\054\u01f9\055" +
    "\064\056\u01f4\060\177\061\176\062\170\063\166\064\222" +
    "\065\221\066\173\067\171\071\205\072\204\074\234\075" +
    "\233\104\212\120\215\121\214\122\246\123\244\124\301" +
    "\125\300\126\240\127\237\001\001\000\144\002\154\003" +
    "\152\005\242\006\150\007\207\010\206\011\217\012\216" +
    "\015\u023e\022\165\023\164\024\266\025\265\026\232\027" +
    "\231\031\u023d\032\276\041\147\042\146\043\274\044\273" +
    "\045\304\046\303\047\251\050\247\054\u01f9\055\064\056" +
    "\u01f4\060\177\061\176\062\170\063\166\064\222\065\221" +
    "\066\173\067\171\071\205\072\204\074\234\075\233\104" +
    "\212\120\215\121\214\122\246\123\244\124\301\125\300" +
    "\126\240\127\237\001\001\000\144\002\154\003\152\005" +
    "\242\006\150\007\207\010\206\011\217\012\216\015\u023a" +
    "\022\165\023\164\024\266\025\265\026\232\027\231\031" +
    "\u0239\032\276\041\147\042\146\043\274\044\273\045\304" +
    "\046\303\047\251\050\247\054\u01f9\055\064\056\u01f4\060" +
    "\177\061\176\062\170\063\166\064\222\065\221\066\173" +
    "\067\171\071\205\072\204\074\234\075\233\104\212\120" +
    "\215\121\214\122\246\123\244\124\301\125\300\126\240" +
    "\127\237\001\001\000\144\002\154\003\152\005\242\006" +
    "\150\007\207\010\206\011\217\012\216\015\u0236\022\165" +
    "\023\164\024\266\025\265\026\232\027\231\031\u0235\032" +
    "\276\041\147\042\146\043\274\044\273\045\304\046\303" +
    "\047\251\050\247\054\u01f9\055\064\056\u01f4\060\177\061" +
    "\176\062\170\063\166\064\222\065\221\066\173\067\171" +
    "\071\205\072\204\074\234\075\233\104\212\120\215\121" +
    "\214\122\246\123\244\124\301\125\300\126\240\127\237" +
    "\001\001\000\010\054\111\055\064\056\u0230\001\001\000" +
    "\010\054\111\055\064\056\u022f\001\001\000\002\001\001" +
    "\000\006\032\331\035\u0226\001\001\000\010\054\111\055" +
    "\064\056\u0220\001\001\000\002\001\001\000\144\002\154" +
    "\003\152\005\242\006\150\007\207\010\206\011\217\012" +
    "\216\015\u021e\022\165\023\164\024\266\025\265\026\232" +
    "\027\231\031\u0157\032\276\041\147\042\146\043\274\044" +
    "\273\045\304\046\303\047\251\050\247\054\u01f9\055\064" +
    "\056\u01f4\060\177\061\176\062\170\063\166\064\222\065" +
    "\221\066\173\067\171\071\205\072\204\074\234\075\233" +
    "\104\212\120\215\121\214\122\246\123\244\124\301\125" +
    "\300\126\240\127\237\001\001\000\002\001\001\000\144" +
    "\002\154\003\152\005\242\006\150\007\207\010\206\011" +
    "\217\012\216\015\u021c\022\165\023\164\024\266\025\265" +
    "\026\232\027\231\031\u0155\032\276\041\147\042\146\043" +
    "\274\044\273\045\304\046\303\047\251\050\247\054\u01f9" +
    "\055\064\056\u01f4\060\177\061\176\062\170\063\166\064" +
    "\222\065\221\066\173\067\171\071\205\072\204\074\234" +
    "\075\233\104\212\120\215\121\214\122\246\123\244\124" +
    "\301\125\300\126\240\127\237\001\001\000\144\002\154" +
    "\003\152\005\242\006\150\007\207\010\206\011\217\012" +
    "\216\015\u021a\022\165\023\164\024\266\025\265\026\232" +
    "\027\231\031\u0153\032\276\041\147\042\146\043\274\044" +
    "\273\045\304\046\303\047\251\050\247\054\u01f9\055\064" +
    "\056\u01f4\060\177\061\176\062\170\063\166\064\222\065" +
    "\221\066\173\067\171\071\205\072\204\074\234\075\233" +
    "\104\212\120\215\121\214\122\246\123\244\124\301\125" +
    "\300\126\240\127\237\001\001\000\144\002\154\003\152" +
    "\005\242\006\150\007\207\010\206\011\217\012\216\015" +
    "\u0218\022\165\023\164\024\266\025\265\026\232\027\231" +
    "\031\u0151\032\276\041\147\042\146\043\274\044\273\045" +
    "\304\046\303\047\251\050\247\054\u01f9\055\064\056\u01f4" +
    "\060\177\061\176\062\170\063\166\064\222\065\221\066" +
    "\173\067\171\071\205\072\204\074\234\075\233\104\212" +
    "\120\215\121\214\122\246\123\244\124\301\125\300\126" +
    "\240\127\237\001\001\000\144\002\154\003\152\005\242" +
    "\006\150\007\207\010\206\011\217\012\216\015\u0216\022" +
    "\165\023\164\024\266\025\265\026\232\027\231\031\u014f" +
    "\032\276\041\147\042\146\043\274\044\273\045\304\046" +
    "\303\047\251\050\247\054\u01f9\055\064\056\u01f4\060\177" +
    "\061\176\062\170\063\166\064\222\065\221\066\173\067" +
    "\171\071\205\072\204\074\234\075\233\104\212\120\215" +
    "\121\214\122\246\123\244\124\301\125\300\126\240\127" +
    "\237\001\001\000\144\002\154\003\152\005\242\006\150" +
    "\007\207\010\206\011\217\012\216\015\u0214\022\165\023" +
    "\164\024\266\025\265\026\232\027\231\031\u014d\032\276" +
    "\041\147\042\146\043\274\044\273\045\304\046\303\047" +
    "\251\050\247\054\u01f9\055\064\056\u01f4\060\177\061\176" +
    "\062\170\063\166\064\222\065\221\066\173\067\171\071" +
    "\205\072\204\074\234\075\233\104\212\120\215\121\214" +
    "\122\246\123\244\124\301\125\300\126\240\127\237\001" +
    "\001\000\144\002\154\003\152\005\242\006\150\007\207" +
    "\010\206\011\217\012\216\015\u0212\022\165\023\164\024" +
    "\266\025\265\026\232\027\231\031\u014b\032\276\041\147" +
    "\042\146\043\274\044\273\045\304\046\303\047\251\050" +
    "\247\054\u01f9\055\064\056\u01f4\060\177\061\176\062\170" +
    "\063\166\064\222\065\221\066\173\067\171\071\205\072" +
    "\204\074\234\075\233\104\212\120\215\121\214\122\246" +
    "\123\244\124\301\125\300\126\240\127\237\001\001\000" +
    "\144\002\154\003\152\005\242\006\150\007\207\010\206" +
    "\011\217\012\216\015\u0210\022\165\023\164\024\266\025" +
    "\265\026\232\027\231\031\u0149\032\276\041\147\042\146" +
    "\043\274\044\273\045\304\046\303\047\251\050\247\054" +
    "\u01f9\055\064\056\u01f4\060\177\061\176\062\170\063\166" +
    "\064\222\065\221\066\173\067\171\071\205\072\204\074" +
    "\234\075\233\104\212\120\215\121\214\122\246\123\244" +
    "\124\301\125\300\126\240\127\237\001\001\000\144\002" +
    "\154\003\152\005\242\006\150\007\207\010\206\011\217" +
    "\012\216\015\u020e\022\165\023\164\024\266\025\265\026" +
    "\232\027\231\031\u0147\032\276\041\147\042\146\043\274" +
    "\044\273\045\304\046\303\047\251\050\247\054\u01f9\055" +
    "\064\056\u01f4\060\177\061\176\062\170\063\166\064\222" +
    "\065\221\066\173\067\171\071\205\072\204\074\234\075" +
    "\233\104\212\120\215\121\214\122\246\123\244\124\301" +
    "\125\300\126\240\127\237\001\001\000\010\054\111\055" +
    "\064\056\u0204\001\001\000\010\054\111\055\064\056\u0209" +
    "\001\001\000\002\001\001\000\140\002\154\003\152\005" +
    "\242\006\150\007\207\010\206\011\217\012\216\022\165" +
    "\023\164\024\266\025\265\026\232\027\231\031\u0206\032" +
    "\276\041\147\042\146\043\274\044\273\045\304\046\303" +
    "\047\251\050\247\054\256\055\064\060\177\061\176\062" +
    "\170\063\166\064\222\065\221\066\173\067\171\071\205" +
    "\072\204\074\234\075\233\104\212\120\215\121\214\122" +
    "\246\123\244\124\301\125\300\126\240\127\237\001\001" +
    "\000\002\001\001\000\140\002\154\003\152\005\242\006" +
    "\150\007\207\010\206\011\217\012\216\022\165\023\164" +
    "\024\266\025\265\026\232\027\231\031\u0208\032\276\041" +
    "\147\042\146\043\274\044\273\045\304\046\303\047\251" +
    "\050\247\054\256\055\064\060\177\061\176\062\170\063" +
    "\166\064\222\065\221\066\173\067\171\071\205\072\204" +
    "\074\234\075\233\104\212\120\215\121\214\122\246\123" +
    "\244\124\301\125\300\126\240\127\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\140\002\154\003\152\005" +
    "\242\006\150\007\207\010\206\011\217\012\216\022\165" +
    "\023\164\024\266\025\265\026\232\027\231\031\u020b\032" +
    "\276\041\147\042\146\043\274\044\273\045\304\046\303" +
    "\047\251\050\247\054\256\055\064\060\177\061\176\062" +
    "\170\063\166\064\222\065\221\066\173\067\171\071\205" +
    "\072\204\074\234\075\233\104\212\120\215\121\214\122" +
    "\246\123\244\124\301\125\300\126\240\127\237\001\001" +
    "\000\002\001\001\000\140\002\154\003\152\005\242\006" +
    "\150\007\207\010\206\011\217\012\216\022\165\023\164" +
    "\024\266\025\265\026\232\027\231\031\u020d\032\276\041" +
    "\147\042\146\043\274\044\273\045\304\046\303\047\251" +
    "\050\247\054\256\055\064\060\177\061\176\062\170\063" +
    "\166\064\222\065\221\066\173\067\171\071\205\072\204" +
    "\074\234\075\233\104\212\120\215\121\214\122\246\123" +
    "\244\124\301\125\300\126\240\127\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\140\002\154\003\152\005\242\006\150\007\207\010" +
    "\206\011\217\012\216\022\165\023\164\024\266\025\265" +
    "\026\232\027\231\031\u0222\032\276\041\147\042\146\043" +
    "\274\044\273\045\304\046\303\047\251\050\247\054\256" +
    "\055\064\060\177\061\176\062\170\063\166\064\222\065" +
    "\221\066\173\067\171\071\205\072\204\074\234\075\233" +
    "\104\212\120\215\121\214\122\246\123\244\124\301\125" +
    "\300\126\240\127\237\001\001\000\002\001\001\000\140" +
    "\002\154\003\152\005\242\006\150\007\207\010\206\011" +
    "\217\012\216\022\165\023\164\024\266\025\265\026\232" +
    "\027\231\031\u0224\032\276\041\147\042\146\043\274\044" +
    "\273\045\304\046\303\047\251\050\247\054\256\055\064" +
    "\060\177\061\176\062\170\063\166\064\222\065\221\066" +
    "\173\067\171\071\205\072\204\074\234\075\233\104\212" +
    "\120\215\121\214\122\246\123\244\124\301\125\300\126" +
    "\240\127\237\001\001\000\002\001\001\000\012\015\u022a" +
    "\054\111\055\064\056\u01f4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\054\111\055\064" +
    "\056\u0220\001\001\000\002\001\001\000\140\002\154\003" +
    "\152\005\242\006\150\007\207\010\206\011\217\012\216" +
    "\022\165\023\164\024\266\025\265\026\232\027\231\031" +
    "\u022c\032\276\041\147\042\146\043\274\044\273\045\304" +
    "\046\303\047\251\050\247\054\256\055\064\060\177\061" +
    "\176\062\170\063\166\064\222\065\221\066\173\067\171" +
    "\071\205\072\204\074\234\075\233\104\212\120\215\121" +
    "\214\122\246\123\244\124\301\125\300\126\240\127\237" +
    "\001\001\000\002\001\001\000\140\002\154\003\152\005" +
    "\242\006\150\007\207\010\206\011\217\012\216\022\165" +
    "\023\164\024\266\025\265\026\232\027\231\031\u022e\032" +
    "\276\041\147\042\146\043\274\044\273\045\304\046\303" +
    "\047\251\050\247\054\256\055\064\060\177\061\176\062" +
    "\170\063\166\064\222\065\221\066\173\067\171\071\205" +
    "\072\204\074\234\075\233\104\212\120\215\121\214\122" +
    "\246\123\244\124\301\125\300\126\240\127\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\140\002\154\003\152\005\242\006\150\007\207\010\206" +
    "\011\217\012\216\022\165\023\164\024\266\025\265\026" +
    "\232\027\231\031\u0232\032\276\041\147\042\146\043\274" +
    "\044\273\045\304\046\303\047\251\050\247\054\256\055" +
    "\064\060\177\061\176\062\170\063\166\064\222\065\221" +
    "\066\173\067\171\071\205\072\204\074\234\075\233\104" +
    "\212\120\215\121\214\122\246\123\244\124\301\125\300" +
    "\126\240\127\237\001\001\000\002\001\001\000\140\002" +
    "\154\003\152\005\242\006\150\007\207\010\206\011\217" +
    "\012\216\022\165\023\164\024\266\025\265\026\232\027" +
    "\231\031\u0234\032\276\041\147\042\146\043\274\044\273" +
    "\045\304\046\303\047\251\050\247\054\256\055\064\060" +
    "\177\061\176\062\170\063\166\064\222\065\221\066\173" +
    "\067\171\071\205\072\204\074\234\075\233\104\212\120" +
    "\215\121\214\122\246\123\244\124\301\125\300\126\240" +
    "\127\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\242\006\u025e\010\356\023\352\025\265\032\276" +
    "\050\u010e\054\256\055\064\072\360\075\233\104\212\127" +
    "\237\001\001\000\002\001\001\000\006\032\331\035\u0260" +
    "\001\001\000\002\001\001\000\026\005\242\006\u0264\010" +
    "\356\025\265\032\276\054\256\055\064\072\u0124\104\212" +
    "\127\237\001\001\000\032\005\242\006\u0263\010\356\023" +
    "\352\025\265\032\276\054\256\055\064\072\360\075\u0123" +
    "\104\212\127\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\126\002\154\003\152\005\242\006\u0269\007\207" +
    "\010\206\011\217\012\216\022\165\023\164\024\266\025" +
    "\265\032\276\041\u0268\042\u01a9\043\274\044\u026a\045\304" +
    "\046\303\047\251\050\247\054\256\055\064\060\177\061" +
    "\176\062\170\063\166\066\173\067\171\071\205\072\204" +
    "\074\234\075\233\104\212\120\215\121\214\122\246\123" +
    "\244\124\301\125\300\126\240\127\237\001\001\000\052" +
    "\005\242\006\u0267\010\356\012\u017b\023\352\025\265\032" +
    "\276\050\345\054\256\055\064\061\u01a8\063\166\067\353" +
    "\072\360\075\233\104\212\121\u017a\123\u0133\125\u0182\127" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\122\002\154\003\152\005" +
    "\242\006\u026c\007\207\010\206\011\217\012\216\022\165" +
    "\023\164\024\266\025\265\032\276\043\u026d\044\u01ad\045" +
    "\u026e\046\u01ac\047\251\050\247\054\256\055\064\060\177" +
    "\061\176\062\170\063\166\066\173\067\171\071\205\072" +
    "\204\074\234\075\233\104\212\120\215\121\214\122\246" +
    "\123\244\124\301\125\300\126\240\127\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\140\002\154\003\152\005" +
    "\242\006\150\007\207\010\206\011\217\012\216\022\165" +
    "\023\164\024\266\025\265\026\232\027\231\031\u0272\032" +
    "\276\041\147\042\146\043\274\044\273\045\304\046\303" +
    "\047\251\050\247\054\256\055\064\060\177\061\176\062" +
    "\170\063\166\064\222\065\221\066\173\067\171\071\205" +
    "\072\204\074\234\075\233\104\212\120\215\121\214\122" +
    "\246\123\244\124\301\125\300\126\240\127\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\140\002\154\003" +
    "\152\005\242\006\150\007\207\010\206\011\217\012\216" +
    "\022\165\023\164\024\266\025\265\026\232\027\231\031" +
    "\u0275\032\276\041\147\042\146\043\274\044\273\045\304" +
    "\046\303\047\251\050\247\054\256\055\064\060\177\061" +
    "\176\062\170\063\166\064\222\065\221\066\173\067\171" +
    "\071\205\072\204\074\234\075\233\104\212\120\215\121" +
    "\214\122\246\123\244\124\301\125\300\126\240\127\237" +
    "\001\001\000\002\001\001\000\140\002\154\003\152\005" +
    "\242\006\150\007\207\010\206\011\217\012\216\022\165" +
    "\023\164\024\266\025\265\026\232\027\231\031\u0277\032" +
    "\276\041\147\042\146\043\274\044\273\045\304\046\303" +
    "\047\251\050\247\054\256\055\064\060\177\061\176\062" +
    "\170\063\166\064\222\065\221\066\173\067\171\071\205" +
    "\072\204\074\234\075\233\104\212\120\215\121\214\122" +
    "\246\123\244\124\301\125\300\126\240\127\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\140\002\154\003" +
    "\152\005\242\006\150\007\207\010\206\011\217\012\216" +
    "\022\165\023\164\024\266\025\265\026\232\027\231\031" +
    "\u027a\032\276\041\147\042\146\043\274\044\273\045\304" +
    "\046\303\047\251\050\247\054\256\055\064\060\177\061" +
    "\176\062\170\063\166\064\222\065\221\066\173\067\171" +
    "\071\205\072\204\074\234\075\233\104\212\120\215\121" +
    "\214\122\246\123\244\124\301\125\300\126\240\127\237" +
    "\001\001\000\002\001\001\000\140\002\154\003\152\005" +
    "\242\006\150\007\207\010\206\011\217\012\216\022\165" +
    "\023\164\024\266\025\265\026\232\027\231\031\u027c\032" +
    "\276\041\147\042\146\043\274\044\273\045\304\046\303" +
    "\047\251\050\247\054\256\055\064\060\177\061\176\062" +
    "\170\063\166\064\222\065\221\066\173\067\171\071\205" +
    "\072\204\074\234\075\233\104\212\120\215\121\214\122" +
    "\246\123\244\124\301\125\300\126\240\127\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\015\124\016" +
    "\122\020\u027f\054\111\055\064\056\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\140\002\154\003\152\005" +
    "\242\006\150\007\207\010\206\011\217\012\216\022\165" +
    "\023\164\024\266\025\265\026\232\027\231\031\u0282\032" +
    "\276\041\147\042\146\043\274\044\273\045\304\046\303" +
    "\047\251\050\247\054\256\055\064\060\177\061\176\062" +
    "\170\063\166\064\222\065\221\066\173\067\171\071\205" +
    "\072\204\074\234\075\233\104\212\120\215\121\214\122" +
    "\246\123\244\124\301\125\300\126\240\127\237\001\001" +
    "\000\002\001\001\000\140\002\154\003\152\005\242\006" +
    "\150\007\207\010\206\011\217\012\216\022\165\023\164" +
    "\024\266\025\265\026\232\027\231\031\u0284\032\276\041" +
    "\147\042\146\043\274\044\273\045\304\046\303\047\251" +
    "\050\247\054\256\055\064\060\177\061\176\062\170\063" +
    "\166\064\222\065\221\066\173\067\171\071\205\072\204" +
    "\074\234\075\233\104\212\120\215\121\214\122\246\123" +
    "\244\124\301\125\300\126\240\127\237\001\001\000\002" +
    "\001\001\000\010\054\111\055\064\056\u028b\001\001\000" +
    "\002\001\001\000\140\002\154\003\152\005\242\006\150" +
    "\007\207\010\206\011\217\012\216\022\165\023\164\024" +
    "\266\025\265\026\232\027\231\031\u0288\032\276\041\147" +
    "\042\146\043\274\044\273\045\304\046\303\047\251\050" +
    "\247\054\256\055\064\060\177\061\176\062\170\063\166" +
    "\064\222\065\221\066\173\067\171\071\205\072\204\074" +
    "\234\075\233\104\212\120\215\121\214\122\246\123\244" +
    "\124\301\125\300\126\240\127\237\001\001\000\002\001" +
    "\001\000\140\002\154\003\152\005\242\006\150\007\207" +
    "\010\206\011\217\012\216\022\165\023\164\024\266\025" +
    "\265\026\232\027\231\031\u028a\032\276\041\147\042\146" +
    "\043\274\044\273\045\304\046\303\047\251\050\247\054" +
    "\256\055\064\060\177\061\176\062\170\063\166\064\222" +
    "\065\221\066\173\067\171\071\205\072\204\074\234\075" +
    "\233\104\212\120\215\121\214\122\246\123\244\124\301" +
    "\125\300\126\240\127\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\140\002\154\003\152\005\242\006\150" +
    "\007\207\010\206\011\217\012\216\022\165\023\164\024" +
    "\266\025\265\026\232\027\231\031\u028d\032\276\041\147" +
    "\042\146\043\274\044\273\045\304\046\303\047\251\050" +
    "\247\054\256\055\064\060\177\061\176\062\170\063\166" +
    "\064\222\065\221\066\173\067\171\071\205\072\204\074" +
    "\234\075\233\104\212\120\215\121\214\122\246\123\244" +
    "\124\301\125\300\126\240\127\237\001\001\000\002\001" +
    "\001\000\140\002\154\003\152\005\242\006\150\007\207" +
    "\010\206\011\217\012\216\022\165\023\164\024\266\025" +
    "\265\026\232\027\231\031\u028f\032\276\041\147\042\146" +
    "\043\274\044\273\045\304\046\303\047\251\050\247\054" +
    "\256\055\064\060\177\061\176\062\170\063\166\064\222" +
    "\065\221\066\173\067\171\071\205\072\204\074\234\075" +
    "\233\104\212\120\215\121\214\122\246\123\244\124\301" +
    "\125\300\126\240\127\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\140\002\154\003\152\005\242\006\150" +
    "\007\207\010\206\011\217\012\216\022\165\023\164\024" +
    "\266\025\265\026\232\027\231\031\u0292\032\276\041\147" +
    "\042\146\043\274\044\273\045\304\046\303\047\251\050" +
    "\247\054\256\055\064\060\177\061\176\062\170\063\166" +
    "\064\222\065\221\066\173\067\171\071\205\072\204\074" +
    "\234\075\233\104\212\120\215\121\214\122\246\123\244" +
    "\124\301\125\300\126\240\127\237\001\001\000\004\032" +
    "\u0293\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\140\002\154\003\152\005\242\006\150\007" +
    "\207\010\206\011\217\012\216\022\165\023\164\024\266" +
    "\025\265\026\232\027\231\031\u0297\032\276\041\147\042" +
    "\146\043\274\044\273\045\304\046\303\047\251\050\247" +
    "\054\256\055\064\060\177\061\176\062\170\063\166\064" +
    "\222\065\221\066\173\067\171\071\205\072\204\074\234" +
    "\075\233\104\212\120\215\121\214\122\246\123\244\124" +
    "\301\125\300\126\240\127\237\001\001\000\004\032\u0298" +
    "\001\001\000\002\001\001\000\004\032\u029a\001\001\000" +
    "\002\001\001\000\140\002\154\003\152\005\242\006\150" +
    "\007\207\010\206\011\217\012\216\022\165\023\164\024" +
    "\266\025\265\026\232\027\231\031\u02a8\032\276\041\147" +
    "\042\146\043\274\044\273\045\304\046\303\047\251\050" +
    "\247\054\256\055\064\060\177\061\176\062\170\063\166" +
    "\064\222\065\221\066\173\067\171\071\205\072\204\074" +
    "\234\075\233\104\212\120\215\121\214\122\246\123\244" +
    "\124\301\125\300\126\240\127\237\001\001\000\016\015" +
    "\124\016\122\020\u02a3\054\111\055\064\056\137\001\001" +
    "\000\016\015\124\016\122\020\u029e\054\111\055\064\056" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\140" +
    "\002\154\003\152\005\242\006\150\007\207\010\206\011" +
    "\217\012\216\022\165\023\164\024\266\025\265\026\232" +
    "\027\231\031\u02a1\032\276\041\147\042\146\043\274\044" +
    "\273\045\304\046\303\047\251\050\247\054\256\055\064" +
    "\060\177\061\176\062\170\063\166\064\222\065\221\066" +
    "\173\067\171\071\205\072\204\074\234\075\233\104\212" +
    "\120\215\121\214\122\246\123\244\124\301\125\300\126" +
    "\240\127\237\001\001\000\004\032\u02a2\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
    "\154\003\152\005\242\006\150\007\207\010\206\011\217" +
    "\012\216\022\165\023\164\024\266\025\265\026\232\027" +
    "\231\031\u02a6\032\276\041\147\042\146\043\274\044\273" +
    "\045\304\046\303\047\251\050\247\054\256\055\064\060" +
    "\177\061\176\062\170\063\166\064\222\065\221\066\173" +
    "\067\171\071\205\072\204\074\234\075\233\104\212\120" +
    "\215\121\214\122\246\123\244\124\301\125\300\126\240" +
    "\127\237\001\001\000\004\032\u02a7\001\001\000\002\001" +
    "\001\000\004\032\u02a9\001\001\000\002\001\001\000\004" +
    "\032\u02b7\001\001\000\002\001\001\000\006\054\u02ad\055" +
    "\064\001\001\000\004\032\u02ae\001\001\000\002\001\001" +
    "\000\016\015\124\016\122\020\u02b4\054\111\055\064\056" +
    "\137\001\001\000\016\015\124\016\122\020\u02b1\054\111" +
    "\055\064\056\137\001\001\000\002\001\001\000\004\032" +
    "\u02b3\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u02b6\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\015\124\016\122\020\u02bd\054\111\055\064\056\137" +
    "\001\001\000\016\015\124\016\122\020\u02ba\054\111\055" +
    "\064\056\137\001\001\000\002\001\001\000\004\032\u02bc" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u02bf\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\054\u02e2" +
    "\055\064\057\u02e4\001\001\000\002\001\001\000\006\054" +
    "\u02ea\055\064\001\001\000\002\001\001\000\006\054\u02e7" +
    "\055\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\054\u02e9\055\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\054\u030b\055\064\001\001\000\006\054" +
    "\u02fa\055\064\001\001\000\006\054\u02ee\055\064\001\001" +
    "\000\002\001\001\000\006\054\u02f9\055\064\001\001\000" +
    "\014\054\256\055\064\104\u02f3\105\u02f2\106\u02f1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\054\256\055\064\104\u02f5\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\054\u02f8\055\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\u02fd\053\u02fc" +
    "\001\001\000\140\002\154\003\152\005\242\006\150\007" +
    "\207\010\206\011\217\012\216\022\165\023\164\024\266" +
    "\025\265\026\232\027\231\031\u030a\032\276\041\147\042" +
    "\146\043\274\044\273\045\304\046\303\047\251\050\247" +
    "\054\256\055\064\060\177\061\176\062\170\063\166\064" +
    "\222\065\221\066\173\067\171\071\205\072\204\074\234" +
    "\075\233\104\212\120\215\121\214\122\246\123\244\124" +
    "\301\125\300\126\240\127\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\054\111\055\064\056\u0306\001" +
    "\001\000\010\054\111\055\064\056\u0300\001\001\000\002" +
    "\001\001\000\006\032\u02fd\053\u0302\001\001\000\002\001" +
    "\001\000\006\032\u02fd\053\u0304\001\001\000\002\001\001" +
    "\000\006\032\u02fd\053\u0309\001\001\000\002\001\001\000" +
    "\006\032\u02fd\053\u0308\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\054" +
    "\111\055\064\056\u030d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u0314\001\001\000" +
    "\002\001\001\000\004\032\u0313\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\u0368\054\u0367\055\064\117" +
    "\u0369\001\001\000\004\117\u0318\001\001\000\004\116\u033e" +
    "\001\001\000\004\077\u0319\001\001\000\004\030\u033b\001" +
    "\001\000\010\113\u031c\114\u031f\115\u031d\001\001\000\002" +
    "\001\001\000\006\054\u032d\055\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\113\u031c\114\u031f\115\u0327\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\113\u031c\114\u032a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\116\u0352\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\117\u036f\001\001\000" +
    "\004\117\u036c\001\001\000\004\077\u036a\001\001\000\004" +
    "\030\u036b\001\001\000\002\001\001\000\004\077\u036d\001" +
    "\001\000\004\030\u036e\001\001\000\002\001\001\000\004" +
    "\077\u0370\001\001\000\004\030\u0371\001\001\000\002\001" +
    "\001\000\004\032\u0376\001\001\000\002\001\001\000\004" +
    "\032\u0375\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u0378\001\001\000\010\032\u037a\054\u0379\055\064" +
    "\001\001\000\012\032\u037f\054\u037e\055\064\117\u0380\001" +
    "\001\000\004\117\u037b\001\001\000\004\077\u037c\001\001" +
    "\000\004\030\u037d\001\001\000\002\001\001\000\004\117" +
    "\u0386\001\001\000\004\117\u0383\001\001\000\004\077\u0381" +
    "\001\001\000\004\030\u0382\001\001\000\002\001\001\000" +
    "\004\077\u0384\001\001\000\004\030\u0385\001\001\000\002" +
    "\001\001\000\004\077\u0387\001\001\000\004\030\u0388\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\u038f\001\001\000\012\054\256\055\064\104" +
    "\u0396\107\u039a\001\001\000\010\054\256\055\064\104\u0399" +
    "\001\001\000\012\054\256\055\064\104\u0396\107\u0395\001" +
    "\001\000\002\001\001\000\016\015\124\016\122\020\u0391" +
    "\054\111\055\064\056\137\001\001\000\002\001\001\000" +
    "\006\032\u0394\033\u0393\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\054" +
    "\256\055\064\104\u0398\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  @Override
public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
protected void init_actions()
    {
      action_obj = new CUP$CompParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  @Override
public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  @Override
public int error_sym() {return 1;}




  public CompModule alloymodule=null;

  @Override public Symbol parse() throws java.lang.Exception {
     int act; // current action code
     Symbol lhs_sym = null; // the Symbol/stack element returned by a reduce
     short handle_size, lhs_sym_num; // information about production being reduced with
     boolean logging = AlloyCore.isDebug();
     production_tab = production_table();
     action_tab     = action_table();
     reduce_tab     = reduce_table();
     init_actions();
     user_init();
     // start
     cur_token = scan();
     stack.removeAllElements();
     stack.push(getSymbolFactory().startSymbol("START", 0, start_state()));
     tos = 0;
     for (_done_parsing = false; !_done_parsing; ) {
        act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);
        if (act > 0) { // "shift"; thus, we shift to the encoded state by pushing it on the stack
           if (logging) System.out.println("shift " + cur_token.sym);
           cur_token.parse_state = act-1;
           stack.push(cur_token);
           tos++;
           cur_token = scan();
        } else if (act<0) { // "reduce"
           if (logging) System.out.println("reduce " + ((-act)-1));
           lhs_sym = do_action((-act)-1, this, stack, tos);
           lhs_sym_num = production_tab[(-act)-1][0];
           handle_size = production_tab[(-act)-1][1];
           for (int i = 0; i < handle_size; i++)  {  stack.pop(); tos--; }
           act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);
           lhs_sym.parse_state = act;
           stack.push(lhs_sym);
           tos++;
        } else { // "error"
           if (logging) System.out.println("error");
           syntax_error(cur_token);
           done_parsing();
        }
     }
     return lhs_sym;
  }

  @Override
public void syntax_error(Symbol x) throws Err {
    Map<Integer,String> ch = new LinkedHashMap<>();
    ch.put(CompSym.ARROW, "->");
    ch.put(CompSym.ANY_ARROW_SOME, "->");
    ch.put(CompSym.ANY_ARROW_ONE, "->");
    ch.put(CompSym.ANY_ARROW_LONE, "->");
    ch.put(CompSym.SOME_ARROW_ANY, "some");
    ch.put(CompSym.SOME_ARROW_SOME, "some");
    ch.put(CompSym.SOME_ARROW_ONE, "some");
    ch.put(CompSym.SOME_ARROW_LONE, "some");
    ch.put(CompSym.ONE_ARROW_ANY, "one");
    ch.put(CompSym.ONE_ARROW_SOME, "one");
    ch.put(CompSym.ONE_ARROW_ONE, "one");
    ch.put(CompSym.ONE_ARROW_LONE, "one");
    ch.put(CompSym.LONE_ARROW_ANY, "lone");
    ch.put(CompSym.LONE_ARROW_SOME, "lone");
    ch.put(CompSym.LONE_ARROW_ONE, "lone");
    ch.put(CompSym.LONE_ARROW_LONE, "lone");
    ch.put(CompSym.INTADD, "fun");
    ch.put(CompSym.INTSUB, "fun");
    ch.put(CompSym.INTMUL, "fun");
    ch.put(CompSym.INTDIV, "fun");
    ch.put(CompSym.INTREM, "fun");
    ch.put(CompSym.INTMIN, "fun");
    ch.put(CompSym.INTMAX, "fun");
    ch.put(CompSym.INTNEXT, "fun");
    ch.put(CompSym.TOTALORDER, "pred");
    ch.put(CompSym.ABSTRACT, "abstract");
    ch.put(CompSym.ALL, "all");
    ch.put(CompSym.ALL2, "all");
    ch.put(CompSym.AMPERSAND, "&");
    ch.put(CompSym.AND, "&&");
    ch.put(CompSym.AS, "as");
    ch.put(CompSym.ASSERT, "assert");
    ch.put(CompSym.AT, "@");
    ch.put(CompSym.BAR, "|");
    ch.put(CompSym.BUT, "but");
    ch.put(CompSym.CARET, "^");
    ch.put(CompSym.CHECK, "check");
    ch.put(CompSym.COLON, ":");
    ch.put(CompSym.COMMA, ", ");
    ch.put(CompSym.DISJ, "disj");
    ch.put(CompSym.DOMAIN, "<:");
    ch.put(CompSym.DOT, ".");
    ch.put(CompSym.ELSE, "else");
    ch.put(CompSym.ENUM, "enum");
    ch.put(CompSym.EQUALS, "=");
    ch.put(CompSym.EXACTLY, "exactly");
    ch.put(CompSym.EXH, "exh");
    ch.put(CompSym.EXPECT, "expect");
    ch.put(CompSym.EXTENDS, "extends");
    ch.put(CompSym.FACT, "fact");
    ch.put(CompSym.FOR, "for");
    ch.put(CompSym.FUN, "fun");
    ch.put(CompSym.GT, ">");
    ch.put(CompSym.GTE, ">=");
    ch.put(CompSym.HASH, "#");
    ch.put(CompSym.IDEN, "iden");
    ch.put(CompSym.IFF, "iff");
    ch.put(CompSym.IMPLIES, "=>");
    ch.put(CompSym.IN, "in");
    ch.put(CompSym.INT, "int");
    ch.put(CompSym.LBRACE, "{");
    ch.put(CompSym.LBRACKET, "[");
    ch.put(CompSym.LET, "let");
    ch.put(CompSym.LONE2, "lone");
    ch.put(CompSym.LONE, "lone");
    ch.put(CompSym.LPAREN, "(");
    ch.put(CompSym.LT, "<");
    ch.put(CompSym.LTE, "<=");
    ch.put(CompSym.MINUS, "-");
    ch.put(CompSym.MODULE, "module");
    ch.put(CompSym.NO2, "no");
    ch.put(CompSym.NO, "no");
    ch.put(CompSym.NONE, "none");
    ch.put(CompSym.NOT, "!");
    ch.put(CompSym.NOTEQUALS, "!");
    ch.put(CompSym.NOTGT, "!");
    ch.put(CompSym.NOTGTE, "!");
    ch.put(CompSym.NOTIN, "!");
    ch.put(CompSym.NOTLT, "!");
    ch.put(CompSym.NOTLTE, "!");
    ch.put(CompSym.ONE2, "one");
    ch.put(CompSym.ONE, "one");
    ch.put(CompSym.OPEN, "open");
    ch.put(CompSym.OR, "||");
    ch.put(CompSym.PART, "part");
    ch.put(CompSym.PLUS, "+");
    ch.put(CompSym.PLUSPLUS, "++");
    ch.put(CompSym.PRED, "pred");
    ch.put(CompSym.PRIVATE, "private");
    ch.put(CompSym.RANGE, ":>");
    ch.put(CompSym.RBRACE, "}");
    ch.put(CompSym.RBRACKET, "]");
    ch.put(CompSym.RPAREN, ")");
    ch.put(CompSym.RUN, "run");
    ch.put(CompSym.SEQ, "seq");
    ch.put(CompSym.SET, "set");
    ch.put(CompSym.SHL, "<<");
    ch.put(CompSym.SHR, ">>>");
    ch.put(CompSym.SHA, ">>");
    ch.put(CompSym.SIG, "sig");
    ch.put(CompSym.SIGINT, "Int");
    ch.put(CompSym.SLASH, "/");
    ch.put(CompSym.SOME2, "some");
    ch.put(CompSym.SOME, "some");
    ch.put(CompSym.STAR, "*");
    ch.put(CompSym.STRING, "String");
    ch.put(CompSym.SUM2, "sum");
    ch.put(CompSym.SUM, "sum");
    ch.put(CompSym.THIS, "this");
    ch.put(CompSym.TILDE, "~");
    ch.put(CompSym.UNIV, "univ");
    ch.put(CompSym.ID, "NAME");
    ch.put(CompSym.NUMBER, "NUMBER");
    ch.put(CompSym.STR, "STRING");
    ch.put(CompSym.WITH, "with"); // [HASLab] colorful Alloy
    ch.put(CompSym.PFEAT1,"\u2780" ); // [HASLab] colorful Alloy
    ch.put(CompSym.PFEAT2,"\u2781" ); // [HASLab] colorful Alloy
    ch.put(CompSym.PFEAT3,"\u2782" ); // [HASLab] colorful Alloy
    ch.put(CompSym.PFEAT4,"\u2783" ); // [HASLab] colorful Alloy
    ch.put(CompSym.PFEAT5,"\u2784" ); // [HASLab] colorful Alloy
    ch.put(CompSym.PFEAT6,"\u2785" ); // [HASLab] colorful Alloy
    ch.put(CompSym.PFEAT7,"\u2786" ); // [HASLab] colorful Alloy
    ch.put(CompSym.PFEAT8,"\u2787" ); // [HASLab] colorful Alloy
    ch.put(CompSym.PFEAT9,"\u2788" ); // [HASLab] colorful Alloy
    ch.put(CompSym.NFEAT1,"\u278A" ); // [HASLab] colorful Alloy
    ch.put(CompSym.NFEAT2,"\u278B" ); // [HASLab] colorful Alloy
    ch.put(CompSym.NFEAT3,"\u278C" ); // [HASLab] colorful Alloy
    ch.put(CompSym.NFEAT4,"\u278D" ); // [HASLab] colorful Alloy
    ch.put(CompSym.NFEAT5,"\u278E" ); // [HASLab] colorful Alloy
    ch.put(CompSym.NFEAT6,"\u278F" ); // [HASLab] colorful Alloy
    ch.put(CompSym.NFEAT7,"\u2790" ); // [HASLab] colorful Alloy
    ch.put(CompSym.NFEAT8,"\u2791" ); // [HASLab] colorful Alloy
	ch.put(CompSym.NFEAT9,"\u2792" ); // [HASLab] colorful Alloy
	TreeSet<String> list = new TreeSet<>();
    Pos p=Pos.UNKNOWN;
    if (x!=null && x.value instanceof Pos) p=(Pos)(x.value);
       else if (x!=null && x.value instanceof Expr) p=((Expr)(x.value)).pos;
       else if (x!=null) p=x.pos;
    if (!stack.empty()) for(Map.Entry<Integer,String> e:ch.entrySet()) {
        int key=e.getKey(), act=get_action(((Symbol)stack.peek()).parse_state, key);
        if (act==0) continue;
        try {
            if (act>0 || alloy_confirm(key)) list.add(e.getValue());
        } catch(Throwable ex) {
            // If the parser is really really confused, alloy_confirm() could fail with array out-of-bound exception, etc.
        }
    }
    String result="There are "+list.size()+" possible tokens that can appear here:\n";
    for(String item:list) result=result+item+" ";
    throw new ErrorSyntax(p, (list.size()!=0)?result:"");
  }

  private boolean alloy_confirm(int key) {
    int state = ((Symbol)stack.peek()).parse_state;
    Stack<Object> newstack=new Stack<>(); for(Object x:stack) newstack.push(x);
    while(true) {
      int act = get_action(state, key);
      if (act>0) return true;
      if (act==0) return false;
      int lhs_sym_num = production_tab[(-act)-1][0];
      int handle_size = production_tab[(-act)-1][1];
      for (int i = 0; i < handle_size; i++) { if (newstack.empty()) return false; newstack.pop(); }
      if (newstack.empty()) return false;
      if (newstack.peek() instanceof Symbol) state=((Symbol)newstack.peek()).parse_state;
      state=get_reduce(state, lhs_sym_num);
      newstack.push(null);
    }
  }

  static final String INT_LIB_NAME = "util" + java.io.File.separator + "integer";
  static CompModule alloy_parseStream (List<Object> seenDollar,
  Map<String,String> loaded, Map<String,String> fc, CompModule root,
  int lineOffset, String filename, String prefix, int initialResolutionMode) throws Err, FileNotFoundException, IOException {
    Reader isr=null;
    try {
        if (root==null && prefix.length()!=0) throw new ErrorFatal("Internal error (parse subfile with root==null)");
        if (root!=null && prefix.length()==0) throw new ErrorFatal("Internal error (parse topfile with root!=null)");
        CompModule u = new CompModule(root, filename, prefix);
        if (!filename.endsWith(INT_LIB_NAME + ".als"))
            u.addOpen(null, null, ExprVar.make(null, INT_LIB_NAME), null, ExprVar.make(null, "integer"));
        u.resolution = initialResolutionMode;
        String content = fc!=null ? fc.get(filename) : null;
        if (content==null && loaded!=null) content = loaded.get(filename);
        if (content==null) content = Util.readAll(filename);
        if (loaded!=null) loaded.put(filename,content);
        content = MarkdownHandler.strip(content);
        content = Util.convertLineBreak(content);
        isr = new StringReader(content);
        CompFilter s = new CompFilter(u, seenDollar, filename, lineOffset, new BufferedReader(isr));
        CompParser p = new CompParser(s);
        p.alloymodule=u;
        try {p.parse();} catch(Throwable ex) {if (ex instanceof Err) throw (Err)ex; throw new ErrorFatal("Parser Exception", ex);}
        return u;
    } finally {
        Util.close(isr);
    }
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompParser$actions {


    /** This function is needed to handle a difficult parsing ambiguity.
     *
     * <p>
     * "some EXPR", "one EXPR", and "lone EXPR"
     * can be either formulas (saying the EXPR has at least 1, exactly 1, or at most 1 tuple),
     * or multiplicity constraints (saying something else has this multiplicity).
     *
     * <p>
     * So we let the parser generate the former by default.
     * And whenever we construct a Decl "x: y" object,
     * or an binary expression "x in y", or a function return type,
     * we call this method on y to convert it into a multiplicity constraint.
     *
     * <p>
     * This is safe, because in all 3 cases, a formula would be illegal.
     * So the first form is always wrong.
     *
     * <p>
     * And this is sufficient, because those are the only 3 places
     * where a mulitplicity constraint is allowed to appear.
     *
     * @return a newly formed multiplciity constraint (if this.op==SOME or LONE or ONE),
     * otherwise it just returns the original node.
     */
    private Expr mult(Expr x) throws Err {
        if (x instanceof ExprUnary) {
           ExprUnary y=(ExprUnary)x;
           if (y.op==ExprUnary.Op.SOME) return ExprUnary.Op.SOMEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.LONE) return ExprUnary.Op.LONEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.ONE)  return ExprUnary.Op.ONEOF.make(y.pos, y.sub);
        }
        return x;
    }
    private void nod(ExprVar name) throws Err {
        if (name.label.indexOf('$')>=0) throw new ErrorSyntax(name.pos, "The name cannot contain the '$' symbol.");
    }
    private void nod(List<ExprVar> names) throws Err {
        if (names!=null) for(ExprVar n:names) if (n!=null && n.label.indexOf('$')>=0) throw new ErrorSyntax(n.pos, "The name cannot contain the '$' symbol.");
    }
    // [HASLab] colorful Alloy, feature scope, not yet type checked
    private void c(boolean follow, ExprVar o, ExprVar x, ExprVar n, Expr e, List<CommandScope> s, ExprConstant c, FeatureScope f) throws Err {
        if (n!=null) nod(n);
        int bitwidth=(-1), maxseq=(-1), overall=(-1), expects=(c==null ? -1 : c.num);
        Pos p = o.pos.merge(n!=null ? n.span() : e.span());
        for(int i=s.size()-1; i>=0; i--) {
          Sig j=s.get(i).sig;  int k=s.get(i).startingScope;
          p=p.merge(j.pos);
          if (j.label.equals("univ")) { overall=k; s.remove(i); continue; }
          if (j.label.equals("int"))  { if (bitwidth>=0) throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once."); bitwidth=k; s.remove(i); continue; }
          if (j.label.equals("seq"))  { if (maxseq>=0) throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once."); maxseq=k; s.remove(i); continue; }
        }
        if (n!=null)
          parser.alloymodule.addCommand(follow, p, n, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x, f);
        else
          parser.alloymodule.addCommand(follow, p, e, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x, f);
    }
    private Expr t(Pos pos, Pos oldClosing, Expr left, Expr right, Pos close) throws Err {
      if (right instanceof ExprVar) {
         String n = ((ExprVar)right).label;
         if (n.equals("int"))             return ExprUnary.Op.CAST2INT.make(pos, left);
         if (n.equals("disj"))            return ExprList.makeDISJOINT(pos, close, Util.asList(left));
         if (n.equals("pred/totalOrder")) return ExprList.makeTOTALORDER(pos, close, Util.asList(left));
      }
      else if (right instanceof ExprList) {
         return ((ExprList)right).addArg(left);
      }
      return ExprBadJoin.make(pos, oldClosing, left, right);
    }

  private final CompParser parser;

  /** Constructor */
  CUP$CompParser$actions(CompParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompParser$do_action(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack            CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompParser$result;

      /* select the action based on the action number */
      switch (CUP$CompParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // BaseExpr ::= LBRACE Declz RBRACE 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, ExprConstant.TRUE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // BaseExpr ::= LBRACE Declz SuperOrBar RBRACE 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, b);                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // BaseExpr ::= Super 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // BaseExpr ::= AT Name 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT = ExprVar.make(o.merge(x.pos), "@"+x.label);        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // BaseExpr ::= SigRef 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // BaseExpr ::= NFEAT9 Expr NFEAT9 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-9); RESULT = x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // BaseExpr ::= NFEAT8 Expr NFEAT8 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-8); RESULT = x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // BaseExpr ::= NFEAT7 Expr NFEAT7 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-7); RESULT = x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // BaseExpr ::= NFEAT6 Expr NFEAT6 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-6); RESULT = x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // BaseExpr ::= NFEAT5 Expr NFEAT5 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-5); RESULT = x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // BaseExpr ::= NFEAT4 Expr NFEAT4 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-4); RESULT = x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // BaseExpr ::= NFEAT3 Expr NFEAT3 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-3); RESULT = x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // BaseExpr ::= NFEAT2 Expr NFEAT2 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-2); RESULT = x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // BaseExpr ::= NFEAT1 Expr NFEAT1 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-1); RESULT = x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // BaseExpr ::= PFEAT9 Expr PFEAT9 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(9); RESULT = x;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // BaseExpr ::= PFEAT8 Expr PFEAT8 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(8); RESULT = x;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // BaseExpr ::= PFEAT7 Expr PFEAT7 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(7); RESULT = x;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // BaseExpr ::= PFEAT6 Expr PFEAT6 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(6); RESULT = x;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // BaseExpr ::= PFEAT5 Expr PFEAT5 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(5); RESULT = x;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // BaseExpr ::= PFEAT4 Expr PFEAT4 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(4); RESULT = x;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // BaseExpr ::= PFEAT3 Expr PFEAT3 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(3); RESULT = x;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // BaseExpr ::= PFEAT2 Expr PFEAT2 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(2); RESULT = x;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // BaseExpr ::= PFEAT1 Expr PFEAT1 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(1); RESULT = x;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // BaseExpr ::= LPAREN Expr RPAREN 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // BaseExpr ::= INTNEXT 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.NEXT.make(o, 0);                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // BaseExpr ::= INTMAX 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.MAX.make(o, 0);                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // BaseExpr ::= INTMIN 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.MIN.make(o, 0);                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // BaseExpr ::= THIS 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(o, "this");                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // BaseExpr ::= IDEN 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(o, "iden");                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // BaseExpr ::= STR 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // BaseExpr ::= NUMBER 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // UnopExprB ::= CARET UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // UnopExprB ::= STAR UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // UnopExprB ::= TILDE UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // UnopExprB ::= BaseExpr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // UnopExprA ::= CARET UnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // UnopExprA ::= STAR UnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // UnopExprA ::= TILDE UnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // UnopExprA ::= CARET Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // UnopExprA ::= STAR Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // UnopExprA ::= TILDE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // DotExprB ::= BracketExprB DOT SUM 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // DotExprB ::= BracketExprB DOT INT 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // DotExprB ::= BracketExprB DOT TOTALORDER 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, ExprVar.make(b, "pred/totalOrder"), null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // DotExprB ::= BracketExprB DOT DISJ 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, ExprVar.make(b, "disj"),            null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // DotExprB ::= BracketExprB DOT UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, b,                                  null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // DotExprB ::= UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // DotExprA ::= BracketExprB DOT Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, b,                                  null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // DotExprA ::= UnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // BracketExprB ::= SUM LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // BracketExprB ::= INT LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // BracketExprB ::= TOTALORDER LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "pred/totalOrder"); for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // BracketExprB ::= DISJ LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "disj");            for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // BracketExprB ::= BracketExprB LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=a;                                  for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // BracketExprB ::= DotExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // BracketExprA ::= DotExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprA",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // RangeExprB ::= RangeExprB RANGE BracketExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // RangeExprB ::= BracketExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // RangeExprA ::= RangeExprB RANGE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",55, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // RangeExprA ::= BracketExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",55, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // DomainExprB ::= DomainExprB DOMAIN RangeExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // DomainExprB ::= RangeExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // DomainExprA ::= DomainExprB DOMAIN Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // DomainExprA ::= RangeExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // RelationExprB ::= DomainExprB RelOp RelationExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=o.b.make(o.a, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // RelationExprB ::= DomainExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // RelationExprA ::= DomainExprB RelOp Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=o.b.make(o.a, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // RelationExprA ::= DomainExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // RelOp ::= LONE_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.LONE_ARROW_LONE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // RelOp ::= LONE_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.LONE_ARROW_ONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // RelOp ::= LONE_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.LONE_ARROW_SOME); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // RelOp ::= LONE_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.LONE_ARROW_ANY ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // RelOp ::= ONE_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.ONE_ARROW_LONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // RelOp ::= ONE_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.ONE_ARROW_ONE  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // RelOp ::= ONE_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.ONE_ARROW_SOME ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // RelOp ::= ONE_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.ONE_ARROW_ANY  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // RelOp ::= SOME_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.SOME_ARROW_LONE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // RelOp ::= SOME_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.SOME_ARROW_ONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // RelOp ::= SOME_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.SOME_ARROW_SOME); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // RelOp ::= SOME_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.SOME_ARROW_ANY ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // RelOp ::= ANY_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.ANY_ARROW_LONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // RelOp ::= ANY_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.ANY_ARROW_ONE  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // RelOp ::= ANY_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.ANY_ARROW_SOME ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // RelOp ::= ARROW 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<>(o, ExprBinary.Op.ARROW          ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // IntersectExprB ::= IntersectExprB AMPERSAND RelationExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",38, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // IntersectExprB ::= RelationExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",38, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // IntersectExprA ::= IntersectExprB AMPERSAND Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",37, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // IntersectExprA ::= RelationExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",37, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // OverrideExprB ::= OverrideExprB PLUSPLUS IntersectExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // OverrideExprB ::= IntersectExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // OverrideExprA ::= OverrideExprB PLUSPLUS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // OverrideExprA ::= IntersectExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // NumUnopExprB ::= INT NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // NumUnopExprB ::= SUM NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // NumUnopExprB ::= HASH NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // NumUnopExprB ::= OverrideExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // NumUnopExprA ::= INT NumUnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // NumUnopExprA ::= SUM NumUnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // NumUnopExprA ::= HASH NumUnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // NumUnopExprA ::= INT Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // NumUnopExprA ::= SUM Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // NumUnopExprA ::= HASH Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // NumUnopExprA ::= OverrideExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // MulExprB ::= MulExprB INTREM NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.REM       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // MulExprB ::= MulExprB INTDIV NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DIV       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // MulExprB ::= MulExprB INTMUL NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MUL       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // MulExprB ::= NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // MulExprA ::= MulExprB INTREM Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.REM       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // MulExprA ::= MulExprB INTDIV Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DIV       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // MulExprA ::= MulExprB INTMUL Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MUL       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // MulExprA ::= NumUnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // UnionDiffExprB ::= UnionDiffExprB INTSUB MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // UnionDiffExprB ::= UnionDiffExprB INTADD MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // UnionDiffExprB ::= UnionDiffExprB MINUS MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // UnionDiffExprB ::= UnionDiffExprB PLUS MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // UnionDiffExprB ::= MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // UnionDiffExprA ::= UnionDiffExprB INTSUB Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // UnionDiffExprA ::= UnionDiffExprB INTADD Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // UnionDiffExprA ::= UnionDiffExprB MINUS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // UnionDiffExprA ::= UnionDiffExprB PLUS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // UnionDiffExprA ::= MulExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ShiftExprB ::= ShiftExprB SHA UnionDiffExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ShiftExprB ::= ShiftExprB SHR UnionDiffExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ShiftExprB ::= ShiftExprB SHL UnionDiffExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ShiftExprB ::= UnionDiffExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ShiftExprA ::= ShiftExprB SHA Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ShiftExprA ::= ShiftExprB SHR Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ShiftExprA ::= ShiftExprB SHL Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ShiftExprA ::= UnionDiffExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // CompareExprB ::= ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // CompareExprB ::= SEQ ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o,"seq/Int"), b); parser.alloymodule.addSeq(o); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // CompareExprB ::= SET ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // CompareExprB ::= ONE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // CompareExprB ::= LONE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // CompareExprB ::= SOME ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // CompareExprB ::= NO ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // CompareExprB ::= ALL ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // CompareExprB ::= CompareExprB NOTGTE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // CompareExprB ::= CompareExprB NOTLTE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // CompareExprB ::= CompareExprB NOTGT ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // CompareExprB ::= CompareExprB NOTLT ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // CompareExprB ::= CompareExprB NOTEQUALS ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // CompareExprB ::= CompareExprB NOTIN ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // CompareExprB ::= CompareExprB GTE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // CompareExprB ::= CompareExprB LTE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // CompareExprB ::= CompareExprB GT ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // CompareExprB ::= CompareExprB LT ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // CompareExprB ::= CompareExprB EQUALS ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // CompareExprB ::= CompareExprB IN ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // CompareExprA ::= ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // CompareExprA ::= SEQ ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o, "seq/Int"), b); parser.alloymodule.addSeq(o); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // CompareExprA ::= SET ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // CompareExprA ::= ONE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // CompareExprA ::= LONE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // CompareExprA ::= SOME ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // CompareExprA ::= NO ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // CompareExprA ::= ALL ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // CompareExprA ::= CompareExprB NOTGTE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // CompareExprA ::= CompareExprB NOTLTE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // CompareExprA ::= CompareExprB NOTGT ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // CompareExprA ::= CompareExprB NOTLT ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // CompareExprA ::= CompareExprB NOTEQUALS ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // CompareExprA ::= CompareExprB NOTIN ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // CompareExprA ::= CompareExprB GTE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // CompareExprA ::= CompareExprB LTE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // CompareExprA ::= CompareExprB GT ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // CompareExprA ::= CompareExprB LT ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // CompareExprA ::= CompareExprB EQUALS ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // CompareExprA ::= CompareExprB IN ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // NegExprB ::= NOT NegExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // NegExprB ::= CompareExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // NegExprA ::= NOT NegExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // NegExprA ::= NOT Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // NegExprA ::= CompareExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // AndExprB ::= AndExprB AND NegExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // AndExprB ::= NegExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // AndExprA ::= AndExprB AND Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // AndExprA ::= NegExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",36, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",36, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // ImpliesExprCloseB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // ImpliesExprCloseB ::= AndExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // ImpliesExprB ::= ImpliesExprOpenB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // ImpliesExprB ::= ImpliesExprCloseB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // ImpliesExprOpenA ::= AndExprB IMPLIES Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ImpliesExprCloseA ::= AndExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // ImpliesExprA ::= ImpliesExprOpenA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",31, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // ImpliesExprA ::= ImpliesExprCloseA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",31, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // EquivExprB ::= EquivExprB IFF ImpliesExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",21, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // EquivExprB ::= ImpliesExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",21, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // EquivExprA ::= EquivExprB IFF Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // EquivExprA ::= ImpliesExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // OrExprB ::= OrExprB OR EquivExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // OrExprB ::= EquivExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // OrExprA ::= OrExprB OR Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // OrExprA ::= EquivExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Bind ::= SUM2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SUM .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Bind ::= ONE2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ONE .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Bind ::= LONE2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.LONE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Bind ::= SOME2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SOME.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Bind ::= NO2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.NO  .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Bind ::= ALL2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ALL .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Bind ::= LET Let 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Expr ::= Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Expr ::= OrExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Expr ::= OrExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // Exprp ::= Exprp COMMA Expr 
            {
              List<Expr> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Expr> a = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // Exprp ::= Expr 
            {
              List<Expr> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // Exprs ::= Exprp 
            {
              List<Expr> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Expr> x = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",28, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // Exprs ::= 
            {
              List<Expr> RESULT =null;
		 RESULT=new ArrayList<>();                
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",28, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // SuperOrBar ::= Super 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",27, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // SuperOrBar ::= BAR Expr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",27, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // SuperP ::= SuperP Expr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(null, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",26, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // SuperP ::= Expr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",26, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Super ::= LBRACE RBRACE 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprConstant.Op.TRUE.make(a.merge(b), 0);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",24, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Super ::= LBRACE SuperP RBRACE 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOOP.make(a.merge(b), x);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",24, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // SuperOpt ::= Super 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",25, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // SuperOpt ::= 
            {
              Expr RESULT =null;
		 RESULT=null;                                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",25, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Let ::= Name EQUALS Expr COMMA Let 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Let ::= Name EQUALS Expr SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Decls ::= COMMA Decls 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=y;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Decls ::= Declb COMMA Decls 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=y; RESULT.add(0,x);                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Decls ::= Declb 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // Decls ::= 
            {
              List<Decl> RESULT =null;
		 RESULT=new ArrayList<>();                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Declp ::= Declb 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(); RESULT.add(y);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Declp ::= Declp COMMA Declb 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; RESULT.add(y);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Declz ::= Decla 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(); RESULT.add(y);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Declz ::= Declz COMMA Decla 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; RESULT.add(y);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Declb ::= Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Declb ::= PRIVATE Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Declb ::= PRIVATE DISJ Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Declb ::= DISJ Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Declb ::= EXH Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Declb ::= PART Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "part");                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Declb ::= Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Declb ::= PRIVATE Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Declb ::= PRIVATE DISJ Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Declb ::= DISJ Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Declb ::= EXH Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Declb ::= PART Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "part");                                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Declb ::= Decla 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Decla ::= Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Decla ::= PRIVATE Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    null, d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Decla ::= PRIVATE DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    k,    d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Decla ::= DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, k,    d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Decla ::= EXH Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "exh");         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Decla ::= PART Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "part");        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Decla ::= Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Decla ::= PRIVATE Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Decla ::= PRIVATE DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Decla ::= DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Decla ::= EXH Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "exh");         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Decla ::= PART Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "part");        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Decla ::= NFEAT9 Decla NFEAT9 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-9); RESULT = x;  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Decla ::= NFEAT8 Decla NFEAT8 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-8); RESULT = x;  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Decla ::= NFEAT7 Decla NFEAT7 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-7); RESULT = x;  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Decla ::= NFEAT6 Decla NFEAT6 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-6); RESULT = x;  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Decla ::= NFEAT5 Decla NFEAT5 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-5); RESULT = x;  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Decla ::= NFEAT4 Decla NFEAT4 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-4); RESULT = x;  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Decla ::= NFEAT3 Decla NFEAT3 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-3); RESULT = x;  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Decla ::= NFEAT2 Decla NFEAT2 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-2); RESULT = x;  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Decla ::= NFEAT1 Decla NFEAT1 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(-1); RESULT = x;  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Decla ::= PFEAT9 Decla PFEAT9 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(9); RESULT = x;   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Decla ::= PFEAT8 Decla PFEAT8 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(8); RESULT = x;   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Decla ::= PFEAT7 Decla PFEAT7 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(7); RESULT = x;   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Decla ::= PFEAT6 Decla PFEAT6 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(6); RESULT = x;   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Decla ::= PFEAT5 Decla PFEAT5 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(5); RESULT = x;   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Decla ::= PFEAT4 Decla PFEAT4 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(4); RESULT = x;   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Decla ::= PFEAT3 Decla PFEAT3 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(3); RESULT = x;   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Decla ::= PFEAT2 Decla PFEAT2 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(2); RESULT = x;   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Decla ::= PFEAT1 Decla PFEAT1 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 x.paint(1); RESULT = x;   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Namex ::= Namex COMMA EXACTLY Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b); a.add(null); a.add(b); RESULT=a;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Namex ::= Namex COMMA Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b);              a.add(b); RESULT=a;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Namex ::= EXACTLY Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<>(); RESULT.add(null); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Namex ::= Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<>();                   RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Names ::= Names COMMA Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b); a.add(b); RESULT=a;                              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Names ::= Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NameHelper ::= NameHelper SLASH ID 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.pos.merge(b.pos), a.label+"/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",43, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NameHelper ::= ID 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",43, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Name ::= SEQ SLASH NameHelper 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b.pos),  "seq/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Name ::= THIS SLASH NameHelper 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b.pos), "this/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Name ::= NameHelper 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SigRefu ::= SigRefu PLUS SigRef 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SigRefu ::= SigRef 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SigRefp ::= SigRefp COMMA SigRef 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SigRefp ::= SigRef 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SigRefs ::= SigRefp 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SigRefs ::= 
            {
              List<ExprVar> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SigRef ::= NONE 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "none");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SigRef ::= SEQ SLASH SIGINT 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b), "seq/Int");  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SigRef ::= SIGINT 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "Int");               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SigRef ::= STRING 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "String");            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SigRef ::= UNIV 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "univ");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SigRef ::= Name 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SigIn ::= 
            {
              List<ExprVar> RESULT =null;
		 RESULT=null;                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SigIn ::= EQUALS SigRefu 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;  x.add(ExprVar.make(a,"="));                                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SigIn ::= IN SigRefu 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;  x.add(ExprVar.make(a,"in"));                                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SigIn ::= EXTENDS SigRef 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(2); RESULT.add(x); RESULT.add(ExprVar.make(a, "extends")); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SigQuals ::= SigQual SigQuals 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Pos> b = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; for(int i=0;i<5;i++) if (a.get(i)==null) a.set(i,b.get(i)); else if (b.get(i)!=null) throw new ErrorSyntax(b.get(i), "The same qualifer cannot be specified more than once for the same sig."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SigQuals ::= SIG 
            {
              List<Pos> RESULT =null;
		 RESULT=new ArrayList<>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SigQual ::= PRIVATE 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SigQual ::= SOME 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SigQual ::= ONE 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(5); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SigQual ::= LONE 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(5); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SigQual ::= ABSTRACT 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(5); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Sig ::= SigQuals Names SigIn LBRACE Decls RBRACE SuperOpt 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		List<ExprVar> c = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   if (e==null) e = ExprConstant.Op.TRUE.make(o, 0);
   ExprVar cc = (c!=null && c.size()>0) ? c.remove(c.size()-1) : null;
   RESULT = new ArrayList<>(); // [HASLab] colorful Alloy
   for(ExprVar bb:b) {
      Sig s = parser.alloymodule.addSig(bb.label, cc, c, d, e,
         AttrType.WHERE   .makenull(bb.pos.merge(e==null ? o : e.span())),
         AttrType.ABSTRACT.makenull(a.get(0)),
         AttrType.LONE    .makenull(a.get(1)),
         AttrType.ONE     .makenull(a.get(2)),
         AttrType.SOME    .makenull(a.get(3)),
         AttrType.PRIVATE .makenull(a.get(4)));
      RESULT.add(s); // [HASLab] colorful Alloy
   }
 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Vis ::= PRIVATE 
            {
              Pos RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=p;    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",86, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Vis ::= 
            {
              Pos RESULT =null;
		 RESULT=null; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",86, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Predicate ::= Vis PRED SigRef DOT Name Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , null, v); RESULT = Arrays.asList(fun); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Predicate ::= Vis PRED SigRef DOT Name LBRACKET Decls RBRACKET Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); RESULT = Arrays.asList(fun); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Predicate ::= Vis PRED SigRef DOT Name LPAREN Decls RPAREN Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); RESULT = Arrays.asList(fun); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Predicate ::= Vis PRED Name Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , null, v); RESULT = Arrays.asList(fun); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Predicate ::= Vis PRED Name LBRACKET Decls RBRACKET Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); RESULT = Arrays.asList(fun); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Predicate ::= Vis PRED Name LPAREN Decls RPAREN Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); RESULT = Arrays.asList(fun); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Function ::= Vis FUN SigRef DOT Name COLON Expr Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , mult(r), v); RESULT = Arrays.asList(fun); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Function ::= Vis FUN SigRef DOT Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-10);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-10);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-9);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-9);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); RESULT = Arrays.asList(fun); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Function ::= Vis FUN SigRef DOT Name LPAREN Decls RPAREN COLON Expr Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-10);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-10);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-9);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-9);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); RESULT = Arrays.asList(fun); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Function ::= Vis FUN Name COLON Expr Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , mult(r), v); RESULT = Arrays.asList(fun); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Function ::= Vis FUN Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); RESULT = Arrays.asList(fun); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Function ::= Vis FUN Name LPAREN Decls RPAREN COLON Expr Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); RESULT = Arrays.asList(fun); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MacroBody ::= EQUALS Expr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MacroBody ::= Super 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Macro ::= Vis LET Name MacroBody 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Macro ::= Vis LET Name LBRACKET RBRACKET MacroBody 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Macro ::= Vis LET Name LBRACKET Names RBRACKET MacroBody 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Macro ::= Vis LET Name LPAREN RPAREN MacroBody 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Macro ::= Vis LET Name LPAREN Names RPAREN MacroBody 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TypeNumber ::= NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, Integer.MAX_VALUE, i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TypeNumber ::= NUMBER DOT DOT NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, b.num,             i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TypeNumber ::= NUMBER DOT DOT NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(b.pos), Sig.NONE, false, a.num, b.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TypeNumber ::= NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		                                                                                RESULT = new CommandScope(a.pos             , Sig.NONE, false, a.num, a.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TypeNumber ::= EXACTLY NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, Integer.MAX_VALUE, i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, b.num,             i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(b.pos), Sig.NONE, true,  a.num, b.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TypeNumber ::= EXACTLY NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		                                                                                RESULT = new CommandScope(    e.merge(a.pos), Sig.NONE, true,  a.num, a.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Typescope ::= TypeNumber NONE 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on none."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Typescope ::= TypeNumber STRING 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(a.pos.merge(b), new PrimSig("String", AttrType.WHERE.make(a.pos.merge(b))), a.isExact, a.startingScope, a.endingScope, a.increment); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Typescope ::= TypeNumber UNIV 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on univ."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Typescope ::= TypeNumber SEQ 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"seq\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the number of sequence index has to be exact.");
   RESULT = new CommandScope(p, new PrimSig("seq", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Typescope ::= TypeNumber INT 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Typescope ::= TypeNumber SIGINT 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Typescope ::= TypeNumber Name 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   nod(b);
   RESULT = new CommandScope(a.pos.merge(b.pos), new PrimSig(b.label, AttrType.WHERE.make(a.pos.merge(b.pos))), a.isExact, a.startingScope, a.endingScope, a.increment);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Typescopes ::= Typescopes COMMA Typescope 
            {
              List<CommandScope> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<CommandScope> a = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		CommandScope b = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; a.add(b);                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Typescopes ::= Typescope 
            {
              List<CommandScope> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(); RESULT.add(a); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Featscope ::= Featscope COMMA NFEAT9 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(9)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-9); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Featscope ::= Featscope COMMA NFEAT8 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(8)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-8); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Featscope ::= Featscope COMMA NFEAT7 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(7)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-7); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Featscope ::= Featscope COMMA NFEAT6 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(6)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-6); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Featscope ::= Featscope COMMA NFEAT5 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(5)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-5); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Featscope ::= Featscope COMMA NFEAT4 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(4)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-4); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Featscope ::= Featscope COMMA NFEAT3 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(3)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-3); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Featscope ::= Featscope COMMA NFEAT2 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(2)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-2); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Featscope ::= Featscope COMMA NFEAT1 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(1)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature ");  RESULT=a; RESULT.add(-1); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Featscope ::= Featscope COMMA PFEAT9 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(-9)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(9);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Featscope ::= Featscope COMMA PFEAT8 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(-8)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(8);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Featscope ::= Featscope COMMA PFEAT7 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(-7)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(7);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Featscope ::= Featscope COMMA PFEAT6 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(-6)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(6);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Featscope ::= Featscope COMMA PFEAT5 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(-5)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(5);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Featscope ::= Featscope COMMA PFEAT4 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(-4)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(4);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Featscope ::= Featscope COMMA PFEAT3 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(-3)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(3);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Featscope ::= Featscope COMMA PFEAT2 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(-2)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(2);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Featscope ::= Featscope COMMA PFEAT1 
            {
              List<Integer> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Integer> a = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if(a.contains(-1)) throw new ErrorColor(c,"Feature selected error: no negative and positive of same feature "); RESULT=a; RESULT.add(1);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Featscope ::= NFEAT9 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(-9); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Featscope ::= NFEAT8 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(-8); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Featscope ::= NFEAT7 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(-7); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Featscope ::= NFEAT6 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(-6); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Featscope ::= NFEAT5 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(-5); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Featscope ::= NFEAT4 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(-4); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Featscope ::= NFEAT3 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(-3); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Featscope ::= NFEAT2 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(-2); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Featscope ::= NFEAT1 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(-1); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Featscope ::= PFEAT9 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(9);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Featscope ::= PFEAT8 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(8);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Featscope ::= PFEAT7 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(7);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Featscope ::= PFEAT6 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(6);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Featscope ::= PFEAT5 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(5);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Featscope ::= PFEAT4 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(4);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Featscope ::= PFEAT3 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(3);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Featscope ::= PFEAT2 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(2);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Featscope ::= PFEAT1 
            {
              List<Integer> RESULT =null;
		 RESULT=new ArrayList<>(); RESULT.add(1);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Scope ::= 
            {
              List<CommandScope> RESULT =null;
		 RESULT=new ArrayList<>();                                                                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Scope ::= FOR Typescopes 
            {
              List<CommandScope> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Scope ::= FOR NUMBER BUT Typescopes 
            {
              List<CommandScope> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                  b.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Scope ::= FOR NUMBER 
            {
              List<CommandScope> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<>(); RESULT.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Product ::= 
            {
              FeatureScope RESULT =null;
		 RESULT=new FeatureScope(null,false,new ArrayList<Integer>()); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Product",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Product ::= WITH Featscope 
            {
              FeatureScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Integer> b = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new FeatureScope(o,false,b);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Product",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Product ::= WITH EXACTLY PFEAT0 
            {
              FeatureScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		 RESULT=new FeatureScope(o,true,new ArrayList<Integer>());    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Product",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Product ::= WITH EXACTLY Featscope 
            {
              FeatureScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Integer> b = (List<Integer>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new FeatureScope(o,true,b);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Product",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expects ::= EXPECT NUMBER 
            {
              ExprConstant RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expects ::= 
            {
              ExprConstant RESULT =null;
		 RESULT=null; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Command ::= Command IMPLIES CommandPrefix Name Product Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,null,n   ,null,s,c,p); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Command ::= Command IMPLIES CommandPrefix Name Name Product Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,x   ,n   ,null,s,c,p); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Command ::= CommandPrefix Name Product Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,null,n   ,null,s,c,p); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Command ::= CommandPrefix Name Name Product Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,x   ,n   ,null,s,c,p); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Command ::= Command IMPLIES CommandPrefix Super Product Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,null,null,e   ,s,c,p); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Command ::= Command IMPLIES CommandPrefix Name Super Product Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,x   ,null,e   ,s,c,p); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Command ::= CommandPrefix Super Product Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,null,null,e   ,s,c,p); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Command ::= CommandPrefix Name Super Product Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		FeatureScope p = (FeatureScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,x   ,null,e   ,s,c,p); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CommandPrefix ::= RUN 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(r, "r"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CommandPrefix ::= CHECK 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(c, "c"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PSpec ::= Predicate 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PSpec ::= Function 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Browsable> f = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = f; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PSpec ::= Sig 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Browsable> s = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PSpec ::= ASSERT STR Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addAssertion (o , n.string , e); RESULT = Arrays.asList(e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PSpec ::= ASSERT Name Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addAssertion (o , n.label  , e); RESULT = Arrays.asList(e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PSpec ::= ASSERT Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addAssertion (o , ""       , e); RESULT = Arrays.asList(e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PSpec ::= FACT STR Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addFact      (o , n.string , e); RESULT = Arrays.asList(e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PSpec ::= FACT Name Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFact      (o , n.label  , e); RESULT = Arrays.asList(e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PSpec ::= FACT Super 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addFact      (o , ""       , e); RESULT = Arrays.asList(e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PSpec ::= NFEAT9 PSpec NFEAT9 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(-9); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PSpec ::= NFEAT8 PSpec NFEAT8 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(-8); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PSpec ::= NFEAT7 PSpec NFEAT7 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(-7); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PSpec ::= NFEAT6 PSpec NFEAT6 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(-6); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PSpec ::= NFEAT5 PSpec NFEAT5 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(-5); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PSpec ::= NFEAT4 PSpec NFEAT4 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(-4); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PSpec ::= NFEAT3 PSpec NFEAT3 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(-3); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PSpec ::= NFEAT2 PSpec NFEAT2 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(-2); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PSpec ::= NFEAT1 PSpec NFEAT1 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(-1); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PSpec ::= PFEAT9 PSpec PFEAT9 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(9); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PSpec ::= PFEAT8 PSpec PFEAT8 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(8); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PSpec ::= PFEAT7 PSpec PFEAT7 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(7); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PSpec ::= PFEAT6 PSpec PFEAT6 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(6); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PSpec ::= PFEAT5 PSpec PFEAT5 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(5); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PSpec ::= PFEAT4 PSpec PFEAT4 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(4); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PSpec ::= PFEAT3 PSpec PFEAT3 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(3); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PSpec ::= PFEAT2 PSpec PFEAT2 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(2); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PSpec ::= PFEAT1 PSpec PFEAT1 
            {
              List<Browsable> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Browsable> p = (List<Browsable>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		  for (Browsable b:p) b.paint(1); RESULT=p; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("PSpec",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Spec ::= 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Spec ::= Spec PSpec 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Spec ::= Spec Command 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Spec ::= Spec Macro 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Spec ::= Spec Vis ENUM Name LBRACE RBRACE 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, null, c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Spec ::= Spec Vis ENUM Name LBRACE Names RBRACE 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<ExprVar> n = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, n,    c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET AS Name 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, b,    c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(c),     p, a, b,    null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Spec ::= Spec Vis OPEN Name AS Name 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, null, c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Spec ::= Spec Vis OPEN Name 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(a.pos), p, a, null, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Spec ::= Spec MODULE Name LBRACKET Namex RBRACKET 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); nod(b); parser.alloymodule.addModelName(o.merge(r)     , n.label , b                       ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Spec ::= Spec MODULE Name 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n);         parser.alloymodule.addModelName(o.merge(n.pos) , n.label , new ArrayList<ExprVar>()); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= File EOF 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Object start_val = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		RESULT = start_val;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompParser$parser.done_parsing();
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // File ::= Spec 
            {
              Object RESULT =null;
		 parser.alloymodule.doneParsing(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("File",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

